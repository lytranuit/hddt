//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace DAIHOI.pypharmtest.extmientrung {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ExtMienTrungServiceSoap", Namespace="http://tempuri.org/")]
    public partial class ExtMienTrungService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AdjustInvoiceActionOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDanhMucSanPhamOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustAssignedNoNewPatternKidoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCurrentNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportAndPublishInvLotteOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInvViewNoPayOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInvViewNoPayJsonOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInvViewFkeyNoPayOperationCompleted;
        
        private System.Threading.SendOrPostCallback listInvByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback listPatternSerialByComOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchInvOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ExtMienTrungService() {
            this.Url = global::DAIHOI.Properties.Settings.Default.DAIHOI_pypharmtest_extmientrung_ExtMienTrungService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AdjustInvoiceActionCompletedEventHandler AdjustInvoiceActionCompleted;
        
        /// <remarks/>
        public event UpdateDanhMucSanPhamCompletedEventHandler UpdateDanhMucSanPhamCompleted;
        
        /// <remarks/>
        public event AdjustAssignedNoNewPatternKidoCompletedEventHandler AdjustAssignedNoNewPatternKidoCompleted;
        
        /// <remarks/>
        public event getCurrentNoCompletedEventHandler getCurrentNoCompleted;
        
        /// <remarks/>
        public event ImportAndPublishInvLotteCompletedEventHandler ImportAndPublishInvLotteCompleted;
        
        /// <remarks/>
        public event getInvViewNoPayCompletedEventHandler getInvViewNoPayCompleted;
        
        /// <remarks/>
        public event getInvViewNoPayJsonCompletedEventHandler getInvViewNoPayJsonCompleted;
        
        /// <remarks/>
        public event getInvViewFkeyNoPayCompletedEventHandler getInvViewFkeyNoPayCompleted;
        
        /// <remarks/>
        public event listInvByDateCompletedEventHandler listInvByDateCompleted;
        
        /// <remarks/>
        public event listPatternSerialByComCompletedEventHandler listPatternSerialByComCompleted;
        
        /// <remarks/>
        public event SearchInvCompletedEventHandler SearchInvCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdjustInvoiceAction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdjustInvoiceAction(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert, string pattern, string serial) {
            object[] results = this.Invoke("AdjustInvoiceAction", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        AttachFile,
                        convert,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustInvoiceActionAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, System.Nullable<int> convert, string pattern, string serial) {
            this.AdjustInvoiceActionAsync(Account, ACpass, xmlInvData, username, pass, fkey, AttachFile, convert, pattern, serial, null);
        }
        
        /// <remarks/>
        public void AdjustInvoiceActionAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, System.Nullable<int> convert, string pattern, string serial, object userState) {
            if ((this.AdjustInvoiceActionOperationCompleted == null)) {
                this.AdjustInvoiceActionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustInvoiceActionOperationCompleted);
            }
            this.InvokeAsync("AdjustInvoiceAction", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        AttachFile,
                        convert,
                        pattern,
                        serial}, this.AdjustInvoiceActionOperationCompleted, userState);
        }
        
        private void OnAdjustInvoiceActionOperationCompleted(object arg) {
            if ((this.AdjustInvoiceActionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustInvoiceActionCompleted(this, new AdjustInvoiceActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDanhMucSanPham", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateDanhMucSanPham(string json, string username, string pass) {
            object[] results = this.Invoke("UpdateDanhMucSanPham", new object[] {
                        json,
                        username,
                        pass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDanhMucSanPhamAsync(string json, string username, string pass) {
            this.UpdateDanhMucSanPhamAsync(json, username, pass, null);
        }
        
        /// <remarks/>
        public void UpdateDanhMucSanPhamAsync(string json, string username, string pass, object userState) {
            if ((this.UpdateDanhMucSanPhamOperationCompleted == null)) {
                this.UpdateDanhMucSanPhamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDanhMucSanPhamOperationCompleted);
            }
            this.InvokeAsync("UpdateDanhMucSanPham", new object[] {
                        json,
                        username,
                        pass}, this.UpdateDanhMucSanPhamOperationCompleted, userState);
        }
        
        private void OnUpdateDanhMucSanPhamOperationCompleted(object arg) {
            if ((this.UpdateDanhMucSanPhamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDanhMucSanPhamCompleted(this, new UpdateDanhMucSanPhamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdjustAssignedNoNewPatternKido", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdjustAssignedNoNewPatternKido(string Account, string ACpass, string xmlInvData, double invno, string username, string pass, string fkey, string AttachFile, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert, string pattern, string serial) {
            object[] results = this.Invoke("AdjustAssignedNoNewPatternKido", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        invno,
                        username,
                        pass,
                        fkey,
                        AttachFile,
                        convert,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustAssignedNoNewPatternKidoAsync(string Account, string ACpass, string xmlInvData, double invno, string username, string pass, string fkey, string AttachFile, System.Nullable<int> convert, string pattern, string serial) {
            this.AdjustAssignedNoNewPatternKidoAsync(Account, ACpass, xmlInvData, invno, username, pass, fkey, AttachFile, convert, pattern, serial, null);
        }
        
        /// <remarks/>
        public void AdjustAssignedNoNewPatternKidoAsync(string Account, string ACpass, string xmlInvData, double invno, string username, string pass, string fkey, string AttachFile, System.Nullable<int> convert, string pattern, string serial, object userState) {
            if ((this.AdjustAssignedNoNewPatternKidoOperationCompleted == null)) {
                this.AdjustAssignedNoNewPatternKidoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustAssignedNoNewPatternKidoOperationCompleted);
            }
            this.InvokeAsync("AdjustAssignedNoNewPatternKido", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        invno,
                        username,
                        pass,
                        fkey,
                        AttachFile,
                        convert,
                        pattern,
                        serial}, this.AdjustAssignedNoNewPatternKidoOperationCompleted, userState);
        }
        
        private void OnAdjustAssignedNoNewPatternKidoOperationCompleted(object arg) {
            if ((this.AdjustAssignedNoNewPatternKidoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustAssignedNoNewPatternKidoCompleted(this, new AdjustAssignedNoNewPatternKidoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCurrentNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getCurrentNo(string Pattern, string serial, string userName, string userPass) {
            object[] results = this.Invoke("getCurrentNo", new object[] {
                        Pattern,
                        serial,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getCurrentNoAsync(string Pattern, string serial, string userName, string userPass) {
            this.getCurrentNoAsync(Pattern, serial, userName, userPass, null);
        }
        
        /// <remarks/>
        public void getCurrentNoAsync(string Pattern, string serial, string userName, string userPass, object userState) {
            if ((this.getCurrentNoOperationCompleted == null)) {
                this.getCurrentNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCurrentNoOperationCompleted);
            }
            this.InvokeAsync("getCurrentNo", new object[] {
                        Pattern,
                        serial,
                        userName,
                        userPass}, this.getCurrentNoOperationCompleted, userState);
        }
        
        private void OngetCurrentNoOperationCompleted(object arg) {
            if ((this.getCurrentNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCurrentNoCompleted(this, new getCurrentNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportAndPublishInvLotte", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportAndPublishInvLotte(string Account, string ACpass, string xmlInvData, decimal newamount, string username, string password, string pattern, string serial, string fkeyold, int convert) {
            object[] results = this.Invoke("ImportAndPublishInvLotte", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        newamount,
                        username,
                        password,
                        pattern,
                        serial,
                        fkeyold,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportAndPublishInvLotteAsync(string Account, string ACpass, string xmlInvData, decimal newamount, string username, string password, string pattern, string serial, string fkeyold, int convert) {
            this.ImportAndPublishInvLotteAsync(Account, ACpass, xmlInvData, newamount, username, password, pattern, serial, fkeyold, convert, null);
        }
        
        /// <remarks/>
        public void ImportAndPublishInvLotteAsync(string Account, string ACpass, string xmlInvData, decimal newamount, string username, string password, string pattern, string serial, string fkeyold, int convert, object userState) {
            if ((this.ImportAndPublishInvLotteOperationCompleted == null)) {
                this.ImportAndPublishInvLotteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportAndPublishInvLotteOperationCompleted);
            }
            this.InvokeAsync("ImportAndPublishInvLotte", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        newamount,
                        username,
                        password,
                        pattern,
                        serial,
                        fkeyold,
                        convert}, this.ImportAndPublishInvLotteOperationCompleted, userState);
        }
        
        private void OnImportAndPublishInvLotteOperationCompleted(object arg) {
            if ((this.ImportAndPublishInvLotteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportAndPublishInvLotteCompleted(this, new ImportAndPublishInvLotteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getInvViewNoPay", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getInvViewNoPay(string pattern, string serial, decimal InvNo, string userName, string userPass) {
            object[] results = this.Invoke("getInvViewNoPay", new object[] {
                        pattern,
                        serial,
                        InvNo,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getInvViewNoPayAsync(string pattern, string serial, decimal InvNo, string userName, string userPass) {
            this.getInvViewNoPayAsync(pattern, serial, InvNo, userName, userPass, null);
        }
        
        /// <remarks/>
        public void getInvViewNoPayAsync(string pattern, string serial, decimal InvNo, string userName, string userPass, object userState) {
            if ((this.getInvViewNoPayOperationCompleted == null)) {
                this.getInvViewNoPayOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInvViewNoPayOperationCompleted);
            }
            this.InvokeAsync("getInvViewNoPay", new object[] {
                        pattern,
                        serial,
                        InvNo,
                        userName,
                        userPass}, this.getInvViewNoPayOperationCompleted, userState);
        }
        
        private void OngetInvViewNoPayOperationCompleted(object arg) {
            if ((this.getInvViewNoPayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInvViewNoPayCompleted(this, new getInvViewNoPayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getInvViewNoPayJson", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getInvViewNoPayJson(string pattern, string serial, decimal InvNo, string userName, string userPass) {
            object[] results = this.Invoke("getInvViewNoPayJson", new object[] {
                        pattern,
                        serial,
                        InvNo,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getInvViewNoPayJsonAsync(string pattern, string serial, decimal InvNo, string userName, string userPass) {
            this.getInvViewNoPayJsonAsync(pattern, serial, InvNo, userName, userPass, null);
        }
        
        /// <remarks/>
        public void getInvViewNoPayJsonAsync(string pattern, string serial, decimal InvNo, string userName, string userPass, object userState) {
            if ((this.getInvViewNoPayJsonOperationCompleted == null)) {
                this.getInvViewNoPayJsonOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInvViewNoPayJsonOperationCompleted);
            }
            this.InvokeAsync("getInvViewNoPayJson", new object[] {
                        pattern,
                        serial,
                        InvNo,
                        userName,
                        userPass}, this.getInvViewNoPayJsonOperationCompleted, userState);
        }
        
        private void OngetInvViewNoPayJsonOperationCompleted(object arg) {
            if ((this.getInvViewNoPayJsonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInvViewNoPayJsonCompleted(this, new getInvViewNoPayJsonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getInvViewFkeyNoPay", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getInvViewFkeyNoPay(string fkey, string userName, string userPass) {
            object[] results = this.Invoke("getInvViewFkeyNoPay", new object[] {
                        fkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getInvViewFkeyNoPayAsync(string fkey, string userName, string userPass) {
            this.getInvViewFkeyNoPayAsync(fkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void getInvViewFkeyNoPayAsync(string fkey, string userName, string userPass, object userState) {
            if ((this.getInvViewFkeyNoPayOperationCompleted == null)) {
                this.getInvViewFkeyNoPayOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInvViewFkeyNoPayOperationCompleted);
            }
            this.InvokeAsync("getInvViewFkeyNoPay", new object[] {
                        fkey,
                        userName,
                        userPass}, this.getInvViewFkeyNoPayOperationCompleted, userState);
        }
        
        private void OngetInvViewFkeyNoPayOperationCompleted(object arg) {
            if ((this.getInvViewFkeyNoPayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInvViewFkeyNoPayCompleted(this, new getInvViewFkeyNoPayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/listInvByDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string listInvByDate(string fromDate, string toDate, string userName, string userPass, string pattern, string serial) {
            object[] results = this.Invoke("listInvByDate", new object[] {
                        fromDate,
                        toDate,
                        userName,
                        userPass,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void listInvByDateAsync(string fromDate, string toDate, string userName, string userPass, string pattern, string serial) {
            this.listInvByDateAsync(fromDate, toDate, userName, userPass, pattern, serial, null);
        }
        
        /// <remarks/>
        public void listInvByDateAsync(string fromDate, string toDate, string userName, string userPass, string pattern, string serial, object userState) {
            if ((this.listInvByDateOperationCompleted == null)) {
                this.listInvByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlistInvByDateOperationCompleted);
            }
            this.InvokeAsync("listInvByDate", new object[] {
                        fromDate,
                        toDate,
                        userName,
                        userPass,
                        pattern,
                        serial}, this.listInvByDateOperationCompleted, userState);
        }
        
        private void OnlistInvByDateOperationCompleted(object arg) {
            if ((this.listInvByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.listInvByDateCompleted(this, new listInvByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/listPatternSerialByCom", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string listPatternSerialByCom(string userName, string pass, string comid) {
            object[] results = this.Invoke("listPatternSerialByCom", new object[] {
                        userName,
                        pass,
                        comid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void listPatternSerialByComAsync(string userName, string pass, string comid) {
            this.listPatternSerialByComAsync(userName, pass, comid, null);
        }
        
        /// <remarks/>
        public void listPatternSerialByComAsync(string userName, string pass, string comid, object userState) {
            if ((this.listPatternSerialByComOperationCompleted == null)) {
                this.listPatternSerialByComOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlistPatternSerialByComOperationCompleted);
            }
            this.InvokeAsync("listPatternSerialByCom", new object[] {
                        userName,
                        pass,
                        comid}, this.listPatternSerialByComOperationCompleted, userState);
        }
        
        private void OnlistPatternSerialByComOperationCompleted(object arg) {
            if ((this.listPatternSerialByComCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.listPatternSerialByComCompleted(this, new listPatternSerialByComCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchInv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SearchInv(string Extra10, string cusCode, string pattern, string serial, string fromDate, string toDate, string fromNo, string ToNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> page, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> pageSize, string userName, string userPass) {
            object[] results = this.Invoke("SearchInv", new object[] {
                        Extra10,
                        cusCode,
                        pattern,
                        serial,
                        fromDate,
                        toDate,
                        fromNo,
                        ToNo,
                        page,
                        pageSize,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SearchInvAsync(string Extra10, string cusCode, string pattern, string serial, string fromDate, string toDate, string fromNo, string ToNo, System.Nullable<int> page, System.Nullable<int> pageSize, string userName, string userPass) {
            this.SearchInvAsync(Extra10, cusCode, pattern, serial, fromDate, toDate, fromNo, ToNo, page, pageSize, userName, userPass, null);
        }
        
        /// <remarks/>
        public void SearchInvAsync(string Extra10, string cusCode, string pattern, string serial, string fromDate, string toDate, string fromNo, string ToNo, System.Nullable<int> page, System.Nullable<int> pageSize, string userName, string userPass, object userState) {
            if ((this.SearchInvOperationCompleted == null)) {
                this.SearchInvOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchInvOperationCompleted);
            }
            this.InvokeAsync("SearchInv", new object[] {
                        Extra10,
                        cusCode,
                        pattern,
                        serial,
                        fromDate,
                        toDate,
                        fromNo,
                        ToNo,
                        page,
                        pageSize,
                        userName,
                        userPass}, this.SearchInvOperationCompleted, userState);
        }
        
        private void OnSearchInvOperationCompleted(object arg) {
            if ((this.SearchInvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchInvCompleted(this, new SearchInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AdjustInvoiceActionCompletedEventHandler(object sender, AdjustInvoiceActionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustInvoiceActionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustInvoiceActionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void UpdateDanhMucSanPhamCompletedEventHandler(object sender, UpdateDanhMucSanPhamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDanhMucSanPhamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDanhMucSanPhamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AdjustAssignedNoNewPatternKidoCompletedEventHandler(object sender, AdjustAssignedNoNewPatternKidoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustAssignedNoNewPatternKidoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustAssignedNoNewPatternKidoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getCurrentNoCompletedEventHandler(object sender, getCurrentNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCurrentNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCurrentNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ImportAndPublishInvLotteCompletedEventHandler(object sender, ImportAndPublishInvLotteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportAndPublishInvLotteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportAndPublishInvLotteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getInvViewNoPayCompletedEventHandler(object sender, getInvViewNoPayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInvViewNoPayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInvViewNoPayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getInvViewNoPayJsonCompletedEventHandler(object sender, getInvViewNoPayJsonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInvViewNoPayJsonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInvViewNoPayJsonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getInvViewFkeyNoPayCompletedEventHandler(object sender, getInvViewFkeyNoPayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInvViewFkeyNoPayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInvViewFkeyNoPayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void listInvByDateCompletedEventHandler(object sender, listInvByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class listInvByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal listInvByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void listPatternSerialByComCompletedEventHandler(object sender, listPatternSerialByComCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class listPatternSerialByComCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal listPatternSerialByComCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void SearchInvCompletedEventHandler(object sender, SearchInvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchInvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchInvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591