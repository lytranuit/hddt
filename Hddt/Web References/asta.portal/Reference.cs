//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace DAIHOI.asta.portal {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PortalServiceSoap", Namespace="http://tempuri.org/")]
    public partial class PortalService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback listInvByCusOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchInvOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCatalogViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInvViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInvViewNoPayOperationCompleted;
        
        private System.Threading.SendOrPostCallback convertForStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback convertForVerifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback downloadInvOperationCompleted;
        
        private System.Threading.SendOrPostCallback downloadInvErrorOperationCompleted;
        
        private System.Threading.SendOrPostCallback downloadInvNoPayOperationCompleted;
        
        private System.Threading.SendOrPostCallback downloadInvNoPayErrorOperationCompleted;
        
        private System.Threading.SendOrPostCallback downloadInvPDFOperationCompleted;
        
        private System.Threading.SendOrPostCallback downloadInvPDFNoPayOperationCompleted;
        
        private System.Threading.SendOrPostCallback downloadInvZipTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback listInvByCusFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback listInvByCusFkeyVNPOperationCompleted;
        
        private System.Threading.SendOrPostCallback getcatalogViewFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback downloadInvPDFFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback downloadInvPDFFkeyNoPayOperationCompleted;
        
        private System.Threading.SendOrPostCallback downloadNewInvPDFFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInvViewFkeyByStaffOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInvViewFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInvViewFkeyNoPayOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNewInvViewFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback convertForStoreFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback convertForVerifyFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback downloadInvFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback downloadInvFkeyNoPayOperationCompleted;
        
        private System.Threading.SendOrPostCallback downloadInvErrorFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback downloadInvErrorPDFOperationCompleted;
        
        private System.Threading.SendOrPostCallback downloadInvPDFNoPayErrorOperationCompleted;
        
        private System.Threading.SendOrPostCallback downloadInvPDFFkeyErrorOperationCompleted;
        
        private System.Threading.SendOrPostCallback downloadInvPDFFkeyNoPayErrorOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInvErrorViewFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback downloadInvZipFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDigestOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConfirmSigantureOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCusOperationCompleted;
        
        private System.Threading.SendOrPostCallback getStaffOperationCompleted;
        
        private System.Threading.SendOrPostCallback listInvFromNoToNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInvViewFkeyNoPayPatternOperationCompleted;
        
        private System.Threading.SendOrPostCallback convertForStoreFkeyPatternOperationCompleted;
        
        private System.Threading.SendOrPostCallback convertForVerifyFkeyPatternOperationCompleted;
        
        private System.Threading.SendOrPostCallback loginportalOperationCompleted;
        
        private System.Threading.SendOrPostCallback forgetpassOperationCompleted;
        
        private System.Threading.SendOrPostCallback changepasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback listCompanyOperationCompleted;
        
        private System.Threading.SendOrPostCallback listPatternByComOperationCompleted;
        
        private System.Threading.SendOrPostCallback convertForVerifyBase64HtmlByFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback convertForStoreBase64HtmlByFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInvViewByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback downloadCTTTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback downloadCTTFkeyOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PortalService() {
            this.Url = global::DAIHOI.Properties.Settings.Default.DAIHOI_pypharm_portal_PortalService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event listInvByCusCompletedEventHandler listInvByCusCompleted;
        
        /// <remarks/>
        public event SearchInvCompletedEventHandler SearchInvCompleted;
        
        /// <remarks/>
        public event getCatalogViewCompletedEventHandler getCatalogViewCompleted;
        
        /// <remarks/>
        public event getInvViewCompletedEventHandler getInvViewCompleted;
        
        /// <remarks/>
        public event getInvViewNoPayCompletedEventHandler getInvViewNoPayCompleted;
        
        /// <remarks/>
        public event convertForStoreCompletedEventHandler convertForStoreCompleted;
        
        /// <remarks/>
        public event convertForVerifyCompletedEventHandler convertForVerifyCompleted;
        
        /// <remarks/>
        public event downloadInvCompletedEventHandler downloadInvCompleted;
        
        /// <remarks/>
        public event downloadInvErrorCompletedEventHandler downloadInvErrorCompleted;
        
        /// <remarks/>
        public event downloadInvNoPayCompletedEventHandler downloadInvNoPayCompleted;
        
        /// <remarks/>
        public event downloadInvNoPayErrorCompletedEventHandler downloadInvNoPayErrorCompleted;
        
        /// <remarks/>
        public event downloadInvPDFCompletedEventHandler downloadInvPDFCompleted;
        
        /// <remarks/>
        public event downloadInvPDFNoPayCompletedEventHandler downloadInvPDFNoPayCompleted;
        
        /// <remarks/>
        public event downloadInvZipTokenCompletedEventHandler downloadInvZipTokenCompleted;
        
        /// <remarks/>
        public event listInvByCusFkeyCompletedEventHandler listInvByCusFkeyCompleted;
        
        /// <remarks/>
        public event listInvByCusFkeyVNPCompletedEventHandler listInvByCusFkeyVNPCompleted;
        
        /// <remarks/>
        public event getcatalogViewFkeyCompletedEventHandler getcatalogViewFkeyCompleted;
        
        /// <remarks/>
        public event downloadInvPDFFkeyCompletedEventHandler downloadInvPDFFkeyCompleted;
        
        /// <remarks/>
        public event downloadInvPDFFkeyNoPayCompletedEventHandler downloadInvPDFFkeyNoPayCompleted;
        
        /// <remarks/>
        public event downloadNewInvPDFFkeyCompletedEventHandler downloadNewInvPDFFkeyCompleted;
        
        /// <remarks/>
        public event getInvViewFkeyByStaffCompletedEventHandler getInvViewFkeyByStaffCompleted;
        
        /// <remarks/>
        public event getInvViewFkeyCompletedEventHandler getInvViewFkeyCompleted;
        
        /// <remarks/>
        public event getInvViewFkeyNoPayCompletedEventHandler getInvViewFkeyNoPayCompleted;
        
        /// <remarks/>
        public event getNewInvViewFkeyCompletedEventHandler getNewInvViewFkeyCompleted;
        
        /// <remarks/>
        public event convertForStoreFkeyCompletedEventHandler convertForStoreFkeyCompleted;
        
        /// <remarks/>
        public event convertForVerifyFkeyCompletedEventHandler convertForVerifyFkeyCompleted;
        
        /// <remarks/>
        public event downloadInvFkeyCompletedEventHandler downloadInvFkeyCompleted;
        
        /// <remarks/>
        public event downloadInvFkeyNoPayCompletedEventHandler downloadInvFkeyNoPayCompleted;
        
        /// <remarks/>
        public event downloadInvErrorFkeyCompletedEventHandler downloadInvErrorFkeyCompleted;
        
        /// <remarks/>
        public event downloadInvErrorPDFCompletedEventHandler downloadInvErrorPDFCompleted;
        
        /// <remarks/>
        public event downloadInvPDFNoPayErrorCompletedEventHandler downloadInvPDFNoPayErrorCompleted;
        
        /// <remarks/>
        public event downloadInvPDFFkeyErrorCompletedEventHandler downloadInvPDFFkeyErrorCompleted;
        
        /// <remarks/>
        public event downloadInvPDFFkeyNoPayErrorCompletedEventHandler downloadInvPDFFkeyNoPayErrorCompleted;
        
        /// <remarks/>
        public event GetInvErrorViewFkeyCompletedEventHandler GetInvErrorViewFkeyCompleted;
        
        /// <remarks/>
        public event downloadInvZipFkeyCompletedEventHandler downloadInvZipFkeyCompleted;
        
        /// <remarks/>
        public event getDigestCompletedEventHandler getDigestCompleted;
        
        /// <remarks/>
        public event ConfirmSigantureCompletedEventHandler ConfirmSigantureCompleted;
        
        /// <remarks/>
        public event getCusCompletedEventHandler getCusCompleted;
        
        /// <remarks/>
        public event getStaffCompletedEventHandler getStaffCompleted;
        
        /// <remarks/>
        public event listInvFromNoToNoCompletedEventHandler listInvFromNoToNoCompleted;
        
        /// <remarks/>
        public event getInvViewFkeyNoPayPatternCompletedEventHandler getInvViewFkeyNoPayPatternCompleted;
        
        /// <remarks/>
        public event convertForStoreFkeyPatternCompletedEventHandler convertForStoreFkeyPatternCompleted;
        
        /// <remarks/>
        public event convertForVerifyFkeyPatternCompletedEventHandler convertForVerifyFkeyPatternCompleted;
        
        /// <remarks/>
        public event loginportalCompletedEventHandler loginportalCompleted;
        
        /// <remarks/>
        public event forgetpassCompletedEventHandler forgetpassCompleted;
        
        /// <remarks/>
        public event changepasswordCompletedEventHandler changepasswordCompleted;
        
        /// <remarks/>
        public event listCompanyCompletedEventHandler listCompanyCompleted;
        
        /// <remarks/>
        public event listPatternByComCompletedEventHandler listPatternByComCompleted;
        
        /// <remarks/>
        public event convertForVerifyBase64HtmlByFkeyCompletedEventHandler convertForVerifyBase64HtmlByFkeyCompleted;
        
        /// <remarks/>
        public event convertForStoreBase64HtmlByFkeyCompletedEventHandler convertForStoreBase64HtmlByFkeyCompleted;
        
        /// <remarks/>
        public event GetInvViewByDateCompletedEventHandler GetInvViewByDateCompleted;
        
        /// <remarks/>
        public event downloadCTTTokenCompletedEventHandler downloadCTTTokenCompleted;
        
        /// <remarks/>
        public event downloadCTTFkeyCompletedEventHandler downloadCTTFkeyCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/listInvByCus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string listInvByCus(string cusCode, string fromDate, string toDate, string userName, string userPass) {
            object[] results = this.Invoke("listInvByCus", new object[] {
                        cusCode,
                        fromDate,
                        toDate,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void listInvByCusAsync(string cusCode, string fromDate, string toDate, string userName, string userPass) {
            this.listInvByCusAsync(cusCode, fromDate, toDate, userName, userPass, null);
        }
        
        /// <remarks/>
        public void listInvByCusAsync(string cusCode, string fromDate, string toDate, string userName, string userPass, object userState) {
            if ((this.listInvByCusOperationCompleted == null)) {
                this.listInvByCusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlistInvByCusOperationCompleted);
            }
            this.InvokeAsync("listInvByCus", new object[] {
                        cusCode,
                        fromDate,
                        toDate,
                        userName,
                        userPass}, this.listInvByCusOperationCompleted, userState);
        }
        
        private void OnlistInvByCusOperationCompleted(object arg) {
            if ((this.listInvByCusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.listInvByCusCompleted(this, new listInvByCusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchInv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SearchInv(string cusCode, string pattern, string serial, string fromDate, string toDate, string invNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> invStatus, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> page, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> cussignStatus, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> payment, string userName, string userPass) {
            object[] results = this.Invoke("SearchInv", new object[] {
                        cusCode,
                        pattern,
                        serial,
                        fromDate,
                        toDate,
                        invNumber,
                        invStatus,
                        page,
                        cussignStatus,
                        payment,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SearchInvAsync(string cusCode, string pattern, string serial, string fromDate, string toDate, string invNumber, System.Nullable<int> invStatus, System.Nullable<int> page, System.Nullable<int> cussignStatus, System.Nullable<int> payment, string userName, string userPass) {
            this.SearchInvAsync(cusCode, pattern, serial, fromDate, toDate, invNumber, invStatus, page, cussignStatus, payment, userName, userPass, null);
        }
        
        /// <remarks/>
        public void SearchInvAsync(string cusCode, string pattern, string serial, string fromDate, string toDate, string invNumber, System.Nullable<int> invStatus, System.Nullable<int> page, System.Nullable<int> cussignStatus, System.Nullable<int> payment, string userName, string userPass, object userState) {
            if ((this.SearchInvOperationCompleted == null)) {
                this.SearchInvOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchInvOperationCompleted);
            }
            this.InvokeAsync("SearchInv", new object[] {
                        cusCode,
                        pattern,
                        serial,
                        fromDate,
                        toDate,
                        invNumber,
                        invStatus,
                        page,
                        cussignStatus,
                        payment,
                        userName,
                        userPass}, this.SearchInvOperationCompleted, userState);
        }
        
        private void OnSearchInvOperationCompleted(object arg) {
            if ((this.SearchInvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchInvCompleted(this, new SearchInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCatalogView", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getCatalogView(string invToken, string userName, string userPass) {
            object[] results = this.Invoke("getCatalogView", new object[] {
                        invToken,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getCatalogViewAsync(string invToken, string userName, string userPass) {
            this.getCatalogViewAsync(invToken, userName, userPass, null);
        }
        
        /// <remarks/>
        public void getCatalogViewAsync(string invToken, string userName, string userPass, object userState) {
            if ((this.getCatalogViewOperationCompleted == null)) {
                this.getCatalogViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCatalogViewOperationCompleted);
            }
            this.InvokeAsync("getCatalogView", new object[] {
                        invToken,
                        userName,
                        userPass}, this.getCatalogViewOperationCompleted, userState);
        }
        
        private void OngetCatalogViewOperationCompleted(object arg) {
            if ((this.getCatalogViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCatalogViewCompleted(this, new getCatalogViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getInvView", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getInvView(string invToken, string userName, string userPass) {
            object[] results = this.Invoke("getInvView", new object[] {
                        invToken,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getInvViewAsync(string invToken, string userName, string userPass) {
            this.getInvViewAsync(invToken, userName, userPass, null);
        }
        
        /// <remarks/>
        public void getInvViewAsync(string invToken, string userName, string userPass, object userState) {
            if ((this.getInvViewOperationCompleted == null)) {
                this.getInvViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInvViewOperationCompleted);
            }
            this.InvokeAsync("getInvView", new object[] {
                        invToken,
                        userName,
                        userPass}, this.getInvViewOperationCompleted, userState);
        }
        
        private void OngetInvViewOperationCompleted(object arg) {
            if ((this.getInvViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInvViewCompleted(this, new getInvViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getInvViewNoPay", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getInvViewNoPay(string invToken, string userName, string userPass) {
            object[] results = this.Invoke("getInvViewNoPay", new object[] {
                        invToken,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getInvViewNoPayAsync(string invToken, string userName, string userPass) {
            this.getInvViewNoPayAsync(invToken, userName, userPass, null);
        }
        
        /// <remarks/>
        public void getInvViewNoPayAsync(string invToken, string userName, string userPass, object userState) {
            if ((this.getInvViewNoPayOperationCompleted == null)) {
                this.getInvViewNoPayOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInvViewNoPayOperationCompleted);
            }
            this.InvokeAsync("getInvViewNoPay", new object[] {
                        invToken,
                        userName,
                        userPass}, this.getInvViewNoPayOperationCompleted, userState);
        }
        
        private void OngetInvViewNoPayOperationCompleted(object arg) {
            if ((this.getInvViewNoPayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInvViewNoPayCompleted(this, new getInvViewNoPayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/convertForStore", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string convertForStore(string invToken, string userName, string userPass) {
            object[] results = this.Invoke("convertForStore", new object[] {
                        invToken,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void convertForStoreAsync(string invToken, string userName, string userPass) {
            this.convertForStoreAsync(invToken, userName, userPass, null);
        }
        
        /// <remarks/>
        public void convertForStoreAsync(string invToken, string userName, string userPass, object userState) {
            if ((this.convertForStoreOperationCompleted == null)) {
                this.convertForStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconvertForStoreOperationCompleted);
            }
            this.InvokeAsync("convertForStore", new object[] {
                        invToken,
                        userName,
                        userPass}, this.convertForStoreOperationCompleted, userState);
        }
        
        private void OnconvertForStoreOperationCompleted(object arg) {
            if ((this.convertForStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.convertForStoreCompleted(this, new convertForStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/convertForVerify", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string convertForVerify(string invToken, string userName, string userPass) {
            object[] results = this.Invoke("convertForVerify", new object[] {
                        invToken,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void convertForVerifyAsync(string invToken, string userName, string userPass) {
            this.convertForVerifyAsync(invToken, userName, userPass, null);
        }
        
        /// <remarks/>
        public void convertForVerifyAsync(string invToken, string userName, string userPass, object userState) {
            if ((this.convertForVerifyOperationCompleted == null)) {
                this.convertForVerifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconvertForVerifyOperationCompleted);
            }
            this.InvokeAsync("convertForVerify", new object[] {
                        invToken,
                        userName,
                        userPass}, this.convertForVerifyOperationCompleted, userState);
        }
        
        private void OnconvertForVerifyOperationCompleted(object arg) {
            if ((this.convertForVerifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.convertForVerifyCompleted(this, new convertForVerifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/downloadInv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string downloadInv(string invToken, string userName, string userPass) {
            object[] results = this.Invoke("downloadInv", new object[] {
                        invToken,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void downloadInvAsync(string invToken, string userName, string userPass) {
            this.downloadInvAsync(invToken, userName, userPass, null);
        }
        
        /// <remarks/>
        public void downloadInvAsync(string invToken, string userName, string userPass, object userState) {
            if ((this.downloadInvOperationCompleted == null)) {
                this.downloadInvOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownloadInvOperationCompleted);
            }
            this.InvokeAsync("downloadInv", new object[] {
                        invToken,
                        userName,
                        userPass}, this.downloadInvOperationCompleted, userState);
        }
        
        private void OndownloadInvOperationCompleted(object arg) {
            if ((this.downloadInvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downloadInvCompleted(this, new downloadInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/downloadInvError", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string downloadInvError(string invToken, string userName, string userPass) {
            object[] results = this.Invoke("downloadInvError", new object[] {
                        invToken,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void downloadInvErrorAsync(string invToken, string userName, string userPass) {
            this.downloadInvErrorAsync(invToken, userName, userPass, null);
        }
        
        /// <remarks/>
        public void downloadInvErrorAsync(string invToken, string userName, string userPass, object userState) {
            if ((this.downloadInvErrorOperationCompleted == null)) {
                this.downloadInvErrorOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownloadInvErrorOperationCompleted);
            }
            this.InvokeAsync("downloadInvError", new object[] {
                        invToken,
                        userName,
                        userPass}, this.downloadInvErrorOperationCompleted, userState);
        }
        
        private void OndownloadInvErrorOperationCompleted(object arg) {
            if ((this.downloadInvErrorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downloadInvErrorCompleted(this, new downloadInvErrorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/downloadInvNoPay", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string downloadInvNoPay(string invToken, string userName, string userPass) {
            object[] results = this.Invoke("downloadInvNoPay", new object[] {
                        invToken,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void downloadInvNoPayAsync(string invToken, string userName, string userPass) {
            this.downloadInvNoPayAsync(invToken, userName, userPass, null);
        }
        
        /// <remarks/>
        public void downloadInvNoPayAsync(string invToken, string userName, string userPass, object userState) {
            if ((this.downloadInvNoPayOperationCompleted == null)) {
                this.downloadInvNoPayOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownloadInvNoPayOperationCompleted);
            }
            this.InvokeAsync("downloadInvNoPay", new object[] {
                        invToken,
                        userName,
                        userPass}, this.downloadInvNoPayOperationCompleted, userState);
        }
        
        private void OndownloadInvNoPayOperationCompleted(object arg) {
            if ((this.downloadInvNoPayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downloadInvNoPayCompleted(this, new downloadInvNoPayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/downloadInvNoPayError", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string downloadInvNoPayError(string invToken, string userName, string userPass) {
            object[] results = this.Invoke("downloadInvNoPayError", new object[] {
                        invToken,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void downloadInvNoPayErrorAsync(string invToken, string userName, string userPass) {
            this.downloadInvNoPayErrorAsync(invToken, userName, userPass, null);
        }
        
        /// <remarks/>
        public void downloadInvNoPayErrorAsync(string invToken, string userName, string userPass, object userState) {
            if ((this.downloadInvNoPayErrorOperationCompleted == null)) {
                this.downloadInvNoPayErrorOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownloadInvNoPayErrorOperationCompleted);
            }
            this.InvokeAsync("downloadInvNoPayError", new object[] {
                        invToken,
                        userName,
                        userPass}, this.downloadInvNoPayErrorOperationCompleted, userState);
        }
        
        private void OndownloadInvNoPayErrorOperationCompleted(object arg) {
            if ((this.downloadInvNoPayErrorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downloadInvNoPayErrorCompleted(this, new downloadInvNoPayErrorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/downloadInvPDF", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string downloadInvPDF(string token, string userName, string userPass) {
            object[] results = this.Invoke("downloadInvPDF", new object[] {
                        token,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void downloadInvPDFAsync(string token, string userName, string userPass) {
            this.downloadInvPDFAsync(token, userName, userPass, null);
        }
        
        /// <remarks/>
        public void downloadInvPDFAsync(string token, string userName, string userPass, object userState) {
            if ((this.downloadInvPDFOperationCompleted == null)) {
                this.downloadInvPDFOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownloadInvPDFOperationCompleted);
            }
            this.InvokeAsync("downloadInvPDF", new object[] {
                        token,
                        userName,
                        userPass}, this.downloadInvPDFOperationCompleted, userState);
        }
        
        private void OndownloadInvPDFOperationCompleted(object arg) {
            if ((this.downloadInvPDFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downloadInvPDFCompleted(this, new downloadInvPDFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/downloadInvPDFNoPay", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string downloadInvPDFNoPay(string token, string userName, string userPass) {
            object[] results = this.Invoke("downloadInvPDFNoPay", new object[] {
                        token,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void downloadInvPDFNoPayAsync(string token, string userName, string userPass) {
            this.downloadInvPDFNoPayAsync(token, userName, userPass, null);
        }
        
        /// <remarks/>
        public void downloadInvPDFNoPayAsync(string token, string userName, string userPass, object userState) {
            if ((this.downloadInvPDFNoPayOperationCompleted == null)) {
                this.downloadInvPDFNoPayOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownloadInvPDFNoPayOperationCompleted);
            }
            this.InvokeAsync("downloadInvPDFNoPay", new object[] {
                        token,
                        userName,
                        userPass}, this.downloadInvPDFNoPayOperationCompleted, userState);
        }
        
        private void OndownloadInvPDFNoPayOperationCompleted(object arg) {
            if ((this.downloadInvPDFNoPayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downloadInvPDFNoPayCompleted(this, new downloadInvPDFNoPayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/downloadInvZipToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string downloadInvZipToken(string invToken, string userName, string userPass, bool checkPayment) {
            object[] results = this.Invoke("downloadInvZipToken", new object[] {
                        invToken,
                        userName,
                        userPass,
                        checkPayment});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void downloadInvZipTokenAsync(string invToken, string userName, string userPass, bool checkPayment) {
            this.downloadInvZipTokenAsync(invToken, userName, userPass, checkPayment, null);
        }
        
        /// <remarks/>
        public void downloadInvZipTokenAsync(string invToken, string userName, string userPass, bool checkPayment, object userState) {
            if ((this.downloadInvZipTokenOperationCompleted == null)) {
                this.downloadInvZipTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownloadInvZipTokenOperationCompleted);
            }
            this.InvokeAsync("downloadInvZipToken", new object[] {
                        invToken,
                        userName,
                        userPass,
                        checkPayment}, this.downloadInvZipTokenOperationCompleted, userState);
        }
        
        private void OndownloadInvZipTokenOperationCompleted(object arg) {
            if ((this.downloadInvZipTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downloadInvZipTokenCompleted(this, new downloadInvZipTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/listInvByCusFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string listInvByCusFkey(string key, string fromDate, string toDate, string userName, string userPass) {
            object[] results = this.Invoke("listInvByCusFkey", new object[] {
                        key,
                        fromDate,
                        toDate,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void listInvByCusFkeyAsync(string key, string fromDate, string toDate, string userName, string userPass) {
            this.listInvByCusFkeyAsync(key, fromDate, toDate, userName, userPass, null);
        }
        
        /// <remarks/>
        public void listInvByCusFkeyAsync(string key, string fromDate, string toDate, string userName, string userPass, object userState) {
            if ((this.listInvByCusFkeyOperationCompleted == null)) {
                this.listInvByCusFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlistInvByCusFkeyOperationCompleted);
            }
            this.InvokeAsync("listInvByCusFkey", new object[] {
                        key,
                        fromDate,
                        toDate,
                        userName,
                        userPass}, this.listInvByCusFkeyOperationCompleted, userState);
        }
        
        private void OnlistInvByCusFkeyOperationCompleted(object arg) {
            if ((this.listInvByCusFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.listInvByCusFkeyCompleted(this, new listInvByCusFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/listInvByCusFkeyVNP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string listInvByCusFkeyVNP(string key, string fromDate, string toDate, string userName, string userPass) {
            object[] results = this.Invoke("listInvByCusFkeyVNP", new object[] {
                        key,
                        fromDate,
                        toDate,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void listInvByCusFkeyVNPAsync(string key, string fromDate, string toDate, string userName, string userPass) {
            this.listInvByCusFkeyVNPAsync(key, fromDate, toDate, userName, userPass, null);
        }
        
        /// <remarks/>
        public void listInvByCusFkeyVNPAsync(string key, string fromDate, string toDate, string userName, string userPass, object userState) {
            if ((this.listInvByCusFkeyVNPOperationCompleted == null)) {
                this.listInvByCusFkeyVNPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlistInvByCusFkeyVNPOperationCompleted);
            }
            this.InvokeAsync("listInvByCusFkeyVNP", new object[] {
                        key,
                        fromDate,
                        toDate,
                        userName,
                        userPass}, this.listInvByCusFkeyVNPOperationCompleted, userState);
        }
        
        private void OnlistInvByCusFkeyVNPOperationCompleted(object arg) {
            if ((this.listInvByCusFkeyVNPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.listInvByCusFkeyVNPCompleted(this, new listInvByCusFkeyVNPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getcatalogViewFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getcatalogViewFkey(string fkey, string userName, string userPass) {
            object[] results = this.Invoke("getcatalogViewFkey", new object[] {
                        fkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getcatalogViewFkeyAsync(string fkey, string userName, string userPass) {
            this.getcatalogViewFkeyAsync(fkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void getcatalogViewFkeyAsync(string fkey, string userName, string userPass, object userState) {
            if ((this.getcatalogViewFkeyOperationCompleted == null)) {
                this.getcatalogViewFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetcatalogViewFkeyOperationCompleted);
            }
            this.InvokeAsync("getcatalogViewFkey", new object[] {
                        fkey,
                        userName,
                        userPass}, this.getcatalogViewFkeyOperationCompleted, userState);
        }
        
        private void OngetcatalogViewFkeyOperationCompleted(object arg) {
            if ((this.getcatalogViewFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getcatalogViewFkeyCompleted(this, new getcatalogViewFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/downloadInvPDFFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string downloadInvPDFFkey(string fkey, string userName, string userPass) {
            object[] results = this.Invoke("downloadInvPDFFkey", new object[] {
                        fkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void downloadInvPDFFkeyAsync(string fkey, string userName, string userPass) {
            this.downloadInvPDFFkeyAsync(fkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void downloadInvPDFFkeyAsync(string fkey, string userName, string userPass, object userState) {
            if ((this.downloadInvPDFFkeyOperationCompleted == null)) {
                this.downloadInvPDFFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownloadInvPDFFkeyOperationCompleted);
            }
            this.InvokeAsync("downloadInvPDFFkey", new object[] {
                        fkey,
                        userName,
                        userPass}, this.downloadInvPDFFkeyOperationCompleted, userState);
        }
        
        private void OndownloadInvPDFFkeyOperationCompleted(object arg) {
            if ((this.downloadInvPDFFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downloadInvPDFFkeyCompleted(this, new downloadInvPDFFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/downloadInvPDFFkeyNoPay", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string downloadInvPDFFkeyNoPay(string fkey, string userName, string userPass) {
            object[] results = this.Invoke("downloadInvPDFFkeyNoPay", new object[] {
                        fkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void downloadInvPDFFkeyNoPayAsync(string fkey, string userName, string userPass) {
            this.downloadInvPDFFkeyNoPayAsync(fkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void downloadInvPDFFkeyNoPayAsync(string fkey, string userName, string userPass, object userState) {
            if ((this.downloadInvPDFFkeyNoPayOperationCompleted == null)) {
                this.downloadInvPDFFkeyNoPayOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownloadInvPDFFkeyNoPayOperationCompleted);
            }
            this.InvokeAsync("downloadInvPDFFkeyNoPay", new object[] {
                        fkey,
                        userName,
                        userPass}, this.downloadInvPDFFkeyNoPayOperationCompleted, userState);
        }
        
        private void OndownloadInvPDFFkeyNoPayOperationCompleted(object arg) {
            if ((this.downloadInvPDFFkeyNoPayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downloadInvPDFFkeyNoPayCompleted(this, new downloadInvPDFFkeyNoPayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/downloadNewInvPDFFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string downloadNewInvPDFFkey(string fkey, string userName, string userPass) {
            object[] results = this.Invoke("downloadNewInvPDFFkey", new object[] {
                        fkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void downloadNewInvPDFFkeyAsync(string fkey, string userName, string userPass) {
            this.downloadNewInvPDFFkeyAsync(fkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void downloadNewInvPDFFkeyAsync(string fkey, string userName, string userPass, object userState) {
            if ((this.downloadNewInvPDFFkeyOperationCompleted == null)) {
                this.downloadNewInvPDFFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownloadNewInvPDFFkeyOperationCompleted);
            }
            this.InvokeAsync("downloadNewInvPDFFkey", new object[] {
                        fkey,
                        userName,
                        userPass}, this.downloadNewInvPDFFkeyOperationCompleted, userState);
        }
        
        private void OndownloadNewInvPDFFkeyOperationCompleted(object arg) {
            if ((this.downloadNewInvPDFFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downloadNewInvPDFFkeyCompleted(this, new downloadNewInvPDFFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getInvViewFkeyByStaff", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getInvViewFkeyByStaff(string fkey, string userName, string userPass) {
            object[] results = this.Invoke("getInvViewFkeyByStaff", new object[] {
                        fkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getInvViewFkeyByStaffAsync(string fkey, string userName, string userPass) {
            this.getInvViewFkeyByStaffAsync(fkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void getInvViewFkeyByStaffAsync(string fkey, string userName, string userPass, object userState) {
            if ((this.getInvViewFkeyByStaffOperationCompleted == null)) {
                this.getInvViewFkeyByStaffOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInvViewFkeyByStaffOperationCompleted);
            }
            this.InvokeAsync("getInvViewFkeyByStaff", new object[] {
                        fkey,
                        userName,
                        userPass}, this.getInvViewFkeyByStaffOperationCompleted, userState);
        }
        
        private void OngetInvViewFkeyByStaffOperationCompleted(object arg) {
            if ((this.getInvViewFkeyByStaffCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInvViewFkeyByStaffCompleted(this, new getInvViewFkeyByStaffCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getInvViewFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getInvViewFkey(string fkey, string userName, string userPass) {
            object[] results = this.Invoke("getInvViewFkey", new object[] {
                        fkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getInvViewFkeyAsync(string fkey, string userName, string userPass) {
            this.getInvViewFkeyAsync(fkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void getInvViewFkeyAsync(string fkey, string userName, string userPass, object userState) {
            if ((this.getInvViewFkeyOperationCompleted == null)) {
                this.getInvViewFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInvViewFkeyOperationCompleted);
            }
            this.InvokeAsync("getInvViewFkey", new object[] {
                        fkey,
                        userName,
                        userPass}, this.getInvViewFkeyOperationCompleted, userState);
        }
        
        private void OngetInvViewFkeyOperationCompleted(object arg) {
            if ((this.getInvViewFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInvViewFkeyCompleted(this, new getInvViewFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getInvViewFkeyNoPay", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getInvViewFkeyNoPay(string fkey, string userName, string userPass) {
            object[] results = this.Invoke("getInvViewFkeyNoPay", new object[] {
                        fkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getInvViewFkeyNoPayAsync(string fkey, string userName, string userPass) {
            this.getInvViewFkeyNoPayAsync(fkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void getInvViewFkeyNoPayAsync(string fkey, string userName, string userPass, object userState) {
            if ((this.getInvViewFkeyNoPayOperationCompleted == null)) {
                this.getInvViewFkeyNoPayOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInvViewFkeyNoPayOperationCompleted);
            }
            this.InvokeAsync("getInvViewFkeyNoPay", new object[] {
                        fkey,
                        userName,
                        userPass}, this.getInvViewFkeyNoPayOperationCompleted, userState);
        }
        
        private void OngetInvViewFkeyNoPayOperationCompleted(object arg) {
            if ((this.getInvViewFkeyNoPayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInvViewFkeyNoPayCompleted(this, new getInvViewFkeyNoPayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getNewInvViewFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getNewInvViewFkey(string fkey, string userName, string userPass) {
            object[] results = this.Invoke("getNewInvViewFkey", new object[] {
                        fkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getNewInvViewFkeyAsync(string fkey, string userName, string userPass) {
            this.getNewInvViewFkeyAsync(fkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void getNewInvViewFkeyAsync(string fkey, string userName, string userPass, object userState) {
            if ((this.getNewInvViewFkeyOperationCompleted == null)) {
                this.getNewInvViewFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNewInvViewFkeyOperationCompleted);
            }
            this.InvokeAsync("getNewInvViewFkey", new object[] {
                        fkey,
                        userName,
                        userPass}, this.getNewInvViewFkeyOperationCompleted, userState);
        }
        
        private void OngetNewInvViewFkeyOperationCompleted(object arg) {
            if ((this.getNewInvViewFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNewInvViewFkeyCompleted(this, new getNewInvViewFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/convertForStoreFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string convertForStoreFkey(string fkey, string userName, string userPass) {
            object[] results = this.Invoke("convertForStoreFkey", new object[] {
                        fkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void convertForStoreFkeyAsync(string fkey, string userName, string userPass) {
            this.convertForStoreFkeyAsync(fkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void convertForStoreFkeyAsync(string fkey, string userName, string userPass, object userState) {
            if ((this.convertForStoreFkeyOperationCompleted == null)) {
                this.convertForStoreFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconvertForStoreFkeyOperationCompleted);
            }
            this.InvokeAsync("convertForStoreFkey", new object[] {
                        fkey,
                        userName,
                        userPass}, this.convertForStoreFkeyOperationCompleted, userState);
        }
        
        private void OnconvertForStoreFkeyOperationCompleted(object arg) {
            if ((this.convertForStoreFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.convertForStoreFkeyCompleted(this, new convertForStoreFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/convertForVerifyFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string convertForVerifyFkey(string fkey, string userName, string userPass) {
            object[] results = this.Invoke("convertForVerifyFkey", new object[] {
                        fkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void convertForVerifyFkeyAsync(string fkey, string userName, string userPass) {
            this.convertForVerifyFkeyAsync(fkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void convertForVerifyFkeyAsync(string fkey, string userName, string userPass, object userState) {
            if ((this.convertForVerifyFkeyOperationCompleted == null)) {
                this.convertForVerifyFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconvertForVerifyFkeyOperationCompleted);
            }
            this.InvokeAsync("convertForVerifyFkey", new object[] {
                        fkey,
                        userName,
                        userPass}, this.convertForVerifyFkeyOperationCompleted, userState);
        }
        
        private void OnconvertForVerifyFkeyOperationCompleted(object arg) {
            if ((this.convertForVerifyFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.convertForVerifyFkeyCompleted(this, new convertForVerifyFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/downloadInvFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string downloadInvFkey(string fkey, string userName, string userPass) {
            object[] results = this.Invoke("downloadInvFkey", new object[] {
                        fkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void downloadInvFkeyAsync(string fkey, string userName, string userPass) {
            this.downloadInvFkeyAsync(fkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void downloadInvFkeyAsync(string fkey, string userName, string userPass, object userState) {
            if ((this.downloadInvFkeyOperationCompleted == null)) {
                this.downloadInvFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownloadInvFkeyOperationCompleted);
            }
            this.InvokeAsync("downloadInvFkey", new object[] {
                        fkey,
                        userName,
                        userPass}, this.downloadInvFkeyOperationCompleted, userState);
        }
        
        private void OndownloadInvFkeyOperationCompleted(object arg) {
            if ((this.downloadInvFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downloadInvFkeyCompleted(this, new downloadInvFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/downloadInvFkeyNoPay", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string downloadInvFkeyNoPay(string fkey, string userName, string userPass) {
            object[] results = this.Invoke("downloadInvFkeyNoPay", new object[] {
                        fkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void downloadInvFkeyNoPayAsync(string fkey, string userName, string userPass) {
            this.downloadInvFkeyNoPayAsync(fkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void downloadInvFkeyNoPayAsync(string fkey, string userName, string userPass, object userState) {
            if ((this.downloadInvFkeyNoPayOperationCompleted == null)) {
                this.downloadInvFkeyNoPayOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownloadInvFkeyNoPayOperationCompleted);
            }
            this.InvokeAsync("downloadInvFkeyNoPay", new object[] {
                        fkey,
                        userName,
                        userPass}, this.downloadInvFkeyNoPayOperationCompleted, userState);
        }
        
        private void OndownloadInvFkeyNoPayOperationCompleted(object arg) {
            if ((this.downloadInvFkeyNoPayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downloadInvFkeyNoPayCompleted(this, new downloadInvFkeyNoPayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/downloadInvErrorFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string downloadInvErrorFkey(string fkey, string userName, string userPass) {
            object[] results = this.Invoke("downloadInvErrorFkey", new object[] {
                        fkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void downloadInvErrorFkeyAsync(string fkey, string userName, string userPass) {
            this.downloadInvErrorFkeyAsync(fkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void downloadInvErrorFkeyAsync(string fkey, string userName, string userPass, object userState) {
            if ((this.downloadInvErrorFkeyOperationCompleted == null)) {
                this.downloadInvErrorFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownloadInvErrorFkeyOperationCompleted);
            }
            this.InvokeAsync("downloadInvErrorFkey", new object[] {
                        fkey,
                        userName,
                        userPass}, this.downloadInvErrorFkeyOperationCompleted, userState);
        }
        
        private void OndownloadInvErrorFkeyOperationCompleted(object arg) {
            if ((this.downloadInvErrorFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downloadInvErrorFkeyCompleted(this, new downloadInvErrorFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/downloadInvErrorPDF", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string downloadInvErrorPDF(string token, string userName, string userPass) {
            object[] results = this.Invoke("downloadInvErrorPDF", new object[] {
                        token,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void downloadInvErrorPDFAsync(string token, string userName, string userPass) {
            this.downloadInvErrorPDFAsync(token, userName, userPass, null);
        }
        
        /// <remarks/>
        public void downloadInvErrorPDFAsync(string token, string userName, string userPass, object userState) {
            if ((this.downloadInvErrorPDFOperationCompleted == null)) {
                this.downloadInvErrorPDFOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownloadInvErrorPDFOperationCompleted);
            }
            this.InvokeAsync("downloadInvErrorPDF", new object[] {
                        token,
                        userName,
                        userPass}, this.downloadInvErrorPDFOperationCompleted, userState);
        }
        
        private void OndownloadInvErrorPDFOperationCompleted(object arg) {
            if ((this.downloadInvErrorPDFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downloadInvErrorPDFCompleted(this, new downloadInvErrorPDFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/downloadInvPDFNoPayError", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string downloadInvPDFNoPayError(string token, string userName, string userPass) {
            object[] results = this.Invoke("downloadInvPDFNoPayError", new object[] {
                        token,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void downloadInvPDFNoPayErrorAsync(string token, string userName, string userPass) {
            this.downloadInvPDFNoPayErrorAsync(token, userName, userPass, null);
        }
        
        /// <remarks/>
        public void downloadInvPDFNoPayErrorAsync(string token, string userName, string userPass, object userState) {
            if ((this.downloadInvPDFNoPayErrorOperationCompleted == null)) {
                this.downloadInvPDFNoPayErrorOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownloadInvPDFNoPayErrorOperationCompleted);
            }
            this.InvokeAsync("downloadInvPDFNoPayError", new object[] {
                        token,
                        userName,
                        userPass}, this.downloadInvPDFNoPayErrorOperationCompleted, userState);
        }
        
        private void OndownloadInvPDFNoPayErrorOperationCompleted(object arg) {
            if ((this.downloadInvPDFNoPayErrorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downloadInvPDFNoPayErrorCompleted(this, new downloadInvPDFNoPayErrorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/downloadInvPDFFkeyError", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string downloadInvPDFFkeyError(string fkey, string userName, string userPass) {
            object[] results = this.Invoke("downloadInvPDFFkeyError", new object[] {
                        fkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void downloadInvPDFFkeyErrorAsync(string fkey, string userName, string userPass) {
            this.downloadInvPDFFkeyErrorAsync(fkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void downloadInvPDFFkeyErrorAsync(string fkey, string userName, string userPass, object userState) {
            if ((this.downloadInvPDFFkeyErrorOperationCompleted == null)) {
                this.downloadInvPDFFkeyErrorOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownloadInvPDFFkeyErrorOperationCompleted);
            }
            this.InvokeAsync("downloadInvPDFFkeyError", new object[] {
                        fkey,
                        userName,
                        userPass}, this.downloadInvPDFFkeyErrorOperationCompleted, userState);
        }
        
        private void OndownloadInvPDFFkeyErrorOperationCompleted(object arg) {
            if ((this.downloadInvPDFFkeyErrorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downloadInvPDFFkeyErrorCompleted(this, new downloadInvPDFFkeyErrorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/downloadInvPDFFkeyNoPayError", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string downloadInvPDFFkeyNoPayError(string fkey, string userName, string userPass) {
            object[] results = this.Invoke("downloadInvPDFFkeyNoPayError", new object[] {
                        fkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void downloadInvPDFFkeyNoPayErrorAsync(string fkey, string userName, string userPass) {
            this.downloadInvPDFFkeyNoPayErrorAsync(fkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void downloadInvPDFFkeyNoPayErrorAsync(string fkey, string userName, string userPass, object userState) {
            if ((this.downloadInvPDFFkeyNoPayErrorOperationCompleted == null)) {
                this.downloadInvPDFFkeyNoPayErrorOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownloadInvPDFFkeyNoPayErrorOperationCompleted);
            }
            this.InvokeAsync("downloadInvPDFFkeyNoPayError", new object[] {
                        fkey,
                        userName,
                        userPass}, this.downloadInvPDFFkeyNoPayErrorOperationCompleted, userState);
        }
        
        private void OndownloadInvPDFFkeyNoPayErrorOperationCompleted(object arg) {
            if ((this.downloadInvPDFFkeyNoPayErrorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downloadInvPDFFkeyNoPayErrorCompleted(this, new downloadInvPDFFkeyNoPayErrorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInvErrorViewFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetInvErrorViewFkey(string fkey, string userName, string userPass) {
            object[] results = this.Invoke("GetInvErrorViewFkey", new object[] {
                        fkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetInvErrorViewFkeyAsync(string fkey, string userName, string userPass) {
            this.GetInvErrorViewFkeyAsync(fkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void GetInvErrorViewFkeyAsync(string fkey, string userName, string userPass, object userState) {
            if ((this.GetInvErrorViewFkeyOperationCompleted == null)) {
                this.GetInvErrorViewFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvErrorViewFkeyOperationCompleted);
            }
            this.InvokeAsync("GetInvErrorViewFkey", new object[] {
                        fkey,
                        userName,
                        userPass}, this.GetInvErrorViewFkeyOperationCompleted, userState);
        }
        
        private void OnGetInvErrorViewFkeyOperationCompleted(object arg) {
            if ((this.GetInvErrorViewFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvErrorViewFkeyCompleted(this, new GetInvErrorViewFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/downloadInvZipFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string downloadInvZipFkey(string fkey, string userName, string userPass, bool checkPayment) {
            object[] results = this.Invoke("downloadInvZipFkey", new object[] {
                        fkey,
                        userName,
                        userPass,
                        checkPayment});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void downloadInvZipFkeyAsync(string fkey, string userName, string userPass, bool checkPayment) {
            this.downloadInvZipFkeyAsync(fkey, userName, userPass, checkPayment, null);
        }
        
        /// <remarks/>
        public void downloadInvZipFkeyAsync(string fkey, string userName, string userPass, bool checkPayment, object userState) {
            if ((this.downloadInvZipFkeyOperationCompleted == null)) {
                this.downloadInvZipFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownloadInvZipFkeyOperationCompleted);
            }
            this.InvokeAsync("downloadInvZipFkey", new object[] {
                        fkey,
                        userName,
                        userPass,
                        checkPayment}, this.downloadInvZipFkeyOperationCompleted, userState);
        }
        
        private void OndownloadInvZipFkeyOperationCompleted(object arg) {
            if ((this.downloadInvZipFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downloadInvZipFkeyCompleted(this, new downloadInvZipFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getDigest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getDigest(string cusCode, string invToken, string userName, string userPass) {
            object[] results = this.Invoke("getDigest", new object[] {
                        cusCode,
                        invToken,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDigestAsync(string cusCode, string invToken, string userName, string userPass) {
            this.getDigestAsync(cusCode, invToken, userName, userPass, null);
        }
        
        /// <remarks/>
        public void getDigestAsync(string cusCode, string invToken, string userName, string userPass, object userState) {
            if ((this.getDigestOperationCompleted == null)) {
                this.getDigestOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDigestOperationCompleted);
            }
            this.InvokeAsync("getDigest", new object[] {
                        cusCode,
                        invToken,
                        userName,
                        userPass}, this.getDigestOperationCompleted, userState);
        }
        
        private void OngetDigestOperationCompleted(object arg) {
            if ((this.getDigestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDigestCompleted(this, new getDigestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConfirmSiganture", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ConfirmSiganture(string signValue, string invToken, string userName, string userPass) {
            object[] results = this.Invoke("ConfirmSiganture", new object[] {
                        signValue,
                        invToken,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ConfirmSigantureAsync(string signValue, string invToken, string userName, string userPass) {
            this.ConfirmSigantureAsync(signValue, invToken, userName, userPass, null);
        }
        
        /// <remarks/>
        public void ConfirmSigantureAsync(string signValue, string invToken, string userName, string userPass, object userState) {
            if ((this.ConfirmSigantureOperationCompleted == null)) {
                this.ConfirmSigantureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConfirmSigantureOperationCompleted);
            }
            this.InvokeAsync("ConfirmSiganture", new object[] {
                        signValue,
                        invToken,
                        userName,
                        userPass}, this.ConfirmSigantureOperationCompleted, userState);
        }
        
        private void OnConfirmSigantureOperationCompleted(object arg) {
            if ((this.ConfirmSigantureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConfirmSigantureCompleted(this, new ConfirmSigantureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getCus(string cusCode, string userName, string userPass) {
            object[] results = this.Invoke("getCus", new object[] {
                        cusCode,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getCusAsync(string cusCode, string userName, string userPass) {
            this.getCusAsync(cusCode, userName, userPass, null);
        }
        
        /// <remarks/>
        public void getCusAsync(string cusCode, string userName, string userPass, object userState) {
            if ((this.getCusOperationCompleted == null)) {
                this.getCusOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCusOperationCompleted);
            }
            this.InvokeAsync("getCus", new object[] {
                        cusCode,
                        userName,
                        userPass}, this.getCusOperationCompleted, userState);
        }
        
        private void OngetCusOperationCompleted(object arg) {
            if ((this.getCusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCusCompleted(this, new getCusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getStaff", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getStaff(string accountName, string userName, string userPass) {
            object[] results = this.Invoke("getStaff", new object[] {
                        accountName,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getStaffAsync(string accountName, string userName, string userPass) {
            this.getStaffAsync(accountName, userName, userPass, null);
        }
        
        /// <remarks/>
        public void getStaffAsync(string accountName, string userName, string userPass, object userState) {
            if ((this.getStaffOperationCompleted == null)) {
                this.getStaffOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetStaffOperationCompleted);
            }
            this.InvokeAsync("getStaff", new object[] {
                        accountName,
                        userName,
                        userPass}, this.getStaffOperationCompleted, userState);
        }
        
        private void OngetStaffOperationCompleted(object arg) {
            if ((this.getStaffCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getStaffCompleted(this, new getStaffCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/listInvFromNoToNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string listInvFromNoToNo(string invFromNo, string invToNo, string invPattern, string invSerial, string userName, string userPass) {
            object[] results = this.Invoke("listInvFromNoToNo", new object[] {
                        invFromNo,
                        invToNo,
                        invPattern,
                        invSerial,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void listInvFromNoToNoAsync(string invFromNo, string invToNo, string invPattern, string invSerial, string userName, string userPass) {
            this.listInvFromNoToNoAsync(invFromNo, invToNo, invPattern, invSerial, userName, userPass, null);
        }
        
        /// <remarks/>
        public void listInvFromNoToNoAsync(string invFromNo, string invToNo, string invPattern, string invSerial, string userName, string userPass, object userState) {
            if ((this.listInvFromNoToNoOperationCompleted == null)) {
                this.listInvFromNoToNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlistInvFromNoToNoOperationCompleted);
            }
            this.InvokeAsync("listInvFromNoToNo", new object[] {
                        invFromNo,
                        invToNo,
                        invPattern,
                        invSerial,
                        userName,
                        userPass}, this.listInvFromNoToNoOperationCompleted, userState);
        }
        
        private void OnlistInvFromNoToNoOperationCompleted(object arg) {
            if ((this.listInvFromNoToNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.listInvFromNoToNoCompleted(this, new listInvFromNoToNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getInvViewFkeyNoPayPattern", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getInvViewFkeyNoPayPattern(string fkey, string userName, string userPass, string pattern) {
            object[] results = this.Invoke("getInvViewFkeyNoPayPattern", new object[] {
                        fkey,
                        userName,
                        userPass,
                        pattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getInvViewFkeyNoPayPatternAsync(string fkey, string userName, string userPass, string pattern) {
            this.getInvViewFkeyNoPayPatternAsync(fkey, userName, userPass, pattern, null);
        }
        
        /// <remarks/>
        public void getInvViewFkeyNoPayPatternAsync(string fkey, string userName, string userPass, string pattern, object userState) {
            if ((this.getInvViewFkeyNoPayPatternOperationCompleted == null)) {
                this.getInvViewFkeyNoPayPatternOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInvViewFkeyNoPayPatternOperationCompleted);
            }
            this.InvokeAsync("getInvViewFkeyNoPayPattern", new object[] {
                        fkey,
                        userName,
                        userPass,
                        pattern}, this.getInvViewFkeyNoPayPatternOperationCompleted, userState);
        }
        
        private void OngetInvViewFkeyNoPayPatternOperationCompleted(object arg) {
            if ((this.getInvViewFkeyNoPayPatternCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInvViewFkeyNoPayPatternCompleted(this, new getInvViewFkeyNoPayPatternCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/convertForStoreFkeyPattern", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string convertForStoreFkeyPattern(string fkey, string userName, string userPass, string pattern) {
            object[] results = this.Invoke("convertForStoreFkeyPattern", new object[] {
                        fkey,
                        userName,
                        userPass,
                        pattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void convertForStoreFkeyPatternAsync(string fkey, string userName, string userPass, string pattern) {
            this.convertForStoreFkeyPatternAsync(fkey, userName, userPass, pattern, null);
        }
        
        /// <remarks/>
        public void convertForStoreFkeyPatternAsync(string fkey, string userName, string userPass, string pattern, object userState) {
            if ((this.convertForStoreFkeyPatternOperationCompleted == null)) {
                this.convertForStoreFkeyPatternOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconvertForStoreFkeyPatternOperationCompleted);
            }
            this.InvokeAsync("convertForStoreFkeyPattern", new object[] {
                        fkey,
                        userName,
                        userPass,
                        pattern}, this.convertForStoreFkeyPatternOperationCompleted, userState);
        }
        
        private void OnconvertForStoreFkeyPatternOperationCompleted(object arg) {
            if ((this.convertForStoreFkeyPatternCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.convertForStoreFkeyPatternCompleted(this, new convertForStoreFkeyPatternCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/convertForVerifyFkeyPattern", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string convertForVerifyFkeyPattern(string fkey, string userName, string userPass, string pattern) {
            object[] results = this.Invoke("convertForVerifyFkeyPattern", new object[] {
                        fkey,
                        userName,
                        userPass,
                        pattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void convertForVerifyFkeyPatternAsync(string fkey, string userName, string userPass, string pattern) {
            this.convertForVerifyFkeyPatternAsync(fkey, userName, userPass, pattern, null);
        }
        
        /// <remarks/>
        public void convertForVerifyFkeyPatternAsync(string fkey, string userName, string userPass, string pattern, object userState) {
            if ((this.convertForVerifyFkeyPatternOperationCompleted == null)) {
                this.convertForVerifyFkeyPatternOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconvertForVerifyFkeyPatternOperationCompleted);
            }
            this.InvokeAsync("convertForVerifyFkeyPattern", new object[] {
                        fkey,
                        userName,
                        userPass,
                        pattern}, this.convertForVerifyFkeyPatternOperationCompleted, userState);
        }
        
        private void OnconvertForVerifyFkeyPatternOperationCompleted(object arg) {
            if ((this.convertForVerifyFkeyPatternCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.convertForVerifyFkeyPatternCompleted(this, new convertForVerifyFkeyPatternCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/loginportal", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string loginportal(string Account, string ACpass, string userName, string pass, string comid) {
            object[] results = this.Invoke("loginportal", new object[] {
                        Account,
                        ACpass,
                        userName,
                        pass,
                        comid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void loginportalAsync(string Account, string ACpass, string userName, string pass, string comid) {
            this.loginportalAsync(Account, ACpass, userName, pass, comid, null);
        }
        
        /// <remarks/>
        public void loginportalAsync(string Account, string ACpass, string userName, string pass, string comid, object userState) {
            if ((this.loginportalOperationCompleted == null)) {
                this.loginportalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnloginportalOperationCompleted);
            }
            this.InvokeAsync("loginportal", new object[] {
                        Account,
                        ACpass,
                        userName,
                        pass,
                        comid}, this.loginportalOperationCompleted, userState);
        }
        
        private void OnloginportalOperationCompleted(object arg) {
            if ((this.loginportalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.loginportalCompleted(this, new loginportalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/forgetpass", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string forgetpass(string Account, string userName, string pass, string comid) {
            object[] results = this.Invoke("forgetpass", new object[] {
                        Account,
                        userName,
                        pass,
                        comid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void forgetpassAsync(string Account, string userName, string pass, string comid) {
            this.forgetpassAsync(Account, userName, pass, comid, null);
        }
        
        /// <remarks/>
        public void forgetpassAsync(string Account, string userName, string pass, string comid, object userState) {
            if ((this.forgetpassOperationCompleted == null)) {
                this.forgetpassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnforgetpassOperationCompleted);
            }
            this.InvokeAsync("forgetpass", new object[] {
                        Account,
                        userName,
                        pass,
                        comid}, this.forgetpassOperationCompleted, userState);
        }
        
        private void OnforgetpassOperationCompleted(object arg) {
            if ((this.forgetpassCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.forgetpassCompleted(this, new forgetpassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changepassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string changepassword(string Account, string oldpassword, string newpassword, string userName, string pass, string comid) {
            object[] results = this.Invoke("changepassword", new object[] {
                        Account,
                        oldpassword,
                        newpassword,
                        userName,
                        pass,
                        comid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void changepasswordAsync(string Account, string oldpassword, string newpassword, string userName, string pass, string comid) {
            this.changepasswordAsync(Account, oldpassword, newpassword, userName, pass, comid, null);
        }
        
        /// <remarks/>
        public void changepasswordAsync(string Account, string oldpassword, string newpassword, string userName, string pass, string comid, object userState) {
            if ((this.changepasswordOperationCompleted == null)) {
                this.changepasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangepasswordOperationCompleted);
            }
            this.InvokeAsync("changepassword", new object[] {
                        Account,
                        oldpassword,
                        newpassword,
                        userName,
                        pass,
                        comid}, this.changepasswordOperationCompleted, userState);
        }
        
        private void OnchangepasswordOperationCompleted(object arg) {
            if ((this.changepasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changepasswordCompleted(this, new changepasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/listCompany", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string listCompany(string userName, string pass, string comid, string comtaxcode) {
            object[] results = this.Invoke("listCompany", new object[] {
                        userName,
                        pass,
                        comid,
                        comtaxcode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void listCompanyAsync(string userName, string pass, string comid, string comtaxcode) {
            this.listCompanyAsync(userName, pass, comid, comtaxcode, null);
        }
        
        /// <remarks/>
        public void listCompanyAsync(string userName, string pass, string comid, string comtaxcode, object userState) {
            if ((this.listCompanyOperationCompleted == null)) {
                this.listCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlistCompanyOperationCompleted);
            }
            this.InvokeAsync("listCompany", new object[] {
                        userName,
                        pass,
                        comid,
                        comtaxcode}, this.listCompanyOperationCompleted, userState);
        }
        
        private void OnlistCompanyOperationCompleted(object arg) {
            if ((this.listCompanyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.listCompanyCompleted(this, new listCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/listPatternByCom", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string listPatternByCom(string userName, string pass, string comid) {
            object[] results = this.Invoke("listPatternByCom", new object[] {
                        userName,
                        pass,
                        comid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void listPatternByComAsync(string userName, string pass, string comid) {
            this.listPatternByComAsync(userName, pass, comid, null);
        }
        
        /// <remarks/>
        public void listPatternByComAsync(string userName, string pass, string comid, object userState) {
            if ((this.listPatternByComOperationCompleted == null)) {
                this.listPatternByComOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlistPatternByComOperationCompleted);
            }
            this.InvokeAsync("listPatternByCom", new object[] {
                        userName,
                        pass,
                        comid}, this.listPatternByComOperationCompleted, userState);
        }
        
        private void OnlistPatternByComOperationCompleted(object arg) {
            if ((this.listPatternByComCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.listPatternByComCompleted(this, new listPatternByComCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/convertForVerifyBase64HtmlByFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string convertForVerifyBase64HtmlByFkey(string fkey, string userName, string userPass) {
            object[] results = this.Invoke("convertForVerifyBase64HtmlByFkey", new object[] {
                        fkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void convertForVerifyBase64HtmlByFkeyAsync(string fkey, string userName, string userPass) {
            this.convertForVerifyBase64HtmlByFkeyAsync(fkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void convertForVerifyBase64HtmlByFkeyAsync(string fkey, string userName, string userPass, object userState) {
            if ((this.convertForVerifyBase64HtmlByFkeyOperationCompleted == null)) {
                this.convertForVerifyBase64HtmlByFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconvertForVerifyBase64HtmlByFkeyOperationCompleted);
            }
            this.InvokeAsync("convertForVerifyBase64HtmlByFkey", new object[] {
                        fkey,
                        userName,
                        userPass}, this.convertForVerifyBase64HtmlByFkeyOperationCompleted, userState);
        }
        
        private void OnconvertForVerifyBase64HtmlByFkeyOperationCompleted(object arg) {
            if ((this.convertForVerifyBase64HtmlByFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.convertForVerifyBase64HtmlByFkeyCompleted(this, new convertForVerifyBase64HtmlByFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/convertForStoreBase64HtmlByFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string convertForStoreBase64HtmlByFkey(string fkey, string userName, string userPass) {
            object[] results = this.Invoke("convertForStoreBase64HtmlByFkey", new object[] {
                        fkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void convertForStoreBase64HtmlByFkeyAsync(string fkey, string userName, string userPass) {
            this.convertForStoreBase64HtmlByFkeyAsync(fkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void convertForStoreBase64HtmlByFkeyAsync(string fkey, string userName, string userPass, object userState) {
            if ((this.convertForStoreBase64HtmlByFkeyOperationCompleted == null)) {
                this.convertForStoreBase64HtmlByFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconvertForStoreBase64HtmlByFkeyOperationCompleted);
            }
            this.InvokeAsync("convertForStoreBase64HtmlByFkey", new object[] {
                        fkey,
                        userName,
                        userPass}, this.convertForStoreBase64HtmlByFkeyOperationCompleted, userState);
        }
        
        private void OnconvertForStoreBase64HtmlByFkeyOperationCompleted(object arg) {
            if ((this.convertForStoreBase64HtmlByFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.convertForStoreBase64HtmlByFkeyCompleted(this, new convertForStoreBase64HtmlByFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInvViewByDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetInvViewByDate(string userName, string userPass, string pattern, string serial, string fromDate, string toDate) {
            object[] results = this.Invoke("GetInvViewByDate", new object[] {
                        userName,
                        userPass,
                        pattern,
                        serial,
                        fromDate,
                        toDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetInvViewByDateAsync(string userName, string userPass, string pattern, string serial, string fromDate, string toDate) {
            this.GetInvViewByDateAsync(userName, userPass, pattern, serial, fromDate, toDate, null);
        }
        
        /// <remarks/>
        public void GetInvViewByDateAsync(string userName, string userPass, string pattern, string serial, string fromDate, string toDate, object userState) {
            if ((this.GetInvViewByDateOperationCompleted == null)) {
                this.GetInvViewByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvViewByDateOperationCompleted);
            }
            this.InvokeAsync("GetInvViewByDate", new object[] {
                        userName,
                        userPass,
                        pattern,
                        serial,
                        fromDate,
                        toDate}, this.GetInvViewByDateOperationCompleted, userState);
        }
        
        private void OnGetInvViewByDateOperationCompleted(object arg) {
            if ((this.GetInvViewByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvViewByDateCompleted(this, new GetInvViewByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/downloadCTTToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string downloadCTTToken(string token, string username, string password, int type) {
            object[] results = this.Invoke("downloadCTTToken", new object[] {
                        token,
                        username,
                        password,
                        type});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void downloadCTTTokenAsync(string token, string username, string password, int type) {
            this.downloadCTTTokenAsync(token, username, password, type, null);
        }
        
        /// <remarks/>
        public void downloadCTTTokenAsync(string token, string username, string password, int type, object userState) {
            if ((this.downloadCTTTokenOperationCompleted == null)) {
                this.downloadCTTTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownloadCTTTokenOperationCompleted);
            }
            this.InvokeAsync("downloadCTTToken", new object[] {
                        token,
                        username,
                        password,
                        type}, this.downloadCTTTokenOperationCompleted, userState);
        }
        
        private void OndownloadCTTTokenOperationCompleted(object arg) {
            if ((this.downloadCTTTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downloadCTTTokenCompleted(this, new downloadCTTTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/downloadCTTFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string downloadCTTFkey(string fkey, string username, string password, int type) {
            object[] results = this.Invoke("downloadCTTFkey", new object[] {
                        fkey,
                        username,
                        password,
                        type});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void downloadCTTFkeyAsync(string fkey, string username, string password, int type) {
            this.downloadCTTFkeyAsync(fkey, username, password, type, null);
        }
        
        /// <remarks/>
        public void downloadCTTFkeyAsync(string fkey, string username, string password, int type, object userState) {
            if ((this.downloadCTTFkeyOperationCompleted == null)) {
                this.downloadCTTFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownloadCTTFkeyOperationCompleted);
            }
            this.InvokeAsync("downloadCTTFkey", new object[] {
                        fkey,
                        username,
                        password,
                        type}, this.downloadCTTFkeyOperationCompleted, userState);
        }
        
        private void OndownloadCTTFkeyOperationCompleted(object arg) {
            if ((this.downloadCTTFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downloadCTTFkeyCompleted(this, new downloadCTTFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void listInvByCusCompletedEventHandler(object sender, listInvByCusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class listInvByCusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal listInvByCusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void SearchInvCompletedEventHandler(object sender, SearchInvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchInvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchInvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getCatalogViewCompletedEventHandler(object sender, getCatalogViewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCatalogViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCatalogViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getInvViewCompletedEventHandler(object sender, getInvViewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInvViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInvViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getInvViewNoPayCompletedEventHandler(object sender, getInvViewNoPayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInvViewNoPayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInvViewNoPayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void convertForStoreCompletedEventHandler(object sender, convertForStoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class convertForStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal convertForStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void convertForVerifyCompletedEventHandler(object sender, convertForVerifyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class convertForVerifyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal convertForVerifyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void downloadInvCompletedEventHandler(object sender, downloadInvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downloadInvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downloadInvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void downloadInvErrorCompletedEventHandler(object sender, downloadInvErrorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downloadInvErrorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downloadInvErrorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void downloadInvNoPayCompletedEventHandler(object sender, downloadInvNoPayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downloadInvNoPayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downloadInvNoPayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void downloadInvNoPayErrorCompletedEventHandler(object sender, downloadInvNoPayErrorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downloadInvNoPayErrorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downloadInvNoPayErrorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void downloadInvPDFCompletedEventHandler(object sender, downloadInvPDFCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downloadInvPDFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downloadInvPDFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void downloadInvPDFNoPayCompletedEventHandler(object sender, downloadInvPDFNoPayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downloadInvPDFNoPayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downloadInvPDFNoPayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void downloadInvZipTokenCompletedEventHandler(object sender, downloadInvZipTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downloadInvZipTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downloadInvZipTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void listInvByCusFkeyCompletedEventHandler(object sender, listInvByCusFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class listInvByCusFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal listInvByCusFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void listInvByCusFkeyVNPCompletedEventHandler(object sender, listInvByCusFkeyVNPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class listInvByCusFkeyVNPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal listInvByCusFkeyVNPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getcatalogViewFkeyCompletedEventHandler(object sender, getcatalogViewFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getcatalogViewFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getcatalogViewFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void downloadInvPDFFkeyCompletedEventHandler(object sender, downloadInvPDFFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downloadInvPDFFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downloadInvPDFFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void downloadInvPDFFkeyNoPayCompletedEventHandler(object sender, downloadInvPDFFkeyNoPayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downloadInvPDFFkeyNoPayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downloadInvPDFFkeyNoPayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void downloadNewInvPDFFkeyCompletedEventHandler(object sender, downloadNewInvPDFFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downloadNewInvPDFFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downloadNewInvPDFFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getInvViewFkeyByStaffCompletedEventHandler(object sender, getInvViewFkeyByStaffCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInvViewFkeyByStaffCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInvViewFkeyByStaffCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getInvViewFkeyCompletedEventHandler(object sender, getInvViewFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInvViewFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInvViewFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getInvViewFkeyNoPayCompletedEventHandler(object sender, getInvViewFkeyNoPayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInvViewFkeyNoPayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInvViewFkeyNoPayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getNewInvViewFkeyCompletedEventHandler(object sender, getNewInvViewFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNewInvViewFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNewInvViewFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void convertForStoreFkeyCompletedEventHandler(object sender, convertForStoreFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class convertForStoreFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal convertForStoreFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void convertForVerifyFkeyCompletedEventHandler(object sender, convertForVerifyFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class convertForVerifyFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal convertForVerifyFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void downloadInvFkeyCompletedEventHandler(object sender, downloadInvFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downloadInvFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downloadInvFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void downloadInvFkeyNoPayCompletedEventHandler(object sender, downloadInvFkeyNoPayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downloadInvFkeyNoPayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downloadInvFkeyNoPayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void downloadInvErrorFkeyCompletedEventHandler(object sender, downloadInvErrorFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downloadInvErrorFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downloadInvErrorFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void downloadInvErrorPDFCompletedEventHandler(object sender, downloadInvErrorPDFCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downloadInvErrorPDFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downloadInvErrorPDFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void downloadInvPDFNoPayErrorCompletedEventHandler(object sender, downloadInvPDFNoPayErrorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downloadInvPDFNoPayErrorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downloadInvPDFNoPayErrorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void downloadInvPDFFkeyErrorCompletedEventHandler(object sender, downloadInvPDFFkeyErrorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downloadInvPDFFkeyErrorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downloadInvPDFFkeyErrorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void downloadInvPDFFkeyNoPayErrorCompletedEventHandler(object sender, downloadInvPDFFkeyNoPayErrorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downloadInvPDFFkeyNoPayErrorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downloadInvPDFFkeyNoPayErrorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetInvErrorViewFkeyCompletedEventHandler(object sender, GetInvErrorViewFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvErrorViewFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInvErrorViewFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void downloadInvZipFkeyCompletedEventHandler(object sender, downloadInvZipFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downloadInvZipFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downloadInvZipFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getDigestCompletedEventHandler(object sender, getDigestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDigestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDigestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ConfirmSigantureCompletedEventHandler(object sender, ConfirmSigantureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConfirmSigantureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConfirmSigantureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getCusCompletedEventHandler(object sender, getCusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getStaffCompletedEventHandler(object sender, getStaffCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getStaffCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getStaffCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void listInvFromNoToNoCompletedEventHandler(object sender, listInvFromNoToNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class listInvFromNoToNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal listInvFromNoToNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getInvViewFkeyNoPayPatternCompletedEventHandler(object sender, getInvViewFkeyNoPayPatternCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInvViewFkeyNoPayPatternCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInvViewFkeyNoPayPatternCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void convertForStoreFkeyPatternCompletedEventHandler(object sender, convertForStoreFkeyPatternCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class convertForStoreFkeyPatternCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal convertForStoreFkeyPatternCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void convertForVerifyFkeyPatternCompletedEventHandler(object sender, convertForVerifyFkeyPatternCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class convertForVerifyFkeyPatternCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal convertForVerifyFkeyPatternCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void loginportalCompletedEventHandler(object sender, loginportalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class loginportalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal loginportalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void forgetpassCompletedEventHandler(object sender, forgetpassCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class forgetpassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal forgetpassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void changepasswordCompletedEventHandler(object sender, changepasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changepasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changepasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void listCompanyCompletedEventHandler(object sender, listCompanyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class listCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal listCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void listPatternByComCompletedEventHandler(object sender, listPatternByComCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class listPatternByComCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal listPatternByComCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void convertForVerifyBase64HtmlByFkeyCompletedEventHandler(object sender, convertForVerifyBase64HtmlByFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class convertForVerifyBase64HtmlByFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal convertForVerifyBase64HtmlByFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void convertForStoreBase64HtmlByFkeyCompletedEventHandler(object sender, convertForStoreBase64HtmlByFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class convertForStoreBase64HtmlByFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal convertForStoreBase64HtmlByFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetInvViewByDateCompletedEventHandler(object sender, GetInvViewByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvViewByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInvViewByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void downloadCTTTokenCompletedEventHandler(object sender, downloadCTTTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downloadCTTTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downloadCTTTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void downloadCTTFkeyCompletedEventHandler(object sender, downloadCTTFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downloadCTTFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downloadCTTFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591