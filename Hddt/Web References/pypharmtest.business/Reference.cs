//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace DAIHOI.pypharmtest.business {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BusinessServiceSoap", Namespace="http://tempuri.org/")]
    public partial class BusinessService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback replaceInvOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplaceInvoiceActionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplaceActionAssignedNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplaceInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback adjustInvOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustInvoiceActionOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustWithoutInvOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplaceWithoutInvOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustInvoiceNoteOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustActionAssignedNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelInvOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelInvNoPayOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelInvSignFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelInvSignFileNoPayOperationCompleted;
        
        private System.Threading.SendOrPostCallback restoreCancelInvFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback restoreCancelInvTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback restoreReplacedInvFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback restoreReplacedInvTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback poolingInvOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInvbyFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback reportInvUsedOperationCompleted;
        
        private System.Threading.SendOrPostCallback reportMonthOperationCompleted;
        
        private System.Threading.SendOrPostCallback deliverInvFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback deliverInvOperationCompleted;
        
        private System.Threading.SendOrPostCallback confirmPaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback confirmPaymentDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback unConfirmPaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback confirmPaymentFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback confirmPaymentDetailFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback confirmPaymentFkeyVNPOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnConfirmPaymentFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnConfirmPaymentFkeyVNPOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetTemOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllRolesbyAccOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateNewUserbyAccOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSStaffAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateSStaffAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSerialByPatternOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPublishInvsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplaceInvoiceNoPublishOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustInvoiceNoPublishOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplaceInvoiceNoPublishExtendOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustInvoiceNoPublishExtendOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustInvoiceMultiOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportAttachmentByNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplaceAssignedNoNewPatternOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustAssignedNoNewPatternOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustInvoiceNewPatternOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplaceInvoiceNewPatternOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportAttachmentByFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback MessageReceivedOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrySendInvOperationCompleted;
        
        private System.Threading.SendOrPostCallback confirmPaymentFkeyPatternOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnConfirmPaymentFkeyPatternOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustReplaceInvSmartCAOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelInvDetailFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnconfirmPaymentDetailFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHashWithOutInvTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHashWithOutInvSmartCAOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustReplaceWithOutInvTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustReplaceWithOutInvSmartCAOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCompanyConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplaceCTTActionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getHashCTTTokenReplaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHashCTTSmartCAReplaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustReplaceCTTTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustReplaceCTTSmartCAOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelInvCTTOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendInvMTTFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHashInvMTTFkeyByTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendInvMTTFkeyByTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHashInvMTTFkeyBySmartCAOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendInvMTTFkeyBySmartCAOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendInvMTTNoRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHashInvMTTNoRangeByTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendInvMTTNoRangeByTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHashInvMTTNoRangeBySmartCAOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendInvMTTNoRangeBySmartCAOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendInvMTTInvTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHashInvMTTInvTokenByTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendInvMTTInvTokenByTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHashInvMTTInvTokenBySmartCAOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendInvMTTInvTokenBySmartCAOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplaceInvMTTOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustInvMTTOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustWithoutInvMTTOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplaceWithoutInvMTTOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplaceActionAssignedNoMTTOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustActionAssignedNoMTTOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustReplaceInvWithTokenMTTOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustReplaceInvSmartCAMTTOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public BusinessService() {
            this.Url = global::DAIHOI.Properties.Settings.Default.DAIHOI_pypharm_business_BusinessService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event replaceInvCompletedEventHandler replaceInvCompleted;
        
        /// <remarks/>
        public event ReplaceInvoiceActionCompletedEventHandler ReplaceInvoiceActionCompleted;
        
        /// <remarks/>
        public event ReplaceActionAssignedNoCompletedEventHandler ReplaceActionAssignedNoCompleted;
        
        /// <remarks/>
        public event ReplaceInvoiceCompletedEventHandler ReplaceInvoiceCompleted;
        
        /// <remarks/>
        public event adjustInvCompletedEventHandler adjustInvCompleted;
        
        /// <remarks/>
        public event AdjustInvoiceActionCompletedEventHandler AdjustInvoiceActionCompleted;
        
        /// <remarks/>
        public event AdjustWithoutInvCompletedEventHandler AdjustWithoutInvCompleted;
        
        /// <remarks/>
        public event ReplaceWithoutInvCompletedEventHandler ReplaceWithoutInvCompleted;
        
        /// <remarks/>
        public event AdjustInvoiceNoteCompletedEventHandler AdjustInvoiceNoteCompleted;
        
        /// <remarks/>
        public event AdjustActionAssignedNoCompletedEventHandler AdjustActionAssignedNoCompleted;
        
        /// <remarks/>
        public event AdjustInvoiceCompletedEventHandler AdjustInvoiceCompleted;
        
        /// <remarks/>
        public event cancelInvCompletedEventHandler cancelInvCompleted;
        
        /// <remarks/>
        public event cancelInvNoPayCompletedEventHandler cancelInvNoPayCompleted;
        
        /// <remarks/>
        public event cancelInvSignFileCompletedEventHandler cancelInvSignFileCompleted;
        
        /// <remarks/>
        public event cancelInvSignFileNoPayCompletedEventHandler cancelInvSignFileNoPayCompleted;
        
        /// <remarks/>
        public event restoreCancelInvFkeyCompletedEventHandler restoreCancelInvFkeyCompleted;
        
        /// <remarks/>
        public event restoreCancelInvTokenCompletedEventHandler restoreCancelInvTokenCompleted;
        
        /// <remarks/>
        public event restoreReplacedInvFkeyCompletedEventHandler restoreReplacedInvFkeyCompleted;
        
        /// <remarks/>
        public event restoreReplacedInvTokenCompletedEventHandler restoreReplacedInvTokenCompleted;
        
        /// <remarks/>
        public event poolingInvCompletedEventHandler poolingInvCompleted;
        
        /// <remarks/>
        public event GetInvbyFkeyCompletedEventHandler GetInvbyFkeyCompleted;
        
        /// <remarks/>
        public event reportInvUsedCompletedEventHandler reportInvUsedCompleted;
        
        /// <remarks/>
        public event reportMonthCompletedEventHandler reportMonthCompleted;
        
        /// <remarks/>
        public event deliverInvFkeyCompletedEventHandler deliverInvFkeyCompleted;
        
        /// <remarks/>
        public event deliverInvCompletedEventHandler deliverInvCompleted;
        
        /// <remarks/>
        public event confirmPaymentCompletedEventHandler confirmPaymentCompleted;
        
        /// <remarks/>
        public event confirmPaymentDetailCompletedEventHandler confirmPaymentDetailCompleted;
        
        /// <remarks/>
        public event unConfirmPaymentCompletedEventHandler unConfirmPaymentCompleted;
        
        /// <remarks/>
        public event confirmPaymentFkeyCompletedEventHandler confirmPaymentFkeyCompleted;
        
        /// <remarks/>
        public event confirmPaymentDetailFkeyCompletedEventHandler confirmPaymentDetailFkeyCompleted;
        
        /// <remarks/>
        public event confirmPaymentFkeyVNPCompletedEventHandler confirmPaymentFkeyVNPCompleted;
        
        /// <remarks/>
        public event UnConfirmPaymentFkeyCompletedEventHandler UnConfirmPaymentFkeyCompleted;
        
        /// <remarks/>
        public event UnConfirmPaymentFkeyVNPCompletedEventHandler UnConfirmPaymentFkeyVNPCompleted;
        
        /// <remarks/>
        public event ResetTemCompletedEventHandler ResetTemCompleted;
        
        /// <remarks/>
        public event GetAllRolesbyAccCompletedEventHandler GetAllRolesbyAccCompleted;
        
        /// <remarks/>
        public event CreateNewUserbyAccCompletedEventHandler CreateNewUserbyAccCompleted;
        
        /// <remarks/>
        public event UpdateSStaffAccountCompletedEventHandler UpdateSStaffAccountCompleted;
        
        /// <remarks/>
        public event CreateSStaffAccountCompletedEventHandler CreateSStaffAccountCompleted;
        
        /// <remarks/>
        public event getSerialByPatternCompletedEventHandler getSerialByPatternCompleted;
        
        /// <remarks/>
        public event getPublishInvsCompletedEventHandler getPublishInvsCompleted;
        
        /// <remarks/>
        public event ReplaceInvoiceNoPublishCompletedEventHandler ReplaceInvoiceNoPublishCompleted;
        
        /// <remarks/>
        public event AdjustInvoiceNoPublishCompletedEventHandler AdjustInvoiceNoPublishCompleted;
        
        /// <remarks/>
        public event ReplaceInvoiceNoPublishExtendCompletedEventHandler ReplaceInvoiceNoPublishExtendCompleted;
        
        /// <remarks/>
        public event AdjustInvoiceNoPublishExtendCompletedEventHandler AdjustInvoiceNoPublishExtendCompleted;
        
        /// <remarks/>
        public event AdjustInvoiceMultiCompletedEventHandler AdjustInvoiceMultiCompleted;
        
        /// <remarks/>
        public event ImportAttachmentByNoCompletedEventHandler ImportAttachmentByNoCompleted;
        
        /// <remarks/>
        public event GetFileCompletedEventHandler GetFileCompleted;
        
        /// <remarks/>
        public event ReplaceAssignedNoNewPatternCompletedEventHandler ReplaceAssignedNoNewPatternCompleted;
        
        /// <remarks/>
        public event AdjustAssignedNoNewPatternCompletedEventHandler AdjustAssignedNoNewPatternCompleted;
        
        /// <remarks/>
        public event AdjustInvoiceNewPatternCompletedEventHandler AdjustInvoiceNewPatternCompleted;
        
        /// <remarks/>
        public event ReplaceInvoiceNewPatternCompletedEventHandler ReplaceInvoiceNewPatternCompleted;
        
        /// <remarks/>
        public event ImportAttachmentByFkeyCompletedEventHandler ImportAttachmentByFkeyCompleted;
        
        /// <remarks/>
        public event MessageReceivedCompletedEventHandler MessageReceivedCompleted;
        
        /// <remarks/>
        public event RetrySendInvCompletedEventHandler RetrySendInvCompleted;
        
        /// <remarks/>
        public event confirmPaymentFkeyPatternCompletedEventHandler confirmPaymentFkeyPatternCompleted;
        
        /// <remarks/>
        public event UnConfirmPaymentFkeyPatternCompletedEventHandler UnConfirmPaymentFkeyPatternCompleted;
        
        /// <remarks/>
        public event AdjustReplaceInvSmartCACompletedEventHandler AdjustReplaceInvSmartCACompleted;
        
        /// <remarks/>
        public event cancelInvDetailFkeyCompletedEventHandler cancelInvDetailFkeyCompleted;
        
        /// <remarks/>
        public event UnconfirmPaymentDetailFkeyCompletedEventHandler UnconfirmPaymentDetailFkeyCompleted;
        
        /// <remarks/>
        public event GetHashWithOutInvTokenCompletedEventHandler GetHashWithOutInvTokenCompleted;
        
        /// <remarks/>
        public event GetHashWithOutInvSmartCACompletedEventHandler GetHashWithOutInvSmartCACompleted;
        
        /// <remarks/>
        public event AdjustReplaceWithOutInvTokenCompletedEventHandler AdjustReplaceWithOutInvTokenCompleted;
        
        /// <remarks/>
        public event AdjustReplaceWithOutInvSmartCACompletedEventHandler AdjustReplaceWithOutInvSmartCACompleted;
        
        /// <remarks/>
        public event getCompanyConfigCompletedEventHandler getCompanyConfigCompleted;
        
        /// <remarks/>
        public event ReplaceCTTActionCompletedEventHandler ReplaceCTTActionCompleted;
        
        /// <remarks/>
        public event getHashCTTTokenReplaceCompletedEventHandler getHashCTTTokenReplaceCompleted;
        
        /// <remarks/>
        public event GetHashCTTSmartCAReplaceCompletedEventHandler GetHashCTTSmartCAReplaceCompleted;
        
        /// <remarks/>
        public event AdjustReplaceCTTTokenCompletedEventHandler AdjustReplaceCTTTokenCompleted;
        
        /// <remarks/>
        public event AdjustReplaceCTTSmartCACompletedEventHandler AdjustReplaceCTTSmartCACompleted;
        
        /// <remarks/>
        public event cancelInvCTTCompletedEventHandler cancelInvCTTCompleted;
        
        /// <remarks/>
        public event SendInvMTTFkeyCompletedEventHandler SendInvMTTFkeyCompleted;
        
        /// <remarks/>
        public event GetHashInvMTTFkeyByTokenCompletedEventHandler GetHashInvMTTFkeyByTokenCompleted;
        
        /// <remarks/>
        public event SendInvMTTFkeyByTokenCompletedEventHandler SendInvMTTFkeyByTokenCompleted;
        
        /// <remarks/>
        public event GetHashInvMTTFkeyBySmartCACompletedEventHandler GetHashInvMTTFkeyBySmartCACompleted;
        
        /// <remarks/>
        public event SendInvMTTFkeyBySmartCACompletedEventHandler SendInvMTTFkeyBySmartCACompleted;
        
        /// <remarks/>
        public event SendInvMTTNoRangeCompletedEventHandler SendInvMTTNoRangeCompleted;
        
        /// <remarks/>
        public event GetHashInvMTTNoRangeByTokenCompletedEventHandler GetHashInvMTTNoRangeByTokenCompleted;
        
        /// <remarks/>
        public event SendInvMTTNoRangeByTokenCompletedEventHandler SendInvMTTNoRangeByTokenCompleted;
        
        /// <remarks/>
        public event GetHashInvMTTNoRangeBySmartCACompletedEventHandler GetHashInvMTTNoRangeBySmartCACompleted;
        
        /// <remarks/>
        public event SendInvMTTNoRangeBySmartCACompletedEventHandler SendInvMTTNoRangeBySmartCACompleted;
        
        /// <remarks/>
        public event SendInvMTTInvTokenCompletedEventHandler SendInvMTTInvTokenCompleted;
        
        /// <remarks/>
        public event GetHashInvMTTInvTokenByTokenCompletedEventHandler GetHashInvMTTInvTokenByTokenCompleted;
        
        /// <remarks/>
        public event SendInvMTTInvTokenByTokenCompletedEventHandler SendInvMTTInvTokenByTokenCompleted;
        
        /// <remarks/>
        public event GetHashInvMTTInvTokenBySmartCACompletedEventHandler GetHashInvMTTInvTokenBySmartCACompleted;
        
        /// <remarks/>
        public event SendInvMTTInvTokenBySmartCACompletedEventHandler SendInvMTTInvTokenBySmartCACompleted;
        
        /// <remarks/>
        public event ReplaceInvMTTCompletedEventHandler ReplaceInvMTTCompleted;
        
        /// <remarks/>
        public event AdjustInvMTTCompletedEventHandler AdjustInvMTTCompleted;
        
        /// <remarks/>
        public event AdjustWithoutInvMTTCompletedEventHandler AdjustWithoutInvMTTCompleted;
        
        /// <remarks/>
        public event ReplaceWithoutInvMTTCompletedEventHandler ReplaceWithoutInvMTTCompleted;
        
        /// <remarks/>
        public event ReplaceActionAssignedNoMTTCompletedEventHandler ReplaceActionAssignedNoMTTCompleted;
        
        /// <remarks/>
        public event AdjustActionAssignedNoMTTCompletedEventHandler AdjustActionAssignedNoMTTCompleted;
        
        /// <remarks/>
        public event AdjustReplaceInvWithTokenMTTCompletedEventHandler AdjustReplaceInvWithTokenMTTCompleted;
        
        /// <remarks/>
        public event AdjustReplaceInvSmartCAMTTCompletedEventHandler AdjustReplaceInvSmartCAMTTCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/replaceInv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string replaceInv(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert) {
            object[] results = this.Invoke("replaceInv", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void replaceInvAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, System.Nullable<int> convert) {
            this.replaceInvAsync(Account, ACpass, xmlInvData, username, pass, fkey, convert, null);
        }
        
        /// <remarks/>
        public void replaceInvAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, System.Nullable<int> convert, object userState) {
            if ((this.replaceInvOperationCompleted == null)) {
                this.replaceInvOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreplaceInvOperationCompleted);
            }
            this.InvokeAsync("replaceInv", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        convert}, this.replaceInvOperationCompleted, userState);
        }
        
        private void OnreplaceInvOperationCompleted(object arg) {
            if ((this.replaceInvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.replaceInvCompleted(this, new replaceInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReplaceInvoiceAction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReplaceInvoiceAction(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string Attachfile, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert, string pattern, string serial) {
            object[] results = this.Invoke("ReplaceInvoiceAction", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        Attachfile,
                        convert,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReplaceInvoiceActionAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string Attachfile, System.Nullable<int> convert, string pattern, string serial) {
            this.ReplaceInvoiceActionAsync(Account, ACpass, xmlInvData, username, pass, fkey, Attachfile, convert, pattern, serial, null);
        }
        
        /// <remarks/>
        public void ReplaceInvoiceActionAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string Attachfile, System.Nullable<int> convert, string pattern, string serial, object userState) {
            if ((this.ReplaceInvoiceActionOperationCompleted == null)) {
                this.ReplaceInvoiceActionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplaceInvoiceActionOperationCompleted);
            }
            this.InvokeAsync("ReplaceInvoiceAction", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        Attachfile,
                        convert,
                        pattern,
                        serial}, this.ReplaceInvoiceActionOperationCompleted, userState);
        }
        
        private void OnReplaceInvoiceActionOperationCompleted(object arg) {
            if ((this.ReplaceInvoiceActionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplaceInvoiceActionCompleted(this, new ReplaceInvoiceActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReplaceActionAssignedNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReplaceActionAssignedNo(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string Attachfile, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert, string pattern, string serial) {
            object[] results = this.Invoke("ReplaceActionAssignedNo", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        Attachfile,
                        convert,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReplaceActionAssignedNoAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string Attachfile, System.Nullable<int> convert, string pattern, string serial) {
            this.ReplaceActionAssignedNoAsync(Account, ACpass, xmlInvData, username, pass, fkey, Attachfile, convert, pattern, serial, null);
        }
        
        /// <remarks/>
        public void ReplaceActionAssignedNoAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string Attachfile, System.Nullable<int> convert, string pattern, string serial, object userState) {
            if ((this.ReplaceActionAssignedNoOperationCompleted == null)) {
                this.ReplaceActionAssignedNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplaceActionAssignedNoOperationCompleted);
            }
            this.InvokeAsync("ReplaceActionAssignedNo", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        Attachfile,
                        convert,
                        pattern,
                        serial}, this.ReplaceActionAssignedNoOperationCompleted, userState);
        }
        
        private void OnReplaceActionAssignedNoOperationCompleted(object arg) {
            if ((this.ReplaceActionAssignedNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplaceActionAssignedNoCompleted(this, new ReplaceActionAssignedNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReplaceInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReplaceInvoice(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert) {
            object[] results = this.Invoke("ReplaceInvoice", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        AttachFile,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReplaceInvoiceAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, System.Nullable<int> convert) {
            this.ReplaceInvoiceAsync(Account, ACpass, xmlInvData, username, pass, fkey, AttachFile, convert, null);
        }
        
        /// <remarks/>
        public void ReplaceInvoiceAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, System.Nullable<int> convert, object userState) {
            if ((this.ReplaceInvoiceOperationCompleted == null)) {
                this.ReplaceInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplaceInvoiceOperationCompleted);
            }
            this.InvokeAsync("ReplaceInvoice", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        AttachFile,
                        convert}, this.ReplaceInvoiceOperationCompleted, userState);
        }
        
        private void OnReplaceInvoiceOperationCompleted(object arg) {
            if ((this.ReplaceInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplaceInvoiceCompleted(this, new ReplaceInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/adjustInv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string adjustInv(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert) {
            object[] results = this.Invoke("adjustInv", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void adjustInvAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, System.Nullable<int> convert) {
            this.adjustInvAsync(Account, ACpass, xmlInvData, username, pass, fkey, convert, null);
        }
        
        /// <remarks/>
        public void adjustInvAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, System.Nullable<int> convert, object userState) {
            if ((this.adjustInvOperationCompleted == null)) {
                this.adjustInvOperationCompleted = new System.Threading.SendOrPostCallback(this.OnadjustInvOperationCompleted);
            }
            this.InvokeAsync("adjustInv", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        convert}, this.adjustInvOperationCompleted, userState);
        }
        
        private void OnadjustInvOperationCompleted(object arg) {
            if ((this.adjustInvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.adjustInvCompleted(this, new adjustInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdjustInvoiceAction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdjustInvoiceAction(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert, string pattern, string serial) {
            object[] results = this.Invoke("AdjustInvoiceAction", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        AttachFile,
                        convert,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustInvoiceActionAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, System.Nullable<int> convert, string pattern, string serial) {
            this.AdjustInvoiceActionAsync(Account, ACpass, xmlInvData, username, pass, fkey, AttachFile, convert, pattern, serial, null);
        }
        
        /// <remarks/>
        public void AdjustInvoiceActionAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, System.Nullable<int> convert, string pattern, string serial, object userState) {
            if ((this.AdjustInvoiceActionOperationCompleted == null)) {
                this.AdjustInvoiceActionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustInvoiceActionOperationCompleted);
            }
            this.InvokeAsync("AdjustInvoiceAction", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        AttachFile,
                        convert,
                        pattern,
                        serial}, this.AdjustInvoiceActionOperationCompleted, userState);
        }
        
        private void OnAdjustInvoiceActionOperationCompleted(object arg) {
            if ((this.AdjustInvoiceActionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustInvoiceActionCompleted(this, new AdjustInvoiceActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdjustWithoutInv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdjustWithoutInv(string account, string accPass, string invXml, string userName, string userPass, string oldPattern, string oldSerial, decimal oldNo, string strOldArisingDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert, string pattern, string serial, int relatedInvType, string feature) {
            object[] results = this.Invoke("AdjustWithoutInv", new object[] {
                        account,
                        accPass,
                        invXml,
                        userName,
                        userPass,
                        oldPattern,
                        oldSerial,
                        oldNo,
                        strOldArisingDate,
                        convert,
                        pattern,
                        serial,
                        relatedInvType,
                        feature});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustWithoutInvAsync(string account, string accPass, string invXml, string userName, string userPass, string oldPattern, string oldSerial, decimal oldNo, string strOldArisingDate, System.Nullable<int> convert, string pattern, string serial, int relatedInvType, string feature) {
            this.AdjustWithoutInvAsync(account, accPass, invXml, userName, userPass, oldPattern, oldSerial, oldNo, strOldArisingDate, convert, pattern, serial, relatedInvType, feature, null);
        }
        
        /// <remarks/>
        public void AdjustWithoutInvAsync(string account, string accPass, string invXml, string userName, string userPass, string oldPattern, string oldSerial, decimal oldNo, string strOldArisingDate, System.Nullable<int> convert, string pattern, string serial, int relatedInvType, string feature, object userState) {
            if ((this.AdjustWithoutInvOperationCompleted == null)) {
                this.AdjustWithoutInvOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustWithoutInvOperationCompleted);
            }
            this.InvokeAsync("AdjustWithoutInv", new object[] {
                        account,
                        accPass,
                        invXml,
                        userName,
                        userPass,
                        oldPattern,
                        oldSerial,
                        oldNo,
                        strOldArisingDate,
                        convert,
                        pattern,
                        serial,
                        relatedInvType,
                        feature}, this.AdjustWithoutInvOperationCompleted, userState);
        }
        
        private void OnAdjustWithoutInvOperationCompleted(object arg) {
            if ((this.AdjustWithoutInvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustWithoutInvCompleted(this, new AdjustWithoutInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReplaceWithoutInv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReplaceWithoutInv(string account, string accPass, string invXml, string userName, string userPass, string oldPattern, string oldSerial, decimal oldNo, string strOldArisingDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert, string pattern, string serial, int relatedInvType, string feature) {
            object[] results = this.Invoke("ReplaceWithoutInv", new object[] {
                        account,
                        accPass,
                        invXml,
                        userName,
                        userPass,
                        oldPattern,
                        oldSerial,
                        oldNo,
                        strOldArisingDate,
                        convert,
                        pattern,
                        serial,
                        relatedInvType,
                        feature});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReplaceWithoutInvAsync(string account, string accPass, string invXml, string userName, string userPass, string oldPattern, string oldSerial, decimal oldNo, string strOldArisingDate, System.Nullable<int> convert, string pattern, string serial, int relatedInvType, string feature) {
            this.ReplaceWithoutInvAsync(account, accPass, invXml, userName, userPass, oldPattern, oldSerial, oldNo, strOldArisingDate, convert, pattern, serial, relatedInvType, feature, null);
        }
        
        /// <remarks/>
        public void ReplaceWithoutInvAsync(string account, string accPass, string invXml, string userName, string userPass, string oldPattern, string oldSerial, decimal oldNo, string strOldArisingDate, System.Nullable<int> convert, string pattern, string serial, int relatedInvType, string feature, object userState) {
            if ((this.ReplaceWithoutInvOperationCompleted == null)) {
                this.ReplaceWithoutInvOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplaceWithoutInvOperationCompleted);
            }
            this.InvokeAsync("ReplaceWithoutInv", new object[] {
                        account,
                        accPass,
                        invXml,
                        userName,
                        userPass,
                        oldPattern,
                        oldSerial,
                        oldNo,
                        strOldArisingDate,
                        convert,
                        pattern,
                        serial,
                        relatedInvType,
                        feature}, this.ReplaceWithoutInvOperationCompleted, userState);
        }
        
        private void OnReplaceWithoutInvOperationCompleted(object arg) {
            if ((this.ReplaceWithoutInvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplaceWithoutInvCompleted(this, new ReplaceWithoutInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdjustInvoiceNote", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdjustInvoiceNote(string account, string accPass, string xmlInvData, string userName, string userPass, string fkey, string attachFile, string pattern) {
            object[] results = this.Invoke("AdjustInvoiceNote", new object[] {
                        account,
                        accPass,
                        xmlInvData,
                        userName,
                        userPass,
                        fkey,
                        attachFile,
                        pattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustInvoiceNoteAsync(string account, string accPass, string xmlInvData, string userName, string userPass, string fkey, string attachFile, string pattern) {
            this.AdjustInvoiceNoteAsync(account, accPass, xmlInvData, userName, userPass, fkey, attachFile, pattern, null);
        }
        
        /// <remarks/>
        public void AdjustInvoiceNoteAsync(string account, string accPass, string xmlInvData, string userName, string userPass, string fkey, string attachFile, string pattern, object userState) {
            if ((this.AdjustInvoiceNoteOperationCompleted == null)) {
                this.AdjustInvoiceNoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustInvoiceNoteOperationCompleted);
            }
            this.InvokeAsync("AdjustInvoiceNote", new object[] {
                        account,
                        accPass,
                        xmlInvData,
                        userName,
                        userPass,
                        fkey,
                        attachFile,
                        pattern}, this.AdjustInvoiceNoteOperationCompleted, userState);
        }
        
        private void OnAdjustInvoiceNoteOperationCompleted(object arg) {
            if ((this.AdjustInvoiceNoteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustInvoiceNoteCompleted(this, new AdjustInvoiceNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdjustActionAssignedNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdjustActionAssignedNo(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert, string pattern, string serial) {
            object[] results = this.Invoke("AdjustActionAssignedNo", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        AttachFile,
                        convert,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustActionAssignedNoAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, System.Nullable<int> convert, string pattern, string serial) {
            this.AdjustActionAssignedNoAsync(Account, ACpass, xmlInvData, username, pass, fkey, AttachFile, convert, pattern, serial, null);
        }
        
        /// <remarks/>
        public void AdjustActionAssignedNoAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, System.Nullable<int> convert, string pattern, string serial, object userState) {
            if ((this.AdjustActionAssignedNoOperationCompleted == null)) {
                this.AdjustActionAssignedNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustActionAssignedNoOperationCompleted);
            }
            this.InvokeAsync("AdjustActionAssignedNo", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        AttachFile,
                        convert,
                        pattern,
                        serial}, this.AdjustActionAssignedNoOperationCompleted, userState);
        }
        
        private void OnAdjustActionAssignedNoOperationCompleted(object arg) {
            if ((this.AdjustActionAssignedNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustActionAssignedNoCompleted(this, new AdjustActionAssignedNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdjustInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdjustInvoice(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert) {
            object[] results = this.Invoke("AdjustInvoice", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        AttachFile,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustInvoiceAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, System.Nullable<int> convert) {
            this.AdjustInvoiceAsync(Account, ACpass, xmlInvData, username, pass, fkey, AttachFile, convert, null);
        }
        
        /// <remarks/>
        public void AdjustInvoiceAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, System.Nullable<int> convert, object userState) {
            if ((this.AdjustInvoiceOperationCompleted == null)) {
                this.AdjustInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustInvoiceOperationCompleted);
            }
            this.InvokeAsync("AdjustInvoice", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        AttachFile,
                        convert}, this.AdjustInvoiceOperationCompleted, userState);
        }
        
        private void OnAdjustInvoiceOperationCompleted(object arg) {
            if ((this.AdjustInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustInvoiceCompleted(this, new AdjustInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/cancelInv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string cancelInv(string Account, string ACpass, string fkey, string userName, string userPass) {
            object[] results = this.Invoke("cancelInv", new object[] {
                        Account,
                        ACpass,
                        fkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void cancelInvAsync(string Account, string ACpass, string fkey, string userName, string userPass) {
            this.cancelInvAsync(Account, ACpass, fkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void cancelInvAsync(string Account, string ACpass, string fkey, string userName, string userPass, object userState) {
            if ((this.cancelInvOperationCompleted == null)) {
                this.cancelInvOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelInvOperationCompleted);
            }
            this.InvokeAsync("cancelInv", new object[] {
                        Account,
                        ACpass,
                        fkey,
                        userName,
                        userPass}, this.cancelInvOperationCompleted, userState);
        }
        
        private void OncancelInvOperationCompleted(object arg) {
            if ((this.cancelInvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelInvCompleted(this, new cancelInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/cancelInvNoPay", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string cancelInvNoPay(string Account, string ACpass, string fkey, string userName, string userPass) {
            object[] results = this.Invoke("cancelInvNoPay", new object[] {
                        Account,
                        ACpass,
                        fkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void cancelInvNoPayAsync(string Account, string ACpass, string fkey, string userName, string userPass) {
            this.cancelInvNoPayAsync(Account, ACpass, fkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void cancelInvNoPayAsync(string Account, string ACpass, string fkey, string userName, string userPass, object userState) {
            if ((this.cancelInvNoPayOperationCompleted == null)) {
                this.cancelInvNoPayOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelInvNoPayOperationCompleted);
            }
            this.InvokeAsync("cancelInvNoPay", new object[] {
                        Account,
                        ACpass,
                        fkey,
                        userName,
                        userPass}, this.cancelInvNoPayOperationCompleted, userState);
        }
        
        private void OncancelInvNoPayOperationCompleted(object arg) {
            if ((this.cancelInvNoPayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelInvNoPayCompleted(this, new cancelInvNoPayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/cancelInvSignFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string cancelInvSignFile(string Account, string ACpass, string fkey, string userName, string userPass, string note) {
            object[] results = this.Invoke("cancelInvSignFile", new object[] {
                        Account,
                        ACpass,
                        fkey,
                        userName,
                        userPass,
                        note});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void cancelInvSignFileAsync(string Account, string ACpass, string fkey, string userName, string userPass, string note) {
            this.cancelInvSignFileAsync(Account, ACpass, fkey, userName, userPass, note, null);
        }
        
        /// <remarks/>
        public void cancelInvSignFileAsync(string Account, string ACpass, string fkey, string userName, string userPass, string note, object userState) {
            if ((this.cancelInvSignFileOperationCompleted == null)) {
                this.cancelInvSignFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelInvSignFileOperationCompleted);
            }
            this.InvokeAsync("cancelInvSignFile", new object[] {
                        Account,
                        ACpass,
                        fkey,
                        userName,
                        userPass,
                        note}, this.cancelInvSignFileOperationCompleted, userState);
        }
        
        private void OncancelInvSignFileOperationCompleted(object arg) {
            if ((this.cancelInvSignFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelInvSignFileCompleted(this, new cancelInvSignFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/cancelInvSignFileNoPay", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string cancelInvSignFileNoPay(string Account, string ACpass, string fkey, string userName, string userPass, string note) {
            object[] results = this.Invoke("cancelInvSignFileNoPay", new object[] {
                        Account,
                        ACpass,
                        fkey,
                        userName,
                        userPass,
                        note});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void cancelInvSignFileNoPayAsync(string Account, string ACpass, string fkey, string userName, string userPass, string note) {
            this.cancelInvSignFileNoPayAsync(Account, ACpass, fkey, userName, userPass, note, null);
        }
        
        /// <remarks/>
        public void cancelInvSignFileNoPayAsync(string Account, string ACpass, string fkey, string userName, string userPass, string note, object userState) {
            if ((this.cancelInvSignFileNoPayOperationCompleted == null)) {
                this.cancelInvSignFileNoPayOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelInvSignFileNoPayOperationCompleted);
            }
            this.InvokeAsync("cancelInvSignFileNoPay", new object[] {
                        Account,
                        ACpass,
                        fkey,
                        userName,
                        userPass,
                        note}, this.cancelInvSignFileNoPayOperationCompleted, userState);
        }
        
        private void OncancelInvSignFileNoPayOperationCompleted(object arg) {
            if ((this.cancelInvSignFileNoPayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelInvSignFileNoPayCompleted(this, new cancelInvSignFileNoPayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/restoreCancelInvFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string restoreCancelInvFkey(string Account, string ACpass, string fkey, string userName, string userPass) {
            object[] results = this.Invoke("restoreCancelInvFkey", new object[] {
                        Account,
                        ACpass,
                        fkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void restoreCancelInvFkeyAsync(string Account, string ACpass, string fkey, string userName, string userPass) {
            this.restoreCancelInvFkeyAsync(Account, ACpass, fkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void restoreCancelInvFkeyAsync(string Account, string ACpass, string fkey, string userName, string userPass, object userState) {
            if ((this.restoreCancelInvFkeyOperationCompleted == null)) {
                this.restoreCancelInvFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrestoreCancelInvFkeyOperationCompleted);
            }
            this.InvokeAsync("restoreCancelInvFkey", new object[] {
                        Account,
                        ACpass,
                        fkey,
                        userName,
                        userPass}, this.restoreCancelInvFkeyOperationCompleted, userState);
        }
        
        private void OnrestoreCancelInvFkeyOperationCompleted(object arg) {
            if ((this.restoreCancelInvFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.restoreCancelInvFkeyCompleted(this, new restoreCancelInvFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/restoreCancelInvToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string restoreCancelInvToken(string Account, string ACpass, string token, string userName, string userPass) {
            object[] results = this.Invoke("restoreCancelInvToken", new object[] {
                        Account,
                        ACpass,
                        token,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void restoreCancelInvTokenAsync(string Account, string ACpass, string token, string userName, string userPass) {
            this.restoreCancelInvTokenAsync(Account, ACpass, token, userName, userPass, null);
        }
        
        /// <remarks/>
        public void restoreCancelInvTokenAsync(string Account, string ACpass, string token, string userName, string userPass, object userState) {
            if ((this.restoreCancelInvTokenOperationCompleted == null)) {
                this.restoreCancelInvTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrestoreCancelInvTokenOperationCompleted);
            }
            this.InvokeAsync("restoreCancelInvToken", new object[] {
                        Account,
                        ACpass,
                        token,
                        userName,
                        userPass}, this.restoreCancelInvTokenOperationCompleted, userState);
        }
        
        private void OnrestoreCancelInvTokenOperationCompleted(object arg) {
            if ((this.restoreCancelInvTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.restoreCancelInvTokenCompleted(this, new restoreCancelInvTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/restoreReplacedInvFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string restoreReplacedInvFkey(string Account, string ACpass, string fkeyReplaced, string fkeyReplacedOld, string userName, string userPass) {
            object[] results = this.Invoke("restoreReplacedInvFkey", new object[] {
                        Account,
                        ACpass,
                        fkeyReplaced,
                        fkeyReplacedOld,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void restoreReplacedInvFkeyAsync(string Account, string ACpass, string fkeyReplaced, string fkeyReplacedOld, string userName, string userPass) {
            this.restoreReplacedInvFkeyAsync(Account, ACpass, fkeyReplaced, fkeyReplacedOld, userName, userPass, null);
        }
        
        /// <remarks/>
        public void restoreReplacedInvFkeyAsync(string Account, string ACpass, string fkeyReplaced, string fkeyReplacedOld, string userName, string userPass, object userState) {
            if ((this.restoreReplacedInvFkeyOperationCompleted == null)) {
                this.restoreReplacedInvFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrestoreReplacedInvFkeyOperationCompleted);
            }
            this.InvokeAsync("restoreReplacedInvFkey", new object[] {
                        Account,
                        ACpass,
                        fkeyReplaced,
                        fkeyReplacedOld,
                        userName,
                        userPass}, this.restoreReplacedInvFkeyOperationCompleted, userState);
        }
        
        private void OnrestoreReplacedInvFkeyOperationCompleted(object arg) {
            if ((this.restoreReplacedInvFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.restoreReplacedInvFkeyCompleted(this, new restoreReplacedInvFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/restoreReplacedInvToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string restoreReplacedInvToken(string Account, string ACpass, string tokenReplaced, string tokenReplacedOld, string userName, string userPass) {
            object[] results = this.Invoke("restoreReplacedInvToken", new object[] {
                        Account,
                        ACpass,
                        tokenReplaced,
                        tokenReplacedOld,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void restoreReplacedInvTokenAsync(string Account, string ACpass, string tokenReplaced, string tokenReplacedOld, string userName, string userPass) {
            this.restoreReplacedInvTokenAsync(Account, ACpass, tokenReplaced, tokenReplacedOld, userName, userPass, null);
        }
        
        /// <remarks/>
        public void restoreReplacedInvTokenAsync(string Account, string ACpass, string tokenReplaced, string tokenReplacedOld, string userName, string userPass, object userState) {
            if ((this.restoreReplacedInvTokenOperationCompleted == null)) {
                this.restoreReplacedInvTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrestoreReplacedInvTokenOperationCompleted);
            }
            this.InvokeAsync("restoreReplacedInvToken", new object[] {
                        Account,
                        ACpass,
                        tokenReplaced,
                        tokenReplacedOld,
                        userName,
                        userPass}, this.restoreReplacedInvTokenOperationCompleted, userState);
        }
        
        private void OnrestoreReplacedInvTokenOperationCompleted(object arg) {
            if ((this.restoreReplacedInvTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.restoreReplacedInvTokenCompleted(this, new restoreReplacedInvTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/poolingInv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string poolingInv(string userName, string passWord, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] invData, string pattern) {
            object[] results = this.Invoke("poolingInv", new object[] {
                        userName,
                        passWord,
                        invData,
                        pattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void poolingInvAsync(string userName, string passWord, byte[] invData, string pattern) {
            this.poolingInvAsync(userName, passWord, invData, pattern, null);
        }
        
        /// <remarks/>
        public void poolingInvAsync(string userName, string passWord, byte[] invData, string pattern, object userState) {
            if ((this.poolingInvOperationCompleted == null)) {
                this.poolingInvOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpoolingInvOperationCompleted);
            }
            this.InvokeAsync("poolingInv", new object[] {
                        userName,
                        passWord,
                        invData,
                        pattern}, this.poolingInvOperationCompleted, userState);
        }
        
        private void OnpoolingInvOperationCompleted(object arg) {
            if ((this.poolingInvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.poolingInvCompleted(this, new poolingInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInvbyFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetInvbyFkey(string fkey, string username, string pass) {
            object[] results = this.Invoke("GetInvbyFkey", new object[] {
                        fkey,
                        username,
                        pass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetInvbyFkeyAsync(string fkey, string username, string pass) {
            this.GetInvbyFkeyAsync(fkey, username, pass, null);
        }
        
        /// <remarks/>
        public void GetInvbyFkeyAsync(string fkey, string username, string pass, object userState) {
            if ((this.GetInvbyFkeyOperationCompleted == null)) {
                this.GetInvbyFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvbyFkeyOperationCompleted);
            }
            this.InvokeAsync("GetInvbyFkey", new object[] {
                        fkey,
                        username,
                        pass}, this.GetInvbyFkeyOperationCompleted, userState);
        }
        
        private void OnGetInvbyFkeyOperationCompleted(object arg) {
            if ((this.GetInvbyFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvbyFkeyCompleted(this, new GetInvbyFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/reportInvUsed", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string reportInvUsed(int year, int quarter, int currentQuater, string username, string pass) {
            object[] results = this.Invoke("reportInvUsed", new object[] {
                        year,
                        quarter,
                        currentQuater,
                        username,
                        pass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void reportInvUsedAsync(int year, int quarter, int currentQuater, string username, string pass) {
            this.reportInvUsedAsync(year, quarter, currentQuater, username, pass, null);
        }
        
        /// <remarks/>
        public void reportInvUsedAsync(int year, int quarter, int currentQuater, string username, string pass, object userState) {
            if ((this.reportInvUsedOperationCompleted == null)) {
                this.reportInvUsedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreportInvUsedOperationCompleted);
            }
            this.InvokeAsync("reportInvUsed", new object[] {
                        year,
                        quarter,
                        currentQuater,
                        username,
                        pass}, this.reportInvUsedOperationCompleted, userState);
        }
        
        private void OnreportInvUsedOperationCompleted(object arg) {
            if ((this.reportInvUsedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.reportInvUsedCompleted(this, new reportInvUsedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/reportMonth", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string reportMonth(int year, int month, string username, string pass) {
            object[] results = this.Invoke("reportMonth", new object[] {
                        year,
                        month,
                        username,
                        pass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void reportMonthAsync(int year, int month, string username, string pass) {
            this.reportMonthAsync(year, month, username, pass, null);
        }
        
        /// <remarks/>
        public void reportMonthAsync(int year, int month, string username, string pass, object userState) {
            if ((this.reportMonthOperationCompleted == null)) {
                this.reportMonthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreportMonthOperationCompleted);
            }
            this.InvokeAsync("reportMonth", new object[] {
                        year,
                        month,
                        username,
                        pass}, this.reportMonthOperationCompleted, userState);
        }
        
        private void OnreportMonthOperationCompleted(object arg) {
            if ((this.reportMonthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.reportMonthCompleted(this, new reportMonthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deliverInvFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string deliverInvFkey(string lstFkey, string userName, string userPass) {
            object[] results = this.Invoke("deliverInvFkey", new object[] {
                        lstFkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deliverInvFkeyAsync(string lstFkey, string userName, string userPass) {
            this.deliverInvFkeyAsync(lstFkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void deliverInvFkeyAsync(string lstFkey, string userName, string userPass, object userState) {
            if ((this.deliverInvFkeyOperationCompleted == null)) {
                this.deliverInvFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeliverInvFkeyOperationCompleted);
            }
            this.InvokeAsync("deliverInvFkey", new object[] {
                        lstFkey,
                        userName,
                        userPass}, this.deliverInvFkeyOperationCompleted, userState);
        }
        
        private void OndeliverInvFkeyOperationCompleted(object arg) {
            if ((this.deliverInvFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deliverInvFkeyCompleted(this, new deliverInvFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deliverInv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string deliverInv(string lstInvToken, string userName, string userPass) {
            object[] results = this.Invoke("deliverInv", new object[] {
                        lstInvToken,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deliverInvAsync(string lstInvToken, string userName, string userPass) {
            this.deliverInvAsync(lstInvToken, userName, userPass, null);
        }
        
        /// <remarks/>
        public void deliverInvAsync(string lstInvToken, string userName, string userPass, object userState) {
            if ((this.deliverInvOperationCompleted == null)) {
                this.deliverInvOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeliverInvOperationCompleted);
            }
            this.InvokeAsync("deliverInv", new object[] {
                        lstInvToken,
                        userName,
                        userPass}, this.deliverInvOperationCompleted, userState);
        }
        
        private void OndeliverInvOperationCompleted(object arg) {
            if ((this.deliverInvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deliverInvCompleted(this, new deliverInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/confirmPayment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string confirmPayment(string lstInvToken, string userName, string userPass) {
            object[] results = this.Invoke("confirmPayment", new object[] {
                        lstInvToken,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void confirmPaymentAsync(string lstInvToken, string userName, string userPass) {
            this.confirmPaymentAsync(lstInvToken, userName, userPass, null);
        }
        
        /// <remarks/>
        public void confirmPaymentAsync(string lstInvToken, string userName, string userPass, object userState) {
            if ((this.confirmPaymentOperationCompleted == null)) {
                this.confirmPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconfirmPaymentOperationCompleted);
            }
            this.InvokeAsync("confirmPayment", new object[] {
                        lstInvToken,
                        userName,
                        userPass}, this.confirmPaymentOperationCompleted, userState);
        }
        
        private void OnconfirmPaymentOperationCompleted(object arg) {
            if ((this.confirmPaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.confirmPaymentCompleted(this, new confirmPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/confirmPaymentDetail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string confirmPaymentDetail(string lstInvToken, string userName, string userPass) {
            object[] results = this.Invoke("confirmPaymentDetail", new object[] {
                        lstInvToken,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void confirmPaymentDetailAsync(string lstInvToken, string userName, string userPass) {
            this.confirmPaymentDetailAsync(lstInvToken, userName, userPass, null);
        }
        
        /// <remarks/>
        public void confirmPaymentDetailAsync(string lstInvToken, string userName, string userPass, object userState) {
            if ((this.confirmPaymentDetailOperationCompleted == null)) {
                this.confirmPaymentDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconfirmPaymentDetailOperationCompleted);
            }
            this.InvokeAsync("confirmPaymentDetail", new object[] {
                        lstInvToken,
                        userName,
                        userPass}, this.confirmPaymentDetailOperationCompleted, userState);
        }
        
        private void OnconfirmPaymentDetailOperationCompleted(object arg) {
            if ((this.confirmPaymentDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.confirmPaymentDetailCompleted(this, new confirmPaymentDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/unConfirmPayment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string unConfirmPayment(string lstInvToken, string userName, string userPass) {
            object[] results = this.Invoke("unConfirmPayment", new object[] {
                        lstInvToken,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void unConfirmPaymentAsync(string lstInvToken, string userName, string userPass) {
            this.unConfirmPaymentAsync(lstInvToken, userName, userPass, null);
        }
        
        /// <remarks/>
        public void unConfirmPaymentAsync(string lstInvToken, string userName, string userPass, object userState) {
            if ((this.unConfirmPaymentOperationCompleted == null)) {
                this.unConfirmPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnunConfirmPaymentOperationCompleted);
            }
            this.InvokeAsync("unConfirmPayment", new object[] {
                        lstInvToken,
                        userName,
                        userPass}, this.unConfirmPaymentOperationCompleted, userState);
        }
        
        private void OnunConfirmPaymentOperationCompleted(object arg) {
            if ((this.unConfirmPaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.unConfirmPaymentCompleted(this, new unConfirmPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/confirmPaymentFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string confirmPaymentFkey(string lstFkey, string userName, string userPass) {
            object[] results = this.Invoke("confirmPaymentFkey", new object[] {
                        lstFkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void confirmPaymentFkeyAsync(string lstFkey, string userName, string userPass) {
            this.confirmPaymentFkeyAsync(lstFkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void confirmPaymentFkeyAsync(string lstFkey, string userName, string userPass, object userState) {
            if ((this.confirmPaymentFkeyOperationCompleted == null)) {
                this.confirmPaymentFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconfirmPaymentFkeyOperationCompleted);
            }
            this.InvokeAsync("confirmPaymentFkey", new object[] {
                        lstFkey,
                        userName,
                        userPass}, this.confirmPaymentFkeyOperationCompleted, userState);
        }
        
        private void OnconfirmPaymentFkeyOperationCompleted(object arg) {
            if ((this.confirmPaymentFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.confirmPaymentFkeyCompleted(this, new confirmPaymentFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/confirmPaymentDetailFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string confirmPaymentDetailFkey(string lstFkey, string userName, string userPass) {
            object[] results = this.Invoke("confirmPaymentDetailFkey", new object[] {
                        lstFkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void confirmPaymentDetailFkeyAsync(string lstFkey, string userName, string userPass) {
            this.confirmPaymentDetailFkeyAsync(lstFkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void confirmPaymentDetailFkeyAsync(string lstFkey, string userName, string userPass, object userState) {
            if ((this.confirmPaymentDetailFkeyOperationCompleted == null)) {
                this.confirmPaymentDetailFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconfirmPaymentDetailFkeyOperationCompleted);
            }
            this.InvokeAsync("confirmPaymentDetailFkey", new object[] {
                        lstFkey,
                        userName,
                        userPass}, this.confirmPaymentDetailFkeyOperationCompleted, userState);
        }
        
        private void OnconfirmPaymentDetailFkeyOperationCompleted(object arg) {
            if ((this.confirmPaymentDetailFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.confirmPaymentDetailFkeyCompleted(this, new confirmPaymentDetailFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/confirmPaymentFkeyVNP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string confirmPaymentFkeyVNP(string lstFkey, bool isEmail, string userName, string userPass) {
            object[] results = this.Invoke("confirmPaymentFkeyVNP", new object[] {
                        lstFkey,
                        isEmail,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void confirmPaymentFkeyVNPAsync(string lstFkey, bool isEmail, string userName, string userPass) {
            this.confirmPaymentFkeyVNPAsync(lstFkey, isEmail, userName, userPass, null);
        }
        
        /// <remarks/>
        public void confirmPaymentFkeyVNPAsync(string lstFkey, bool isEmail, string userName, string userPass, object userState) {
            if ((this.confirmPaymentFkeyVNPOperationCompleted == null)) {
                this.confirmPaymentFkeyVNPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconfirmPaymentFkeyVNPOperationCompleted);
            }
            this.InvokeAsync("confirmPaymentFkeyVNP", new object[] {
                        lstFkey,
                        isEmail,
                        userName,
                        userPass}, this.confirmPaymentFkeyVNPOperationCompleted, userState);
        }
        
        private void OnconfirmPaymentFkeyVNPOperationCompleted(object arg) {
            if ((this.confirmPaymentFkeyVNPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.confirmPaymentFkeyVNPCompleted(this, new confirmPaymentFkeyVNPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UnConfirmPaymentFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UnConfirmPaymentFkey(string lstFkey, string userName, string userPass) {
            object[] results = this.Invoke("UnConfirmPaymentFkey", new object[] {
                        lstFkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UnConfirmPaymentFkeyAsync(string lstFkey, string userName, string userPass) {
            this.UnConfirmPaymentFkeyAsync(lstFkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void UnConfirmPaymentFkeyAsync(string lstFkey, string userName, string userPass, object userState) {
            if ((this.UnConfirmPaymentFkeyOperationCompleted == null)) {
                this.UnConfirmPaymentFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnConfirmPaymentFkeyOperationCompleted);
            }
            this.InvokeAsync("UnConfirmPaymentFkey", new object[] {
                        lstFkey,
                        userName,
                        userPass}, this.UnConfirmPaymentFkeyOperationCompleted, userState);
        }
        
        private void OnUnConfirmPaymentFkeyOperationCompleted(object arg) {
            if ((this.UnConfirmPaymentFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnConfirmPaymentFkeyCompleted(this, new UnConfirmPaymentFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UnConfirmPaymentFkeyVNP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UnConfirmPaymentFkeyVNP(string lstFkey, string userName, string userPass) {
            object[] results = this.Invoke("UnConfirmPaymentFkeyVNP", new object[] {
                        lstFkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UnConfirmPaymentFkeyVNPAsync(string lstFkey, string userName, string userPass) {
            this.UnConfirmPaymentFkeyVNPAsync(lstFkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void UnConfirmPaymentFkeyVNPAsync(string lstFkey, string userName, string userPass, object userState) {
            if ((this.UnConfirmPaymentFkeyVNPOperationCompleted == null)) {
                this.UnConfirmPaymentFkeyVNPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnConfirmPaymentFkeyVNPOperationCompleted);
            }
            this.InvokeAsync("UnConfirmPaymentFkeyVNP", new object[] {
                        lstFkey,
                        userName,
                        userPass}, this.UnConfirmPaymentFkeyVNPOperationCompleted, userState);
        }
        
        private void OnUnConfirmPaymentFkeyVNPOperationCompleted(object arg) {
            if ((this.UnConfirmPaymentFkeyVNPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnConfirmPaymentFkeyVNPCompleted(this, new UnConfirmPaymentFkeyVNPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ResetTem", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ResetTem(string username, string password) {
            object[] results = this.Invoke("ResetTem", new object[] {
                        username,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ResetTemAsync(string username, string password) {
            this.ResetTemAsync(username, password, null);
        }
        
        /// <remarks/>
        public void ResetTemAsync(string username, string password, object userState) {
            if ((this.ResetTemOperationCompleted == null)) {
                this.ResetTemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetTemOperationCompleted);
            }
            this.InvokeAsync("ResetTem", new object[] {
                        username,
                        password}, this.ResetTemOperationCompleted, userState);
        }
        
        private void OnResetTemOperationCompleted(object arg) {
            if ((this.ResetTemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetTemCompleted(this, new ResetTemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllRolesbyAcc", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllRolesbyAcc(string usernameService, string passwordService) {
            object[] results = this.Invoke("GetAllRolesbyAcc", new object[] {
                        usernameService,
                        passwordService});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllRolesbyAccAsync(string usernameService, string passwordService) {
            this.GetAllRolesbyAccAsync(usernameService, passwordService, null);
        }
        
        /// <remarks/>
        public void GetAllRolesbyAccAsync(string usernameService, string passwordService, object userState) {
            if ((this.GetAllRolesbyAccOperationCompleted == null)) {
                this.GetAllRolesbyAccOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllRolesbyAccOperationCompleted);
            }
            this.InvokeAsync("GetAllRolesbyAcc", new object[] {
                        usernameService,
                        passwordService}, this.GetAllRolesbyAccOperationCompleted, userState);
        }
        
        private void OnGetAllRolesbyAccOperationCompleted(object arg) {
            if ((this.GetAllRolesbyAccCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllRolesbyAccCompleted(this, new GetAllRolesbyAccCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateNewUserbyAcc", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateNewUserbyAcc(string usernameService, string passwordService, string username, string password, string usernew, string passnew, string retypepassnew, string email, bool IsApproved, bool IsLockedOut, string roles) {
            object[] results = this.Invoke("CreateNewUserbyAcc", new object[] {
                        usernameService,
                        passwordService,
                        username,
                        password,
                        usernew,
                        passnew,
                        retypepassnew,
                        email,
                        IsApproved,
                        IsLockedOut,
                        roles});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateNewUserbyAccAsync(string usernameService, string passwordService, string username, string password, string usernew, string passnew, string retypepassnew, string email, bool IsApproved, bool IsLockedOut, string roles) {
            this.CreateNewUserbyAccAsync(usernameService, passwordService, username, password, usernew, passnew, retypepassnew, email, IsApproved, IsLockedOut, roles, null);
        }
        
        /// <remarks/>
        public void CreateNewUserbyAccAsync(string usernameService, string passwordService, string username, string password, string usernew, string passnew, string retypepassnew, string email, bool IsApproved, bool IsLockedOut, string roles, object userState) {
            if ((this.CreateNewUserbyAccOperationCompleted == null)) {
                this.CreateNewUserbyAccOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewUserbyAccOperationCompleted);
            }
            this.InvokeAsync("CreateNewUserbyAcc", new object[] {
                        usernameService,
                        passwordService,
                        username,
                        password,
                        usernew,
                        passnew,
                        retypepassnew,
                        email,
                        IsApproved,
                        IsLockedOut,
                        roles}, this.CreateNewUserbyAccOperationCompleted, userState);
        }
        
        private void OnCreateNewUserbyAccOperationCompleted(object arg) {
            if ((this.CreateNewUserbyAccCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewUserbyAccCompleted(this, new CreateNewUserbyAccCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSStaffAccount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateSStaffAccount(string username, string password, string newUser, string secretKey) {
            object[] results = this.Invoke("UpdateSStaffAccount", new object[] {
                        username,
                        password,
                        newUser,
                        secretKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSStaffAccountAsync(string username, string password, string newUser, string secretKey) {
            this.UpdateSStaffAccountAsync(username, password, newUser, secretKey, null);
        }
        
        /// <remarks/>
        public void UpdateSStaffAccountAsync(string username, string password, string newUser, string secretKey, object userState) {
            if ((this.UpdateSStaffAccountOperationCompleted == null)) {
                this.UpdateSStaffAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSStaffAccountOperationCompleted);
            }
            this.InvokeAsync("UpdateSStaffAccount", new object[] {
                        username,
                        password,
                        newUser,
                        secretKey}, this.UpdateSStaffAccountOperationCompleted, userState);
        }
        
        private void OnUpdateSStaffAccountOperationCompleted(object arg) {
            if ((this.UpdateSStaffAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSStaffAccountCompleted(this, new UpdateSStaffAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateSStaffAccount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateSStaffAccount(string username, string password, string newUser, string newPassword, string email, bool isApproved, string secretKey) {
            object[] results = this.Invoke("CreateSStaffAccount", new object[] {
                        username,
                        password,
                        newUser,
                        newPassword,
                        email,
                        isApproved,
                        secretKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateSStaffAccountAsync(string username, string password, string newUser, string newPassword, string email, bool isApproved, string secretKey) {
            this.CreateSStaffAccountAsync(username, password, newUser, newPassword, email, isApproved, secretKey, null);
        }
        
        /// <remarks/>
        public void CreateSStaffAccountAsync(string username, string password, string newUser, string newPassword, string email, bool isApproved, string secretKey, object userState) {
            if ((this.CreateSStaffAccountOperationCompleted == null)) {
                this.CreateSStaffAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSStaffAccountOperationCompleted);
            }
            this.InvokeAsync("CreateSStaffAccount", new object[] {
                        username,
                        password,
                        newUser,
                        newPassword,
                        email,
                        isApproved,
                        secretKey}, this.CreateSStaffAccountOperationCompleted, userState);
        }
        
        private void OnCreateSStaffAccountOperationCompleted(object arg) {
            if ((this.CreateSStaffAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSStaffAccountCompleted(this, new CreateSStaffAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getSerialByPattern", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getSerialByPattern(string userName, string userPass, string pattern) {
            object[] results = this.Invoke("getSerialByPattern", new object[] {
                        userName,
                        userPass,
                        pattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getSerialByPatternAsync(string userName, string userPass, string pattern) {
            this.getSerialByPatternAsync(userName, userPass, pattern, null);
        }
        
        /// <remarks/>
        public void getSerialByPatternAsync(string userName, string userPass, string pattern, object userState) {
            if ((this.getSerialByPatternOperationCompleted == null)) {
                this.getSerialByPatternOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSerialByPatternOperationCompleted);
            }
            this.InvokeAsync("getSerialByPattern", new object[] {
                        userName,
                        userPass,
                        pattern}, this.getSerialByPatternOperationCompleted, userState);
        }
        
        private void OngetSerialByPatternOperationCompleted(object arg) {
            if ((this.getSerialByPatternCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSerialByPatternCompleted(this, new getSerialByPatternCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getPublishInvs", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getPublishInvs(string userName, string userPass) {
            object[] results = this.Invoke("getPublishInvs", new object[] {
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getPublishInvsAsync(string userName, string userPass) {
            this.getPublishInvsAsync(userName, userPass, null);
        }
        
        /// <remarks/>
        public void getPublishInvsAsync(string userName, string userPass, object userState) {
            if ((this.getPublishInvsOperationCompleted == null)) {
                this.getPublishInvsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPublishInvsOperationCompleted);
            }
            this.InvokeAsync("getPublishInvs", new object[] {
                        userName,
                        userPass}, this.getPublishInvsOperationCompleted, userState);
        }
        
        private void OngetPublishInvsOperationCompleted(object arg) {
            if ((this.getPublishInvsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPublishInvsCompleted(this, new getPublishInvsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReplaceInvoiceNoPublish", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReplaceInvoiceNoPublish(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert, string pattern, string serial, string OldPattern) {
            object[] results = this.Invoke("ReplaceInvoiceNoPublish", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        convert,
                        pattern,
                        serial,
                        OldPattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReplaceInvoiceNoPublishAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, System.Nullable<int> convert, string pattern, string serial, string OldPattern) {
            this.ReplaceInvoiceNoPublishAsync(Account, ACpass, xmlInvData, username, pass, fkey, convert, pattern, serial, OldPattern, null);
        }
        
        /// <remarks/>
        public void ReplaceInvoiceNoPublishAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, System.Nullable<int> convert, string pattern, string serial, string OldPattern, object userState) {
            if ((this.ReplaceInvoiceNoPublishOperationCompleted == null)) {
                this.ReplaceInvoiceNoPublishOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplaceInvoiceNoPublishOperationCompleted);
            }
            this.InvokeAsync("ReplaceInvoiceNoPublish", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        convert,
                        pattern,
                        serial,
                        OldPattern}, this.ReplaceInvoiceNoPublishOperationCompleted, userState);
        }
        
        private void OnReplaceInvoiceNoPublishOperationCompleted(object arg) {
            if ((this.ReplaceInvoiceNoPublishCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplaceInvoiceNoPublishCompleted(this, new ReplaceInvoiceNoPublishCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdjustInvoiceNoPublish", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdjustInvoiceNoPublish(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert, string pattern, string serial, string OldPattern) {
            object[] results = this.Invoke("AdjustInvoiceNoPublish", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        convert,
                        pattern,
                        serial,
                        OldPattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustInvoiceNoPublishAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, System.Nullable<int> convert, string pattern, string serial, string OldPattern) {
            this.AdjustInvoiceNoPublishAsync(Account, ACpass, xmlInvData, username, pass, fkey, convert, pattern, serial, OldPattern, null);
        }
        
        /// <remarks/>
        public void AdjustInvoiceNoPublishAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, System.Nullable<int> convert, string pattern, string serial, string OldPattern, object userState) {
            if ((this.AdjustInvoiceNoPublishOperationCompleted == null)) {
                this.AdjustInvoiceNoPublishOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustInvoiceNoPublishOperationCompleted);
            }
            this.InvokeAsync("AdjustInvoiceNoPublish", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        convert,
                        pattern,
                        serial,
                        OldPattern}, this.AdjustInvoiceNoPublishOperationCompleted, userState);
        }
        
        private void OnAdjustInvoiceNoPublishOperationCompleted(object arg) {
            if ((this.AdjustInvoiceNoPublishCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustInvoiceNoPublishCompleted(this, new AdjustInvoiceNoPublishCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReplaceInvoiceNoPublishExtend", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReplaceInvoiceNoPublishExtend(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert, string pattern, string serial, string OldPattern) {
            object[] results = this.Invoke("ReplaceInvoiceNoPublishExtend", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        convert,
                        pattern,
                        serial,
                        OldPattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReplaceInvoiceNoPublishExtendAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, System.Nullable<int> convert, string pattern, string serial, string OldPattern) {
            this.ReplaceInvoiceNoPublishExtendAsync(Account, ACpass, xmlInvData, username, pass, fkey, convert, pattern, serial, OldPattern, null);
        }
        
        /// <remarks/>
        public void ReplaceInvoiceNoPublishExtendAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, System.Nullable<int> convert, string pattern, string serial, string OldPattern, object userState) {
            if ((this.ReplaceInvoiceNoPublishExtendOperationCompleted == null)) {
                this.ReplaceInvoiceNoPublishExtendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplaceInvoiceNoPublishExtendOperationCompleted);
            }
            this.InvokeAsync("ReplaceInvoiceNoPublishExtend", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        convert,
                        pattern,
                        serial,
                        OldPattern}, this.ReplaceInvoiceNoPublishExtendOperationCompleted, userState);
        }
        
        private void OnReplaceInvoiceNoPublishExtendOperationCompleted(object arg) {
            if ((this.ReplaceInvoiceNoPublishExtendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplaceInvoiceNoPublishExtendCompleted(this, new ReplaceInvoiceNoPublishExtendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdjustInvoiceNoPublishExtend", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdjustInvoiceNoPublishExtend(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert, string pattern, string serial, string OldPattern) {
            object[] results = this.Invoke("AdjustInvoiceNoPublishExtend", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        convert,
                        pattern,
                        serial,
                        OldPattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustInvoiceNoPublishExtendAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, System.Nullable<int> convert, string pattern, string serial, string OldPattern) {
            this.AdjustInvoiceNoPublishExtendAsync(Account, ACpass, xmlInvData, username, pass, fkey, convert, pattern, serial, OldPattern, null);
        }
        
        /// <remarks/>
        public void AdjustInvoiceNoPublishExtendAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, System.Nullable<int> convert, string pattern, string serial, string OldPattern, object userState) {
            if ((this.AdjustInvoiceNoPublishExtendOperationCompleted == null)) {
                this.AdjustInvoiceNoPublishExtendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustInvoiceNoPublishExtendOperationCompleted);
            }
            this.InvokeAsync("AdjustInvoiceNoPublishExtend", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        convert,
                        pattern,
                        serial,
                        OldPattern}, this.AdjustInvoiceNoPublishExtendOperationCompleted, userState);
        }
        
        private void OnAdjustInvoiceNoPublishExtendOperationCompleted(object arg) {
            if ((this.AdjustInvoiceNoPublishExtendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustInvoiceNoPublishExtendCompleted(this, new AdjustInvoiceNoPublishExtendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdjustInvoiceMulti", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdjustInvoiceMulti(string Account, string ACpass, string xmlInvData, string username, string pass, string fkeys, string AttachFile, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert, string pattern, string serial) {
            object[] results = this.Invoke("AdjustInvoiceMulti", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkeys,
                        AttachFile,
                        convert,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustInvoiceMultiAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkeys, string AttachFile, System.Nullable<int> convert, string pattern, string serial) {
            this.AdjustInvoiceMultiAsync(Account, ACpass, xmlInvData, username, pass, fkeys, AttachFile, convert, pattern, serial, null);
        }
        
        /// <remarks/>
        public void AdjustInvoiceMultiAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkeys, string AttachFile, System.Nullable<int> convert, string pattern, string serial, object userState) {
            if ((this.AdjustInvoiceMultiOperationCompleted == null)) {
                this.AdjustInvoiceMultiOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustInvoiceMultiOperationCompleted);
            }
            this.InvokeAsync("AdjustInvoiceMulti", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkeys,
                        AttachFile,
                        convert,
                        pattern,
                        serial}, this.AdjustInvoiceMultiOperationCompleted, userState);
        }
        
        private void OnAdjustInvoiceMultiOperationCompleted(object arg) {
            if ((this.AdjustInvoiceMultiCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustInvoiceMultiCompleted(this, new AdjustInvoiceMultiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportAttachmentByNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportAttachmentByNo(string Account, string ACpass, string username, string pass, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytes, string pattern, string serial, int no) {
            object[] results = this.Invoke("ImportAttachmentByNo", new object[] {
                        Account,
                        ACpass,
                        username,
                        pass,
                        bytes,
                        pattern,
                        serial,
                        no});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportAttachmentByNoAsync(string Account, string ACpass, string username, string pass, byte[] bytes, string pattern, string serial, int no) {
            this.ImportAttachmentByNoAsync(Account, ACpass, username, pass, bytes, pattern, serial, no, null);
        }
        
        /// <remarks/>
        public void ImportAttachmentByNoAsync(string Account, string ACpass, string username, string pass, byte[] bytes, string pattern, string serial, int no, object userState) {
            if ((this.ImportAttachmentByNoOperationCompleted == null)) {
                this.ImportAttachmentByNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportAttachmentByNoOperationCompleted);
            }
            this.InvokeAsync("ImportAttachmentByNo", new object[] {
                        Account,
                        ACpass,
                        username,
                        pass,
                        bytes,
                        pattern,
                        serial,
                        no}, this.ImportAttachmentByNoOperationCompleted, userState);
        }
        
        private void OnImportAttachmentByNoOperationCompleted(object arg) {
            if ((this.ImportAttachmentByNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportAttachmentByNoCompleted(this, new ImportAttachmentByNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFile(string userName, string userPass, string fkey, string pattern) {
            object[] results = this.Invoke("GetFile", new object[] {
                        userName,
                        userPass,
                        fkey,
                        pattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileAsync(string userName, string userPass, string fkey, string pattern) {
            this.GetFileAsync(userName, userPass, fkey, pattern, null);
        }
        
        /// <remarks/>
        public void GetFileAsync(string userName, string userPass, string fkey, string pattern, object userState) {
            if ((this.GetFileOperationCompleted == null)) {
                this.GetFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileOperationCompleted);
            }
            this.InvokeAsync("GetFile", new object[] {
                        userName,
                        userPass,
                        fkey,
                        pattern}, this.GetFileOperationCompleted, userState);
        }
        
        private void OnGetFileOperationCompleted(object arg) {
            if ((this.GetFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileCompleted(this, new GetFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReplaceAssignedNoNewPattern", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReplaceAssignedNoNewPattern(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string Attachfile, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert, string pattern, string serial, string OldPattern) {
            object[] results = this.Invoke("ReplaceAssignedNoNewPattern", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        Attachfile,
                        convert,
                        pattern,
                        serial,
                        OldPattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReplaceAssignedNoNewPatternAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string Attachfile, System.Nullable<int> convert, string pattern, string serial, string OldPattern) {
            this.ReplaceAssignedNoNewPatternAsync(Account, ACpass, xmlInvData, username, pass, fkey, Attachfile, convert, pattern, serial, OldPattern, null);
        }
        
        /// <remarks/>
        public void ReplaceAssignedNoNewPatternAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string Attachfile, System.Nullable<int> convert, string pattern, string serial, string OldPattern, object userState) {
            if ((this.ReplaceAssignedNoNewPatternOperationCompleted == null)) {
                this.ReplaceAssignedNoNewPatternOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplaceAssignedNoNewPatternOperationCompleted);
            }
            this.InvokeAsync("ReplaceAssignedNoNewPattern", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        Attachfile,
                        convert,
                        pattern,
                        serial,
                        OldPattern}, this.ReplaceAssignedNoNewPatternOperationCompleted, userState);
        }
        
        private void OnReplaceAssignedNoNewPatternOperationCompleted(object arg) {
            if ((this.ReplaceAssignedNoNewPatternCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplaceAssignedNoNewPatternCompleted(this, new ReplaceAssignedNoNewPatternCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdjustAssignedNoNewPattern", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdjustAssignedNoNewPattern(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert, string pattern, string serial, string OldPattern) {
            object[] results = this.Invoke("AdjustAssignedNoNewPattern", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        AttachFile,
                        convert,
                        pattern,
                        serial,
                        OldPattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustAssignedNoNewPatternAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, System.Nullable<int> convert, string pattern, string serial, string OldPattern) {
            this.AdjustAssignedNoNewPatternAsync(Account, ACpass, xmlInvData, username, pass, fkey, AttachFile, convert, pattern, serial, OldPattern, null);
        }
        
        /// <remarks/>
        public void AdjustAssignedNoNewPatternAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, System.Nullable<int> convert, string pattern, string serial, string OldPattern, object userState) {
            if ((this.AdjustAssignedNoNewPatternOperationCompleted == null)) {
                this.AdjustAssignedNoNewPatternOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustAssignedNoNewPatternOperationCompleted);
            }
            this.InvokeAsync("AdjustAssignedNoNewPattern", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        AttachFile,
                        convert,
                        pattern,
                        serial,
                        OldPattern}, this.AdjustAssignedNoNewPatternOperationCompleted, userState);
        }
        
        private void OnAdjustAssignedNoNewPatternOperationCompleted(object arg) {
            if ((this.AdjustAssignedNoNewPatternCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustAssignedNoNewPatternCompleted(this, new AdjustAssignedNoNewPatternCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdjustInvoiceNewPattern", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdjustInvoiceNewPattern(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert, string pattern, string serial, string OldPattern) {
            object[] results = this.Invoke("AdjustInvoiceNewPattern", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        AttachFile,
                        convert,
                        pattern,
                        serial,
                        OldPattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustInvoiceNewPatternAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, System.Nullable<int> convert, string pattern, string serial, string OldPattern) {
            this.AdjustInvoiceNewPatternAsync(Account, ACpass, xmlInvData, username, pass, fkey, AttachFile, convert, pattern, serial, OldPattern, null);
        }
        
        /// <remarks/>
        public void AdjustInvoiceNewPatternAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, System.Nullable<int> convert, string pattern, string serial, string OldPattern, object userState) {
            if ((this.AdjustInvoiceNewPatternOperationCompleted == null)) {
                this.AdjustInvoiceNewPatternOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustInvoiceNewPatternOperationCompleted);
            }
            this.InvokeAsync("AdjustInvoiceNewPattern", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        AttachFile,
                        convert,
                        pattern,
                        serial,
                        OldPattern}, this.AdjustInvoiceNewPatternOperationCompleted, userState);
        }
        
        private void OnAdjustInvoiceNewPatternOperationCompleted(object arg) {
            if ((this.AdjustInvoiceNewPatternCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustInvoiceNewPatternCompleted(this, new AdjustInvoiceNewPatternCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReplaceInvoiceNewPattern", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReplaceInvoiceNewPattern(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string Attachfile, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert, string pattern, string serial, string OldPattern) {
            object[] results = this.Invoke("ReplaceInvoiceNewPattern", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        Attachfile,
                        convert,
                        pattern,
                        serial,
                        OldPattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReplaceInvoiceNewPatternAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string Attachfile, System.Nullable<int> convert, string pattern, string serial, string OldPattern) {
            this.ReplaceInvoiceNewPatternAsync(Account, ACpass, xmlInvData, username, pass, fkey, Attachfile, convert, pattern, serial, OldPattern, null);
        }
        
        /// <remarks/>
        public void ReplaceInvoiceNewPatternAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string Attachfile, System.Nullable<int> convert, string pattern, string serial, string OldPattern, object userState) {
            if ((this.ReplaceInvoiceNewPatternOperationCompleted == null)) {
                this.ReplaceInvoiceNewPatternOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplaceInvoiceNewPatternOperationCompleted);
            }
            this.InvokeAsync("ReplaceInvoiceNewPattern", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        Attachfile,
                        convert,
                        pattern,
                        serial,
                        OldPattern}, this.ReplaceInvoiceNewPatternOperationCompleted, userState);
        }
        
        private void OnReplaceInvoiceNewPatternOperationCompleted(object arg) {
            if ((this.ReplaceInvoiceNewPatternCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplaceInvoiceNewPatternCompleted(this, new ReplaceInvoiceNewPatternCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportAttachmentByFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportAttachmentByFkey(string Account, string ACpass, string username, string pass, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bytes, string fkey) {
            object[] results = this.Invoke("ImportAttachmentByFkey", new object[] {
                        Account,
                        ACpass,
                        username,
                        pass,
                        bytes,
                        fkey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportAttachmentByFkeyAsync(string Account, string ACpass, string username, string pass, byte[] bytes, string fkey) {
            this.ImportAttachmentByFkeyAsync(Account, ACpass, username, pass, bytes, fkey, null);
        }
        
        /// <remarks/>
        public void ImportAttachmentByFkeyAsync(string Account, string ACpass, string username, string pass, byte[] bytes, string fkey, object userState) {
            if ((this.ImportAttachmentByFkeyOperationCompleted == null)) {
                this.ImportAttachmentByFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportAttachmentByFkeyOperationCompleted);
            }
            this.InvokeAsync("ImportAttachmentByFkey", new object[] {
                        Account,
                        ACpass,
                        username,
                        pass,
                        bytes,
                        fkey}, this.ImportAttachmentByFkeyOperationCompleted, userState);
        }
        
        private void OnImportAttachmentByFkeyOperationCompleted(object arg) {
            if ((this.ImportAttachmentByFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportAttachmentByFkeyCompleted(this, new ImportAttachmentByFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MessageReceived", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MessageReceived(int transactionId, int Comid, string Otp) {
            object[] results = this.Invoke("MessageReceived", new object[] {
                        transactionId,
                        Comid,
                        Otp});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MessageReceivedAsync(int transactionId, int Comid, string Otp) {
            this.MessageReceivedAsync(transactionId, Comid, Otp, null);
        }
        
        /// <remarks/>
        public void MessageReceivedAsync(int transactionId, int Comid, string Otp, object userState) {
            if ((this.MessageReceivedOperationCompleted == null)) {
                this.MessageReceivedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMessageReceivedOperationCompleted);
            }
            this.InvokeAsync("MessageReceived", new object[] {
                        transactionId,
                        Comid,
                        Otp}, this.MessageReceivedOperationCompleted, userState);
        }
        
        private void OnMessageReceivedOperationCompleted(object arg) {
            if ((this.MessageReceivedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MessageReceivedCompleted(this, new MessageReceivedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrySendInv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RetrySendInv(string invTokens, int Comid, string Otp) {
            object[] results = this.Invoke("RetrySendInv", new object[] {
                        invTokens,
                        Comid,
                        Otp});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RetrySendInvAsync(string invTokens, int Comid, string Otp) {
            this.RetrySendInvAsync(invTokens, Comid, Otp, null);
        }
        
        /// <remarks/>
        public void RetrySendInvAsync(string invTokens, int Comid, string Otp, object userState) {
            if ((this.RetrySendInvOperationCompleted == null)) {
                this.RetrySendInvOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrySendInvOperationCompleted);
            }
            this.InvokeAsync("RetrySendInv", new object[] {
                        invTokens,
                        Comid,
                        Otp}, this.RetrySendInvOperationCompleted, userState);
        }
        
        private void OnRetrySendInvOperationCompleted(object arg) {
            if ((this.RetrySendInvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrySendInvCompleted(this, new RetrySendInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/confirmPaymentFkeyPattern", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string confirmPaymentFkeyPattern(string lstFkey, string userName, string userPass, string pattern, string serial) {
            object[] results = this.Invoke("confirmPaymentFkeyPattern", new object[] {
                        lstFkey,
                        userName,
                        userPass,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void confirmPaymentFkeyPatternAsync(string lstFkey, string userName, string userPass, string pattern, string serial) {
            this.confirmPaymentFkeyPatternAsync(lstFkey, userName, userPass, pattern, serial, null);
        }
        
        /// <remarks/>
        public void confirmPaymentFkeyPatternAsync(string lstFkey, string userName, string userPass, string pattern, string serial, object userState) {
            if ((this.confirmPaymentFkeyPatternOperationCompleted == null)) {
                this.confirmPaymentFkeyPatternOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconfirmPaymentFkeyPatternOperationCompleted);
            }
            this.InvokeAsync("confirmPaymentFkeyPattern", new object[] {
                        lstFkey,
                        userName,
                        userPass,
                        pattern,
                        serial}, this.confirmPaymentFkeyPatternOperationCompleted, userState);
        }
        
        private void OnconfirmPaymentFkeyPatternOperationCompleted(object arg) {
            if ((this.confirmPaymentFkeyPatternCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.confirmPaymentFkeyPatternCompleted(this, new confirmPaymentFkeyPatternCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UnConfirmPaymentFkeyPattern", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UnConfirmPaymentFkeyPattern(string lstFkey, string userName, string userPass, string pattern, string serial) {
            object[] results = this.Invoke("UnConfirmPaymentFkeyPattern", new object[] {
                        lstFkey,
                        userName,
                        userPass,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UnConfirmPaymentFkeyPatternAsync(string lstFkey, string userName, string userPass, string pattern, string serial) {
            this.UnConfirmPaymentFkeyPatternAsync(lstFkey, userName, userPass, pattern, serial, null);
        }
        
        /// <remarks/>
        public void UnConfirmPaymentFkeyPatternAsync(string lstFkey, string userName, string userPass, string pattern, string serial, object userState) {
            if ((this.UnConfirmPaymentFkeyPatternOperationCompleted == null)) {
                this.UnConfirmPaymentFkeyPatternOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnConfirmPaymentFkeyPatternOperationCompleted);
            }
            this.InvokeAsync("UnConfirmPaymentFkeyPattern", new object[] {
                        lstFkey,
                        userName,
                        userPass,
                        pattern,
                        serial}, this.UnConfirmPaymentFkeyPatternOperationCompleted, userState);
        }
        
        private void OnUnConfirmPaymentFkeyPatternOperationCompleted(object arg) {
            if ((this.UnConfirmPaymentFkeyPatternCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnConfirmPaymentFkeyPatternCompleted(this, new UnConfirmPaymentFkeyPatternCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdjustReplaceInvSmartCA", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdjustReplaceInvSmartCA(string Account, string ACpass, string xmlInvData, string username, string password, int type, string pattern, string serial) {
            object[] results = this.Invoke("AdjustReplaceInvSmartCA", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        type,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustReplaceInvSmartCAAsync(string Account, string ACpass, string xmlInvData, string username, string password, int type, string pattern, string serial) {
            this.AdjustReplaceInvSmartCAAsync(Account, ACpass, xmlInvData, username, password, type, pattern, serial, null);
        }
        
        /// <remarks/>
        public void AdjustReplaceInvSmartCAAsync(string Account, string ACpass, string xmlInvData, string username, string password, int type, string pattern, string serial, object userState) {
            if ((this.AdjustReplaceInvSmartCAOperationCompleted == null)) {
                this.AdjustReplaceInvSmartCAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustReplaceInvSmartCAOperationCompleted);
            }
            this.InvokeAsync("AdjustReplaceInvSmartCA", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        type,
                        pattern,
                        serial}, this.AdjustReplaceInvSmartCAOperationCompleted, userState);
        }
        
        private void OnAdjustReplaceInvSmartCAOperationCompleted(object arg) {
            if ((this.AdjustReplaceInvSmartCACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustReplaceInvSmartCACompleted(this, new AdjustReplaceInvSmartCACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/cancelInvDetailFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string cancelInvDetailFkey(string Account, string ACpass, string lstFkey, string userName, string userPass, bool checkPayment) {
            object[] results = this.Invoke("cancelInvDetailFkey", new object[] {
                        Account,
                        ACpass,
                        lstFkey,
                        userName,
                        userPass,
                        checkPayment});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void cancelInvDetailFkeyAsync(string Account, string ACpass, string lstFkey, string userName, string userPass, bool checkPayment) {
            this.cancelInvDetailFkeyAsync(Account, ACpass, lstFkey, userName, userPass, checkPayment, null);
        }
        
        /// <remarks/>
        public void cancelInvDetailFkeyAsync(string Account, string ACpass, string lstFkey, string userName, string userPass, bool checkPayment, object userState) {
            if ((this.cancelInvDetailFkeyOperationCompleted == null)) {
                this.cancelInvDetailFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelInvDetailFkeyOperationCompleted);
            }
            this.InvokeAsync("cancelInvDetailFkey", new object[] {
                        Account,
                        ACpass,
                        lstFkey,
                        userName,
                        userPass,
                        checkPayment}, this.cancelInvDetailFkeyOperationCompleted, userState);
        }
        
        private void OncancelInvDetailFkeyOperationCompleted(object arg) {
            if ((this.cancelInvDetailFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelInvDetailFkeyCompleted(this, new cancelInvDetailFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UnconfirmPaymentDetailFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UnconfirmPaymentDetailFkey(string lstFkey, string userName, string userPass) {
            object[] results = this.Invoke("UnconfirmPaymentDetailFkey", new object[] {
                        lstFkey,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UnconfirmPaymentDetailFkeyAsync(string lstFkey, string userName, string userPass) {
            this.UnconfirmPaymentDetailFkeyAsync(lstFkey, userName, userPass, null);
        }
        
        /// <remarks/>
        public void UnconfirmPaymentDetailFkeyAsync(string lstFkey, string userName, string userPass, object userState) {
            if ((this.UnconfirmPaymentDetailFkeyOperationCompleted == null)) {
                this.UnconfirmPaymentDetailFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnconfirmPaymentDetailFkeyOperationCompleted);
            }
            this.InvokeAsync("UnconfirmPaymentDetailFkey", new object[] {
                        lstFkey,
                        userName,
                        userPass}, this.UnconfirmPaymentDetailFkeyOperationCompleted, userState);
        }
        
        private void OnUnconfirmPaymentDetailFkeyOperationCompleted(object arg) {
            if ((this.UnconfirmPaymentDetailFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnconfirmPaymentDetailFkeyCompleted(this, new UnconfirmPaymentDetailFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHashWithOutInvToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetHashWithOutInvToken(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string oldPattern, string oldSerial, decimal oldNo, string strOldArisingDate, int oldInvType, string pattern, string serial, int convert) {
            object[] results = this.Invoke("GetHashWithOutInvToken", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        serialCert,
                        type,
                        oldPattern,
                        oldSerial,
                        oldNo,
                        strOldArisingDate,
                        oldInvType,
                        pattern,
                        serial,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHashWithOutInvTokenAsync(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string oldPattern, string oldSerial, decimal oldNo, string strOldArisingDate, int oldInvType, string pattern, string serial, int convert) {
            this.GetHashWithOutInvTokenAsync(Account, ACpass, xmlInvData, username, password, serialCert, type, oldPattern, oldSerial, oldNo, strOldArisingDate, oldInvType, pattern, serial, convert, null);
        }
        
        /// <remarks/>
        public void GetHashWithOutInvTokenAsync(
                    string Account, 
                    string ACpass, 
                    string xmlInvData, 
                    string username, 
                    string password, 
                    string serialCert, 
                    int type, 
                    string oldPattern, 
                    string oldSerial, 
                    decimal oldNo, 
                    string strOldArisingDate, 
                    int oldInvType, 
                    string pattern, 
                    string serial, 
                    int convert, 
                    object userState) {
            if ((this.GetHashWithOutInvTokenOperationCompleted == null)) {
                this.GetHashWithOutInvTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHashWithOutInvTokenOperationCompleted);
            }
            this.InvokeAsync("GetHashWithOutInvToken", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        serialCert,
                        type,
                        oldPattern,
                        oldSerial,
                        oldNo,
                        strOldArisingDate,
                        oldInvType,
                        pattern,
                        serial,
                        convert}, this.GetHashWithOutInvTokenOperationCompleted, userState);
        }
        
        private void OnGetHashWithOutInvTokenOperationCompleted(object arg) {
            if ((this.GetHashWithOutInvTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHashWithOutInvTokenCompleted(this, new GetHashWithOutInvTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHashWithOutInvSmartCA", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetHashWithOutInvSmartCA(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string oldPattern, string oldSerial, decimal oldNo, string strOldArisingDate, int oldInvType, string pattern, string serial, int convert) {
            object[] results = this.Invoke("GetHashWithOutInvSmartCA", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        serialCert,
                        type,
                        oldPattern,
                        oldSerial,
                        oldNo,
                        strOldArisingDate,
                        oldInvType,
                        pattern,
                        serial,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHashWithOutInvSmartCAAsync(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string oldPattern, string oldSerial, decimal oldNo, string strOldArisingDate, int oldInvType, string pattern, string serial, int convert) {
            this.GetHashWithOutInvSmartCAAsync(Account, ACpass, xmlInvData, username, password, serialCert, type, oldPattern, oldSerial, oldNo, strOldArisingDate, oldInvType, pattern, serial, convert, null);
        }
        
        /// <remarks/>
        public void GetHashWithOutInvSmartCAAsync(
                    string Account, 
                    string ACpass, 
                    string xmlInvData, 
                    string username, 
                    string password, 
                    string serialCert, 
                    int type, 
                    string oldPattern, 
                    string oldSerial, 
                    decimal oldNo, 
                    string strOldArisingDate, 
                    int oldInvType, 
                    string pattern, 
                    string serial, 
                    int convert, 
                    object userState) {
            if ((this.GetHashWithOutInvSmartCAOperationCompleted == null)) {
                this.GetHashWithOutInvSmartCAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHashWithOutInvSmartCAOperationCompleted);
            }
            this.InvokeAsync("GetHashWithOutInvSmartCA", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        serialCert,
                        type,
                        oldPattern,
                        oldSerial,
                        oldNo,
                        strOldArisingDate,
                        oldInvType,
                        pattern,
                        serial,
                        convert}, this.GetHashWithOutInvSmartCAOperationCompleted, userState);
        }
        
        private void OnGetHashWithOutInvSmartCAOperationCompleted(object arg) {
            if ((this.GetHashWithOutInvSmartCACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHashWithOutInvSmartCACompleted(this, new GetHashWithOutInvSmartCACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdjustReplaceWithOutInvToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdjustReplaceWithOutInvToken(string Account, string ACpass, string xmlInvData, string username, string password, int type, string pattern, string serial) {
            object[] results = this.Invoke("AdjustReplaceWithOutInvToken", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        type,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustReplaceWithOutInvTokenAsync(string Account, string ACpass, string xmlInvData, string username, string password, int type, string pattern, string serial) {
            this.AdjustReplaceWithOutInvTokenAsync(Account, ACpass, xmlInvData, username, password, type, pattern, serial, null);
        }
        
        /// <remarks/>
        public void AdjustReplaceWithOutInvTokenAsync(string Account, string ACpass, string xmlInvData, string username, string password, int type, string pattern, string serial, object userState) {
            if ((this.AdjustReplaceWithOutInvTokenOperationCompleted == null)) {
                this.AdjustReplaceWithOutInvTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustReplaceWithOutInvTokenOperationCompleted);
            }
            this.InvokeAsync("AdjustReplaceWithOutInvToken", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        type,
                        pattern,
                        serial}, this.AdjustReplaceWithOutInvTokenOperationCompleted, userState);
        }
        
        private void OnAdjustReplaceWithOutInvTokenOperationCompleted(object arg) {
            if ((this.AdjustReplaceWithOutInvTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustReplaceWithOutInvTokenCompleted(this, new AdjustReplaceWithOutInvTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdjustReplaceWithOutInvSmartCA", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdjustReplaceWithOutInvSmartCA(string Account, string ACpass, string xmlInvData, string username, string password, int type, string pattern, string serial) {
            object[] results = this.Invoke("AdjustReplaceWithOutInvSmartCA", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        type,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustReplaceWithOutInvSmartCAAsync(string Account, string ACpass, string xmlInvData, string username, string password, int type, string pattern, string serial) {
            this.AdjustReplaceWithOutInvSmartCAAsync(Account, ACpass, xmlInvData, username, password, type, pattern, serial, null);
        }
        
        /// <remarks/>
        public void AdjustReplaceWithOutInvSmartCAAsync(string Account, string ACpass, string xmlInvData, string username, string password, int type, string pattern, string serial, object userState) {
            if ((this.AdjustReplaceWithOutInvSmartCAOperationCompleted == null)) {
                this.AdjustReplaceWithOutInvSmartCAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustReplaceWithOutInvSmartCAOperationCompleted);
            }
            this.InvokeAsync("AdjustReplaceWithOutInvSmartCA", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        type,
                        pattern,
                        serial}, this.AdjustReplaceWithOutInvSmartCAOperationCompleted, userState);
        }
        
        private void OnAdjustReplaceWithOutInvSmartCAOperationCompleted(object arg) {
            if ((this.AdjustReplaceWithOutInvSmartCACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustReplaceWithOutInvSmartCACompleted(this, new AdjustReplaceWithOutInvSmartCACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCompanyConfig", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getCompanyConfig(string Account, string ACpass, string configKey) {
            object[] results = this.Invoke("getCompanyConfig", new object[] {
                        Account,
                        ACpass,
                        configKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getCompanyConfigAsync(string Account, string ACpass, string configKey) {
            this.getCompanyConfigAsync(Account, ACpass, configKey, null);
        }
        
        /// <remarks/>
        public void getCompanyConfigAsync(string Account, string ACpass, string configKey, object userState) {
            if ((this.getCompanyConfigOperationCompleted == null)) {
                this.getCompanyConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCompanyConfigOperationCompleted);
            }
            this.InvokeAsync("getCompanyConfig", new object[] {
                        Account,
                        ACpass,
                        configKey}, this.getCompanyConfigOperationCompleted, userState);
        }
        
        private void OngetCompanyConfigOperationCompleted(object arg) {
            if ((this.getCompanyConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCompanyConfigCompleted(this, new getCompanyConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReplaceCTTAction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReplaceCTTAction(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string Attachfile, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert, string pattern, string serial) {
            object[] results = this.Invoke("ReplaceCTTAction", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        Attachfile,
                        convert,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReplaceCTTActionAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string Attachfile, System.Nullable<int> convert, string pattern, string serial) {
            this.ReplaceCTTActionAsync(Account, ACpass, xmlInvData, username, pass, fkey, Attachfile, convert, pattern, serial, null);
        }
        
        /// <remarks/>
        public void ReplaceCTTActionAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string Attachfile, System.Nullable<int> convert, string pattern, string serial, object userState) {
            if ((this.ReplaceCTTActionOperationCompleted == null)) {
                this.ReplaceCTTActionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplaceCTTActionOperationCompleted);
            }
            this.InvokeAsync("ReplaceCTTAction", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        Attachfile,
                        convert,
                        pattern,
                        serial}, this.ReplaceCTTActionOperationCompleted, userState);
        }
        
        private void OnReplaceCTTActionOperationCompleted(object arg) {
            if ((this.ReplaceCTTActionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplaceCTTActionCompleted(this, new ReplaceCTTActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getHashCTTTokenReplace", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getHashCTTTokenReplace(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert) {
            object[] results = this.Invoke("getHashCTTTokenReplace", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        serialCert,
                        type,
                        invToken,
                        pattern,
                        serial,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getHashCTTTokenReplaceAsync(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert) {
            this.getHashCTTTokenReplaceAsync(Account, ACpass, xmlInvData, username, password, serialCert, type, invToken, pattern, serial, convert, null);
        }
        
        /// <remarks/>
        public void getHashCTTTokenReplaceAsync(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert, object userState) {
            if ((this.getHashCTTTokenReplaceOperationCompleted == null)) {
                this.getHashCTTTokenReplaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHashCTTTokenReplaceOperationCompleted);
            }
            this.InvokeAsync("getHashCTTTokenReplace", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        serialCert,
                        type,
                        invToken,
                        pattern,
                        serial,
                        convert}, this.getHashCTTTokenReplaceOperationCompleted, userState);
        }
        
        private void OngetHashCTTTokenReplaceOperationCompleted(object arg) {
            if ((this.getHashCTTTokenReplaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getHashCTTTokenReplaceCompleted(this, new getHashCTTTokenReplaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHashCTTSmartCAReplace", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetHashCTTSmartCAReplace(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert) {
            object[] results = this.Invoke("GetHashCTTSmartCAReplace", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        serialCert,
                        type,
                        invToken,
                        pattern,
                        serial,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHashCTTSmartCAReplaceAsync(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert) {
            this.GetHashCTTSmartCAReplaceAsync(Account, ACpass, xmlInvData, username, password, serialCert, type, invToken, pattern, serial, convert, null);
        }
        
        /// <remarks/>
        public void GetHashCTTSmartCAReplaceAsync(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert, object userState) {
            if ((this.GetHashCTTSmartCAReplaceOperationCompleted == null)) {
                this.GetHashCTTSmartCAReplaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHashCTTSmartCAReplaceOperationCompleted);
            }
            this.InvokeAsync("GetHashCTTSmartCAReplace", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        serialCert,
                        type,
                        invToken,
                        pattern,
                        serial,
                        convert}, this.GetHashCTTSmartCAReplaceOperationCompleted, userState);
        }
        
        private void OnGetHashCTTSmartCAReplaceOperationCompleted(object arg) {
            if ((this.GetHashCTTSmartCAReplaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHashCTTSmartCAReplaceCompleted(this, new GetHashCTTSmartCAReplaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdjustReplaceCTTToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdjustReplaceCTTToken(string Account, string ACpass, string xmlInvData, string username, string password, string type, string pattern, string serial) {
            object[] results = this.Invoke("AdjustReplaceCTTToken", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        type,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustReplaceCTTTokenAsync(string Account, string ACpass, string xmlInvData, string username, string password, string type, string pattern, string serial) {
            this.AdjustReplaceCTTTokenAsync(Account, ACpass, xmlInvData, username, password, type, pattern, serial, null);
        }
        
        /// <remarks/>
        public void AdjustReplaceCTTTokenAsync(string Account, string ACpass, string xmlInvData, string username, string password, string type, string pattern, string serial, object userState) {
            if ((this.AdjustReplaceCTTTokenOperationCompleted == null)) {
                this.AdjustReplaceCTTTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustReplaceCTTTokenOperationCompleted);
            }
            this.InvokeAsync("AdjustReplaceCTTToken", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        type,
                        pattern,
                        serial}, this.AdjustReplaceCTTTokenOperationCompleted, userState);
        }
        
        private void OnAdjustReplaceCTTTokenOperationCompleted(object arg) {
            if ((this.AdjustReplaceCTTTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustReplaceCTTTokenCompleted(this, new AdjustReplaceCTTTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdjustReplaceCTTSmartCA", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdjustReplaceCTTSmartCA(string Account, string ACpass, string xmlInvData, string username, string password, int type, string pattern, string serial) {
            object[] results = this.Invoke("AdjustReplaceCTTSmartCA", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        type,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustReplaceCTTSmartCAAsync(string Account, string ACpass, string xmlInvData, string username, string password, int type, string pattern, string serial) {
            this.AdjustReplaceCTTSmartCAAsync(Account, ACpass, xmlInvData, username, password, type, pattern, serial, null);
        }
        
        /// <remarks/>
        public void AdjustReplaceCTTSmartCAAsync(string Account, string ACpass, string xmlInvData, string username, string password, int type, string pattern, string serial, object userState) {
            if ((this.AdjustReplaceCTTSmartCAOperationCompleted == null)) {
                this.AdjustReplaceCTTSmartCAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustReplaceCTTSmartCAOperationCompleted);
            }
            this.InvokeAsync("AdjustReplaceCTTSmartCA", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        type,
                        pattern,
                        serial}, this.AdjustReplaceCTTSmartCAOperationCompleted, userState);
        }
        
        private void OnAdjustReplaceCTTSmartCAOperationCompleted(object arg) {
            if ((this.AdjustReplaceCTTSmartCACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustReplaceCTTSmartCACompleted(this, new AdjustReplaceCTTSmartCACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/cancelInvCTT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string cancelInvCTT(string Account, string ACpass, string fkey, string functionName, string userName, string userPass, string note) {
            object[] results = this.Invoke("cancelInvCTT", new object[] {
                        Account,
                        ACpass,
                        fkey,
                        functionName,
                        userName,
                        userPass,
                        note});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void cancelInvCTTAsync(string Account, string ACpass, string fkey, string functionName, string userName, string userPass, string note) {
            this.cancelInvCTTAsync(Account, ACpass, fkey, functionName, userName, userPass, note, null);
        }
        
        /// <remarks/>
        public void cancelInvCTTAsync(string Account, string ACpass, string fkey, string functionName, string userName, string userPass, string note, object userState) {
            if ((this.cancelInvCTTOperationCompleted == null)) {
                this.cancelInvCTTOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelInvCTTOperationCompleted);
            }
            this.InvokeAsync("cancelInvCTT", new object[] {
                        Account,
                        ACpass,
                        fkey,
                        functionName,
                        userName,
                        userPass,
                        note}, this.cancelInvCTTOperationCompleted, userState);
        }
        
        private void OncancelInvCTTOperationCompleted(object arg) {
            if ((this.cancelInvCTTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelInvCTTCompleted(this, new cancelInvCTTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendInvMTTFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendInvMTTFkey(string Account, string ACpass, string lstFkey, string username, string password, string pattern, string serial, string serialCert) {
            object[] results = this.Invoke("SendInvMTTFkey", new object[] {
                        Account,
                        ACpass,
                        lstFkey,
                        username,
                        password,
                        pattern,
                        serial,
                        serialCert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendInvMTTFkeyAsync(string Account, string ACpass, string lstFkey, string username, string password, string pattern, string serial, string serialCert) {
            this.SendInvMTTFkeyAsync(Account, ACpass, lstFkey, username, password, pattern, serial, serialCert, null);
        }
        
        /// <remarks/>
        public void SendInvMTTFkeyAsync(string Account, string ACpass, string lstFkey, string username, string password, string pattern, string serial, string serialCert, object userState) {
            if ((this.SendInvMTTFkeyOperationCompleted == null)) {
                this.SendInvMTTFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendInvMTTFkeyOperationCompleted);
            }
            this.InvokeAsync("SendInvMTTFkey", new object[] {
                        Account,
                        ACpass,
                        lstFkey,
                        username,
                        password,
                        pattern,
                        serial,
                        serialCert}, this.SendInvMTTFkeyOperationCompleted, userState);
        }
        
        private void OnSendInvMTTFkeyOperationCompleted(object arg) {
            if ((this.SendInvMTTFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendInvMTTFkeyCompleted(this, new SendInvMTTFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHashInvMTTFkeyByToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetHashInvMTTFkeyByToken(string Account, string ACpass, string lstFkey, string username, string password, string pattern, string serial, string serialCert) {
            object[] results = this.Invoke("GetHashInvMTTFkeyByToken", new object[] {
                        Account,
                        ACpass,
                        lstFkey,
                        username,
                        password,
                        pattern,
                        serial,
                        serialCert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHashInvMTTFkeyByTokenAsync(string Account, string ACpass, string lstFkey, string username, string password, string pattern, string serial, string serialCert) {
            this.GetHashInvMTTFkeyByTokenAsync(Account, ACpass, lstFkey, username, password, pattern, serial, serialCert, null);
        }
        
        /// <remarks/>
        public void GetHashInvMTTFkeyByTokenAsync(string Account, string ACpass, string lstFkey, string username, string password, string pattern, string serial, string serialCert, object userState) {
            if ((this.GetHashInvMTTFkeyByTokenOperationCompleted == null)) {
                this.GetHashInvMTTFkeyByTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHashInvMTTFkeyByTokenOperationCompleted);
            }
            this.InvokeAsync("GetHashInvMTTFkeyByToken", new object[] {
                        Account,
                        ACpass,
                        lstFkey,
                        username,
                        password,
                        pattern,
                        serial,
                        serialCert}, this.GetHashInvMTTFkeyByTokenOperationCompleted, userState);
        }
        
        private void OnGetHashInvMTTFkeyByTokenOperationCompleted(object arg) {
            if ((this.GetHashInvMTTFkeyByTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHashInvMTTFkeyByTokenCompleted(this, new GetHashInvMTTFkeyByTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendInvMTTFkeyByToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendInvMTTFkeyByToken(string Account, string ACpass, string xml, string username, string password, string pattern, string serial) {
            object[] results = this.Invoke("SendInvMTTFkeyByToken", new object[] {
                        Account,
                        ACpass,
                        xml,
                        username,
                        password,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendInvMTTFkeyByTokenAsync(string Account, string ACpass, string xml, string username, string password, string pattern, string serial) {
            this.SendInvMTTFkeyByTokenAsync(Account, ACpass, xml, username, password, pattern, serial, null);
        }
        
        /// <remarks/>
        public void SendInvMTTFkeyByTokenAsync(string Account, string ACpass, string xml, string username, string password, string pattern, string serial, object userState) {
            if ((this.SendInvMTTFkeyByTokenOperationCompleted == null)) {
                this.SendInvMTTFkeyByTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendInvMTTFkeyByTokenOperationCompleted);
            }
            this.InvokeAsync("SendInvMTTFkeyByToken", new object[] {
                        Account,
                        ACpass,
                        xml,
                        username,
                        password,
                        pattern,
                        serial}, this.SendInvMTTFkeyByTokenOperationCompleted, userState);
        }
        
        private void OnSendInvMTTFkeyByTokenOperationCompleted(object arg) {
            if ((this.SendInvMTTFkeyByTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendInvMTTFkeyByTokenCompleted(this, new SendInvMTTFkeyByTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHashInvMTTFkeyBySmartCA", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetHashInvMTTFkeyBySmartCA(string Account, string ACpass, string lstFkey, string username, string password, string pattern, string serial, string serialCert) {
            object[] results = this.Invoke("GetHashInvMTTFkeyBySmartCA", new object[] {
                        Account,
                        ACpass,
                        lstFkey,
                        username,
                        password,
                        pattern,
                        serial,
                        serialCert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHashInvMTTFkeyBySmartCAAsync(string Account, string ACpass, string lstFkey, string username, string password, string pattern, string serial, string serialCert) {
            this.GetHashInvMTTFkeyBySmartCAAsync(Account, ACpass, lstFkey, username, password, pattern, serial, serialCert, null);
        }
        
        /// <remarks/>
        public void GetHashInvMTTFkeyBySmartCAAsync(string Account, string ACpass, string lstFkey, string username, string password, string pattern, string serial, string serialCert, object userState) {
            if ((this.GetHashInvMTTFkeyBySmartCAOperationCompleted == null)) {
                this.GetHashInvMTTFkeyBySmartCAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHashInvMTTFkeyBySmartCAOperationCompleted);
            }
            this.InvokeAsync("GetHashInvMTTFkeyBySmartCA", new object[] {
                        Account,
                        ACpass,
                        lstFkey,
                        username,
                        password,
                        pattern,
                        serial,
                        serialCert}, this.GetHashInvMTTFkeyBySmartCAOperationCompleted, userState);
        }
        
        private void OnGetHashInvMTTFkeyBySmartCAOperationCompleted(object arg) {
            if ((this.GetHashInvMTTFkeyBySmartCACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHashInvMTTFkeyBySmartCACompleted(this, new GetHashInvMTTFkeyBySmartCACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendInvMTTFkeyBySmartCA", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendInvMTTFkeyBySmartCA(string Account, string ACpass, string xml, string username, string password, string pattern, string serial) {
            object[] results = this.Invoke("SendInvMTTFkeyBySmartCA", new object[] {
                        Account,
                        ACpass,
                        xml,
                        username,
                        password,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendInvMTTFkeyBySmartCAAsync(string Account, string ACpass, string xml, string username, string password, string pattern, string serial) {
            this.SendInvMTTFkeyBySmartCAAsync(Account, ACpass, xml, username, password, pattern, serial, null);
        }
        
        /// <remarks/>
        public void SendInvMTTFkeyBySmartCAAsync(string Account, string ACpass, string xml, string username, string password, string pattern, string serial, object userState) {
            if ((this.SendInvMTTFkeyBySmartCAOperationCompleted == null)) {
                this.SendInvMTTFkeyBySmartCAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendInvMTTFkeyBySmartCAOperationCompleted);
            }
            this.InvokeAsync("SendInvMTTFkeyBySmartCA", new object[] {
                        Account,
                        ACpass,
                        xml,
                        username,
                        password,
                        pattern,
                        serial}, this.SendInvMTTFkeyBySmartCAOperationCompleted, userState);
        }
        
        private void OnSendInvMTTFkeyBySmartCAOperationCompleted(object arg) {
            if ((this.SendInvMTTFkeyBySmartCACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendInvMTTFkeyBySmartCACompleted(this, new SendInvMTTFkeyBySmartCACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendInvMTTNoRange", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendInvMTTNoRange(string Account, string ACpass, string username, string password, string pattern, string serial, decimal fromNo, decimal toNo, string serialCert) {
            object[] results = this.Invoke("SendInvMTTNoRange", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        pattern,
                        serial,
                        fromNo,
                        toNo,
                        serialCert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendInvMTTNoRangeAsync(string Account, string ACpass, string username, string password, string pattern, string serial, decimal fromNo, decimal toNo, string serialCert) {
            this.SendInvMTTNoRangeAsync(Account, ACpass, username, password, pattern, serial, fromNo, toNo, serialCert, null);
        }
        
        /// <remarks/>
        public void SendInvMTTNoRangeAsync(string Account, string ACpass, string username, string password, string pattern, string serial, decimal fromNo, decimal toNo, string serialCert, object userState) {
            if ((this.SendInvMTTNoRangeOperationCompleted == null)) {
                this.SendInvMTTNoRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendInvMTTNoRangeOperationCompleted);
            }
            this.InvokeAsync("SendInvMTTNoRange", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        pattern,
                        serial,
                        fromNo,
                        toNo,
                        serialCert}, this.SendInvMTTNoRangeOperationCompleted, userState);
        }
        
        private void OnSendInvMTTNoRangeOperationCompleted(object arg) {
            if ((this.SendInvMTTNoRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendInvMTTNoRangeCompleted(this, new SendInvMTTNoRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHashInvMTTNoRangeByToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetHashInvMTTNoRangeByToken(string Account, string ACpass, string username, string password, string pattern, string serial, decimal fromNo, decimal toNo, string serialCert) {
            object[] results = this.Invoke("GetHashInvMTTNoRangeByToken", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        pattern,
                        serial,
                        fromNo,
                        toNo,
                        serialCert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHashInvMTTNoRangeByTokenAsync(string Account, string ACpass, string username, string password, string pattern, string serial, decimal fromNo, decimal toNo, string serialCert) {
            this.GetHashInvMTTNoRangeByTokenAsync(Account, ACpass, username, password, pattern, serial, fromNo, toNo, serialCert, null);
        }
        
        /// <remarks/>
        public void GetHashInvMTTNoRangeByTokenAsync(string Account, string ACpass, string username, string password, string pattern, string serial, decimal fromNo, decimal toNo, string serialCert, object userState) {
            if ((this.GetHashInvMTTNoRangeByTokenOperationCompleted == null)) {
                this.GetHashInvMTTNoRangeByTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHashInvMTTNoRangeByTokenOperationCompleted);
            }
            this.InvokeAsync("GetHashInvMTTNoRangeByToken", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        pattern,
                        serial,
                        fromNo,
                        toNo,
                        serialCert}, this.GetHashInvMTTNoRangeByTokenOperationCompleted, userState);
        }
        
        private void OnGetHashInvMTTNoRangeByTokenOperationCompleted(object arg) {
            if ((this.GetHashInvMTTNoRangeByTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHashInvMTTNoRangeByTokenCompleted(this, new GetHashInvMTTNoRangeByTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendInvMTTNoRangeByToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendInvMTTNoRangeByToken(string Account, string ACpass, string xml, string username, string password, string pattern, string serial) {
            object[] results = this.Invoke("SendInvMTTNoRangeByToken", new object[] {
                        Account,
                        ACpass,
                        xml,
                        username,
                        password,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendInvMTTNoRangeByTokenAsync(string Account, string ACpass, string xml, string username, string password, string pattern, string serial) {
            this.SendInvMTTNoRangeByTokenAsync(Account, ACpass, xml, username, password, pattern, serial, null);
        }
        
        /// <remarks/>
        public void SendInvMTTNoRangeByTokenAsync(string Account, string ACpass, string xml, string username, string password, string pattern, string serial, object userState) {
            if ((this.SendInvMTTNoRangeByTokenOperationCompleted == null)) {
                this.SendInvMTTNoRangeByTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendInvMTTNoRangeByTokenOperationCompleted);
            }
            this.InvokeAsync("SendInvMTTNoRangeByToken", new object[] {
                        Account,
                        ACpass,
                        xml,
                        username,
                        password,
                        pattern,
                        serial}, this.SendInvMTTNoRangeByTokenOperationCompleted, userState);
        }
        
        private void OnSendInvMTTNoRangeByTokenOperationCompleted(object arg) {
            if ((this.SendInvMTTNoRangeByTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendInvMTTNoRangeByTokenCompleted(this, new SendInvMTTNoRangeByTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHashInvMTTNoRangeBySmartCA", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetHashInvMTTNoRangeBySmartCA(string Account, string ACpass, string username, string password, string pattern, string serial, decimal fromNo, decimal toNo, string serialCert) {
            object[] results = this.Invoke("GetHashInvMTTNoRangeBySmartCA", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        pattern,
                        serial,
                        fromNo,
                        toNo,
                        serialCert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHashInvMTTNoRangeBySmartCAAsync(string Account, string ACpass, string username, string password, string pattern, string serial, decimal fromNo, decimal toNo, string serialCert) {
            this.GetHashInvMTTNoRangeBySmartCAAsync(Account, ACpass, username, password, pattern, serial, fromNo, toNo, serialCert, null);
        }
        
        /// <remarks/>
        public void GetHashInvMTTNoRangeBySmartCAAsync(string Account, string ACpass, string username, string password, string pattern, string serial, decimal fromNo, decimal toNo, string serialCert, object userState) {
            if ((this.GetHashInvMTTNoRangeBySmartCAOperationCompleted == null)) {
                this.GetHashInvMTTNoRangeBySmartCAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHashInvMTTNoRangeBySmartCAOperationCompleted);
            }
            this.InvokeAsync("GetHashInvMTTNoRangeBySmartCA", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        pattern,
                        serial,
                        fromNo,
                        toNo,
                        serialCert}, this.GetHashInvMTTNoRangeBySmartCAOperationCompleted, userState);
        }
        
        private void OnGetHashInvMTTNoRangeBySmartCAOperationCompleted(object arg) {
            if ((this.GetHashInvMTTNoRangeBySmartCACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHashInvMTTNoRangeBySmartCACompleted(this, new GetHashInvMTTNoRangeBySmartCACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendInvMTTNoRangeBySmartCA", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendInvMTTNoRangeBySmartCA(string Account, string ACpass, string xml, string username, string password, string pattern, string serial) {
            object[] results = this.Invoke("SendInvMTTNoRangeBySmartCA", new object[] {
                        Account,
                        ACpass,
                        xml,
                        username,
                        password,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendInvMTTNoRangeBySmartCAAsync(string Account, string ACpass, string xml, string username, string password, string pattern, string serial) {
            this.SendInvMTTNoRangeBySmartCAAsync(Account, ACpass, xml, username, password, pattern, serial, null);
        }
        
        /// <remarks/>
        public void SendInvMTTNoRangeBySmartCAAsync(string Account, string ACpass, string xml, string username, string password, string pattern, string serial, object userState) {
            if ((this.SendInvMTTNoRangeBySmartCAOperationCompleted == null)) {
                this.SendInvMTTNoRangeBySmartCAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendInvMTTNoRangeBySmartCAOperationCompleted);
            }
            this.InvokeAsync("SendInvMTTNoRangeBySmartCA", new object[] {
                        Account,
                        ACpass,
                        xml,
                        username,
                        password,
                        pattern,
                        serial}, this.SendInvMTTNoRangeBySmartCAOperationCompleted, userState);
        }
        
        private void OnSendInvMTTNoRangeBySmartCAOperationCompleted(object arg) {
            if ((this.SendInvMTTNoRangeBySmartCACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendInvMTTNoRangeBySmartCACompleted(this, new SendInvMTTNoRangeBySmartCACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendInvMTTInvToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendInvMTTInvToken(string Account, string ACpass, string lstInvToken, string username, string password, string serialCert) {
            object[] results = this.Invoke("SendInvMTTInvToken", new object[] {
                        Account,
                        ACpass,
                        lstInvToken,
                        username,
                        password,
                        serialCert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendInvMTTInvTokenAsync(string Account, string ACpass, string lstInvToken, string username, string password, string serialCert) {
            this.SendInvMTTInvTokenAsync(Account, ACpass, lstInvToken, username, password, serialCert, null);
        }
        
        /// <remarks/>
        public void SendInvMTTInvTokenAsync(string Account, string ACpass, string lstInvToken, string username, string password, string serialCert, object userState) {
            if ((this.SendInvMTTInvTokenOperationCompleted == null)) {
                this.SendInvMTTInvTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendInvMTTInvTokenOperationCompleted);
            }
            this.InvokeAsync("SendInvMTTInvToken", new object[] {
                        Account,
                        ACpass,
                        lstInvToken,
                        username,
                        password,
                        serialCert}, this.SendInvMTTInvTokenOperationCompleted, userState);
        }
        
        private void OnSendInvMTTInvTokenOperationCompleted(object arg) {
            if ((this.SendInvMTTInvTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendInvMTTInvTokenCompleted(this, new SendInvMTTInvTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHashInvMTTInvTokenByToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetHashInvMTTInvTokenByToken(string Account, string ACpass, string lstInvToken, string username, string password, string serialCert) {
            object[] results = this.Invoke("GetHashInvMTTInvTokenByToken", new object[] {
                        Account,
                        ACpass,
                        lstInvToken,
                        username,
                        password,
                        serialCert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHashInvMTTInvTokenByTokenAsync(string Account, string ACpass, string lstInvToken, string username, string password, string serialCert) {
            this.GetHashInvMTTInvTokenByTokenAsync(Account, ACpass, lstInvToken, username, password, serialCert, null);
        }
        
        /// <remarks/>
        public void GetHashInvMTTInvTokenByTokenAsync(string Account, string ACpass, string lstInvToken, string username, string password, string serialCert, object userState) {
            if ((this.GetHashInvMTTInvTokenByTokenOperationCompleted == null)) {
                this.GetHashInvMTTInvTokenByTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHashInvMTTInvTokenByTokenOperationCompleted);
            }
            this.InvokeAsync("GetHashInvMTTInvTokenByToken", new object[] {
                        Account,
                        ACpass,
                        lstInvToken,
                        username,
                        password,
                        serialCert}, this.GetHashInvMTTInvTokenByTokenOperationCompleted, userState);
        }
        
        private void OnGetHashInvMTTInvTokenByTokenOperationCompleted(object arg) {
            if ((this.GetHashInvMTTInvTokenByTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHashInvMTTInvTokenByTokenCompleted(this, new GetHashInvMTTInvTokenByTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendInvMTTInvTokenByToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendInvMTTInvTokenByToken(string Account, string ACpass, string xml, string username, string password, string pattern, string serial) {
            object[] results = this.Invoke("SendInvMTTInvTokenByToken", new object[] {
                        Account,
                        ACpass,
                        xml,
                        username,
                        password,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendInvMTTInvTokenByTokenAsync(string Account, string ACpass, string xml, string username, string password, string pattern, string serial) {
            this.SendInvMTTInvTokenByTokenAsync(Account, ACpass, xml, username, password, pattern, serial, null);
        }
        
        /// <remarks/>
        public void SendInvMTTInvTokenByTokenAsync(string Account, string ACpass, string xml, string username, string password, string pattern, string serial, object userState) {
            if ((this.SendInvMTTInvTokenByTokenOperationCompleted == null)) {
                this.SendInvMTTInvTokenByTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendInvMTTInvTokenByTokenOperationCompleted);
            }
            this.InvokeAsync("SendInvMTTInvTokenByToken", new object[] {
                        Account,
                        ACpass,
                        xml,
                        username,
                        password,
                        pattern,
                        serial}, this.SendInvMTTInvTokenByTokenOperationCompleted, userState);
        }
        
        private void OnSendInvMTTInvTokenByTokenOperationCompleted(object arg) {
            if ((this.SendInvMTTInvTokenByTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendInvMTTInvTokenByTokenCompleted(this, new SendInvMTTInvTokenByTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHashInvMTTInvTokenBySmartCA", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetHashInvMTTInvTokenBySmartCA(string Account, string ACpass, string lstInvToken, string username, string password, string serialCert) {
            object[] results = this.Invoke("GetHashInvMTTInvTokenBySmartCA", new object[] {
                        Account,
                        ACpass,
                        lstInvToken,
                        username,
                        password,
                        serialCert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHashInvMTTInvTokenBySmartCAAsync(string Account, string ACpass, string lstInvToken, string username, string password, string serialCert) {
            this.GetHashInvMTTInvTokenBySmartCAAsync(Account, ACpass, lstInvToken, username, password, serialCert, null);
        }
        
        /// <remarks/>
        public void GetHashInvMTTInvTokenBySmartCAAsync(string Account, string ACpass, string lstInvToken, string username, string password, string serialCert, object userState) {
            if ((this.GetHashInvMTTInvTokenBySmartCAOperationCompleted == null)) {
                this.GetHashInvMTTInvTokenBySmartCAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHashInvMTTInvTokenBySmartCAOperationCompleted);
            }
            this.InvokeAsync("GetHashInvMTTInvTokenBySmartCA", new object[] {
                        Account,
                        ACpass,
                        lstInvToken,
                        username,
                        password,
                        serialCert}, this.GetHashInvMTTInvTokenBySmartCAOperationCompleted, userState);
        }
        
        private void OnGetHashInvMTTInvTokenBySmartCAOperationCompleted(object arg) {
            if ((this.GetHashInvMTTInvTokenBySmartCACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHashInvMTTInvTokenBySmartCACompleted(this, new GetHashInvMTTInvTokenBySmartCACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendInvMTTInvTokenBySmartCA", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendInvMTTInvTokenBySmartCA(string Account, string ACpass, string xml, string username, string password, string pattern, string serial) {
            object[] results = this.Invoke("SendInvMTTInvTokenBySmartCA", new object[] {
                        Account,
                        ACpass,
                        xml,
                        username,
                        password,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendInvMTTInvTokenBySmartCAAsync(string Account, string ACpass, string xml, string username, string password, string pattern, string serial) {
            this.SendInvMTTInvTokenBySmartCAAsync(Account, ACpass, xml, username, password, pattern, serial, null);
        }
        
        /// <remarks/>
        public void SendInvMTTInvTokenBySmartCAAsync(string Account, string ACpass, string xml, string username, string password, string pattern, string serial, object userState) {
            if ((this.SendInvMTTInvTokenBySmartCAOperationCompleted == null)) {
                this.SendInvMTTInvTokenBySmartCAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendInvMTTInvTokenBySmartCAOperationCompleted);
            }
            this.InvokeAsync("SendInvMTTInvTokenBySmartCA", new object[] {
                        Account,
                        ACpass,
                        xml,
                        username,
                        password,
                        pattern,
                        serial}, this.SendInvMTTInvTokenBySmartCAOperationCompleted, userState);
        }
        
        private void OnSendInvMTTInvTokenBySmartCAOperationCompleted(object arg) {
            if ((this.SendInvMTTInvTokenBySmartCACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendInvMTTInvTokenBySmartCACompleted(this, new SendInvMTTInvTokenBySmartCACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReplaceInvMTT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReplaceInvMTT(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string Attachfile, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert, string pattern, string serial, string OldPattern) {
            object[] results = this.Invoke("ReplaceInvMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        Attachfile,
                        convert,
                        pattern,
                        serial,
                        OldPattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReplaceInvMTTAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string Attachfile, System.Nullable<int> convert, string pattern, string serial, string OldPattern) {
            this.ReplaceInvMTTAsync(Account, ACpass, xmlInvData, username, pass, fkey, Attachfile, convert, pattern, serial, OldPattern, null);
        }
        
        /// <remarks/>
        public void ReplaceInvMTTAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string Attachfile, System.Nullable<int> convert, string pattern, string serial, string OldPattern, object userState) {
            if ((this.ReplaceInvMTTOperationCompleted == null)) {
                this.ReplaceInvMTTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplaceInvMTTOperationCompleted);
            }
            this.InvokeAsync("ReplaceInvMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        Attachfile,
                        convert,
                        pattern,
                        serial,
                        OldPattern}, this.ReplaceInvMTTOperationCompleted, userState);
        }
        
        private void OnReplaceInvMTTOperationCompleted(object arg) {
            if ((this.ReplaceInvMTTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplaceInvMTTCompleted(this, new ReplaceInvMTTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdjustInvMTT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdjustInvMTT(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert, string pattern, string serial, string OldPattern) {
            object[] results = this.Invoke("AdjustInvMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        AttachFile,
                        convert,
                        pattern,
                        serial,
                        OldPattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustInvMTTAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, System.Nullable<int> convert, string pattern, string serial, string OldPattern) {
            this.AdjustInvMTTAsync(Account, ACpass, xmlInvData, username, pass, fkey, AttachFile, convert, pattern, serial, OldPattern, null);
        }
        
        /// <remarks/>
        public void AdjustInvMTTAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, System.Nullable<int> convert, string pattern, string serial, string OldPattern, object userState) {
            if ((this.AdjustInvMTTOperationCompleted == null)) {
                this.AdjustInvMTTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustInvMTTOperationCompleted);
            }
            this.InvokeAsync("AdjustInvMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        AttachFile,
                        convert,
                        pattern,
                        serial,
                        OldPattern}, this.AdjustInvMTTOperationCompleted, userState);
        }
        
        private void OnAdjustInvMTTOperationCompleted(object arg) {
            if ((this.AdjustInvMTTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustInvMTTCompleted(this, new AdjustInvMTTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdjustWithoutInvMTT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdjustWithoutInvMTT(string account, string accPass, string invXml, string userName, string userPass, string oldPattern, string oldSerial, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<decimal> oldNo, string strOldArisingDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert, string pattern, string serial, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> relatedInvType, string feature) {
            object[] results = this.Invoke("AdjustWithoutInvMTT", new object[] {
                        account,
                        accPass,
                        invXml,
                        userName,
                        userPass,
                        oldPattern,
                        oldSerial,
                        oldNo,
                        strOldArisingDate,
                        convert,
                        pattern,
                        serial,
                        relatedInvType,
                        feature});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustWithoutInvMTTAsync(string account, string accPass, string invXml, string userName, string userPass, string oldPattern, string oldSerial, System.Nullable<decimal> oldNo, string strOldArisingDate, System.Nullable<int> convert, string pattern, string serial, System.Nullable<int> relatedInvType, string feature) {
            this.AdjustWithoutInvMTTAsync(account, accPass, invXml, userName, userPass, oldPattern, oldSerial, oldNo, strOldArisingDate, convert, pattern, serial, relatedInvType, feature, null);
        }
        
        /// <remarks/>
        public void AdjustWithoutInvMTTAsync(string account, string accPass, string invXml, string userName, string userPass, string oldPattern, string oldSerial, System.Nullable<decimal> oldNo, string strOldArisingDate, System.Nullable<int> convert, string pattern, string serial, System.Nullable<int> relatedInvType, string feature, object userState) {
            if ((this.AdjustWithoutInvMTTOperationCompleted == null)) {
                this.AdjustWithoutInvMTTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustWithoutInvMTTOperationCompleted);
            }
            this.InvokeAsync("AdjustWithoutInvMTT", new object[] {
                        account,
                        accPass,
                        invXml,
                        userName,
                        userPass,
                        oldPattern,
                        oldSerial,
                        oldNo,
                        strOldArisingDate,
                        convert,
                        pattern,
                        serial,
                        relatedInvType,
                        feature}, this.AdjustWithoutInvMTTOperationCompleted, userState);
        }
        
        private void OnAdjustWithoutInvMTTOperationCompleted(object arg) {
            if ((this.AdjustWithoutInvMTTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustWithoutInvMTTCompleted(this, new AdjustWithoutInvMTTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReplaceWithoutInvMTT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReplaceWithoutInvMTT(string account, string accPass, string invXml, string userName, string userPass, string oldPattern, string oldSerial, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<decimal> oldNo, string strOldArisingDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert, string pattern, string serial, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> relatedInvType, string feature) {
            object[] results = this.Invoke("ReplaceWithoutInvMTT", new object[] {
                        account,
                        accPass,
                        invXml,
                        userName,
                        userPass,
                        oldPattern,
                        oldSerial,
                        oldNo,
                        strOldArisingDate,
                        convert,
                        pattern,
                        serial,
                        relatedInvType,
                        feature});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReplaceWithoutInvMTTAsync(string account, string accPass, string invXml, string userName, string userPass, string oldPattern, string oldSerial, System.Nullable<decimal> oldNo, string strOldArisingDate, System.Nullable<int> convert, string pattern, string serial, System.Nullable<int> relatedInvType, string feature) {
            this.ReplaceWithoutInvMTTAsync(account, accPass, invXml, userName, userPass, oldPattern, oldSerial, oldNo, strOldArisingDate, convert, pattern, serial, relatedInvType, feature, null);
        }
        
        /// <remarks/>
        public void ReplaceWithoutInvMTTAsync(string account, string accPass, string invXml, string userName, string userPass, string oldPattern, string oldSerial, System.Nullable<decimal> oldNo, string strOldArisingDate, System.Nullable<int> convert, string pattern, string serial, System.Nullable<int> relatedInvType, string feature, object userState) {
            if ((this.ReplaceWithoutInvMTTOperationCompleted == null)) {
                this.ReplaceWithoutInvMTTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplaceWithoutInvMTTOperationCompleted);
            }
            this.InvokeAsync("ReplaceWithoutInvMTT", new object[] {
                        account,
                        accPass,
                        invXml,
                        userName,
                        userPass,
                        oldPattern,
                        oldSerial,
                        oldNo,
                        strOldArisingDate,
                        convert,
                        pattern,
                        serial,
                        relatedInvType,
                        feature}, this.ReplaceWithoutInvMTTOperationCompleted, userState);
        }
        
        private void OnReplaceWithoutInvMTTOperationCompleted(object arg) {
            if ((this.ReplaceWithoutInvMTTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplaceWithoutInvMTTCompleted(this, new ReplaceWithoutInvMTTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReplaceActionAssignedNoMTT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReplaceActionAssignedNoMTT(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string Attachfile, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert, string pattern, string serial) {
            object[] results = this.Invoke("ReplaceActionAssignedNoMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        Attachfile,
                        convert,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReplaceActionAssignedNoMTTAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string Attachfile, System.Nullable<int> convert, string pattern, string serial) {
            this.ReplaceActionAssignedNoMTTAsync(Account, ACpass, xmlInvData, username, pass, fkey, Attachfile, convert, pattern, serial, null);
        }
        
        /// <remarks/>
        public void ReplaceActionAssignedNoMTTAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string Attachfile, System.Nullable<int> convert, string pattern, string serial, object userState) {
            if ((this.ReplaceActionAssignedNoMTTOperationCompleted == null)) {
                this.ReplaceActionAssignedNoMTTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplaceActionAssignedNoMTTOperationCompleted);
            }
            this.InvokeAsync("ReplaceActionAssignedNoMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        Attachfile,
                        convert,
                        pattern,
                        serial}, this.ReplaceActionAssignedNoMTTOperationCompleted, userState);
        }
        
        private void OnReplaceActionAssignedNoMTTOperationCompleted(object arg) {
            if ((this.ReplaceActionAssignedNoMTTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplaceActionAssignedNoMTTCompleted(this, new ReplaceActionAssignedNoMTTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdjustActionAssignedNoMTT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdjustActionAssignedNoMTT(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert, string pattern, string serial) {
            object[] results = this.Invoke("AdjustActionAssignedNoMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        AttachFile,
                        convert,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustActionAssignedNoMTTAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, System.Nullable<int> convert, string pattern, string serial) {
            this.AdjustActionAssignedNoMTTAsync(Account, ACpass, xmlInvData, username, pass, fkey, AttachFile, convert, pattern, serial, null);
        }
        
        /// <remarks/>
        public void AdjustActionAssignedNoMTTAsync(string Account, string ACpass, string xmlInvData, string username, string pass, string fkey, string AttachFile, System.Nullable<int> convert, string pattern, string serial, object userState) {
            if ((this.AdjustActionAssignedNoMTTOperationCompleted == null)) {
                this.AdjustActionAssignedNoMTTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustActionAssignedNoMTTOperationCompleted);
            }
            this.InvokeAsync("AdjustActionAssignedNoMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        pass,
                        fkey,
                        AttachFile,
                        convert,
                        pattern,
                        serial}, this.AdjustActionAssignedNoMTTOperationCompleted, userState);
        }
        
        private void OnAdjustActionAssignedNoMTTOperationCompleted(object arg) {
            if ((this.AdjustActionAssignedNoMTTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustActionAssignedNoMTTCompleted(this, new AdjustActionAssignedNoMTTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdjustReplaceInvWithTokenMTT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdjustReplaceInvWithTokenMTT(string Account, string ACpass, string xmlInvData, string username, string password, int type, string pattern, string serial) {
            object[] results = this.Invoke("AdjustReplaceInvWithTokenMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        type,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustReplaceInvWithTokenMTTAsync(string Account, string ACpass, string xmlInvData, string username, string password, int type, string pattern, string serial) {
            this.AdjustReplaceInvWithTokenMTTAsync(Account, ACpass, xmlInvData, username, password, type, pattern, serial, null);
        }
        
        /// <remarks/>
        public void AdjustReplaceInvWithTokenMTTAsync(string Account, string ACpass, string xmlInvData, string username, string password, int type, string pattern, string serial, object userState) {
            if ((this.AdjustReplaceInvWithTokenMTTOperationCompleted == null)) {
                this.AdjustReplaceInvWithTokenMTTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustReplaceInvWithTokenMTTOperationCompleted);
            }
            this.InvokeAsync("AdjustReplaceInvWithTokenMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        type,
                        pattern,
                        serial}, this.AdjustReplaceInvWithTokenMTTOperationCompleted, userState);
        }
        
        private void OnAdjustReplaceInvWithTokenMTTOperationCompleted(object arg) {
            if ((this.AdjustReplaceInvWithTokenMTTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustReplaceInvWithTokenMTTCompleted(this, new AdjustReplaceInvWithTokenMTTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdjustReplaceInvSmartCAMTT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdjustReplaceInvSmartCAMTT(string Account, string ACpass, string xmlInvData, string username, string password, int type, string pattern, string serial) {
            object[] results = this.Invoke("AdjustReplaceInvSmartCAMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        type,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustReplaceInvSmartCAMTTAsync(string Account, string ACpass, string xmlInvData, string username, string password, int type, string pattern, string serial) {
            this.AdjustReplaceInvSmartCAMTTAsync(Account, ACpass, xmlInvData, username, password, type, pattern, serial, null);
        }
        
        /// <remarks/>
        public void AdjustReplaceInvSmartCAMTTAsync(string Account, string ACpass, string xmlInvData, string username, string password, int type, string pattern, string serial, object userState) {
            if ((this.AdjustReplaceInvSmartCAMTTOperationCompleted == null)) {
                this.AdjustReplaceInvSmartCAMTTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustReplaceInvSmartCAMTTOperationCompleted);
            }
            this.InvokeAsync("AdjustReplaceInvSmartCAMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        type,
                        pattern,
                        serial}, this.AdjustReplaceInvSmartCAMTTOperationCompleted, userState);
        }
        
        private void OnAdjustReplaceInvSmartCAMTTOperationCompleted(object arg) {
            if ((this.AdjustReplaceInvSmartCAMTTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustReplaceInvSmartCAMTTCompleted(this, new AdjustReplaceInvSmartCAMTTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void replaceInvCompletedEventHandler(object sender, replaceInvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class replaceInvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal replaceInvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ReplaceInvoiceActionCompletedEventHandler(object sender, ReplaceInvoiceActionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReplaceInvoiceActionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReplaceInvoiceActionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ReplaceActionAssignedNoCompletedEventHandler(object sender, ReplaceActionAssignedNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReplaceActionAssignedNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReplaceActionAssignedNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ReplaceInvoiceCompletedEventHandler(object sender, ReplaceInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReplaceInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReplaceInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void adjustInvCompletedEventHandler(object sender, adjustInvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class adjustInvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal adjustInvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AdjustInvoiceActionCompletedEventHandler(object sender, AdjustInvoiceActionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustInvoiceActionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustInvoiceActionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AdjustWithoutInvCompletedEventHandler(object sender, AdjustWithoutInvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustWithoutInvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustWithoutInvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ReplaceWithoutInvCompletedEventHandler(object sender, ReplaceWithoutInvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReplaceWithoutInvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReplaceWithoutInvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AdjustInvoiceNoteCompletedEventHandler(object sender, AdjustInvoiceNoteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustInvoiceNoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustInvoiceNoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AdjustActionAssignedNoCompletedEventHandler(object sender, AdjustActionAssignedNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustActionAssignedNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustActionAssignedNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AdjustInvoiceCompletedEventHandler(object sender, AdjustInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void cancelInvCompletedEventHandler(object sender, cancelInvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cancelInvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cancelInvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void cancelInvNoPayCompletedEventHandler(object sender, cancelInvNoPayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cancelInvNoPayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cancelInvNoPayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void cancelInvSignFileCompletedEventHandler(object sender, cancelInvSignFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cancelInvSignFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cancelInvSignFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void cancelInvSignFileNoPayCompletedEventHandler(object sender, cancelInvSignFileNoPayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cancelInvSignFileNoPayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cancelInvSignFileNoPayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void restoreCancelInvFkeyCompletedEventHandler(object sender, restoreCancelInvFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class restoreCancelInvFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal restoreCancelInvFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void restoreCancelInvTokenCompletedEventHandler(object sender, restoreCancelInvTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class restoreCancelInvTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal restoreCancelInvTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void restoreReplacedInvFkeyCompletedEventHandler(object sender, restoreReplacedInvFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class restoreReplacedInvFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal restoreReplacedInvFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void restoreReplacedInvTokenCompletedEventHandler(object sender, restoreReplacedInvTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class restoreReplacedInvTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal restoreReplacedInvTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void poolingInvCompletedEventHandler(object sender, poolingInvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class poolingInvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal poolingInvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetInvbyFkeyCompletedEventHandler(object sender, GetInvbyFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvbyFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInvbyFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void reportInvUsedCompletedEventHandler(object sender, reportInvUsedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class reportInvUsedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal reportInvUsedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void reportMonthCompletedEventHandler(object sender, reportMonthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class reportMonthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal reportMonthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void deliverInvFkeyCompletedEventHandler(object sender, deliverInvFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deliverInvFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deliverInvFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void deliverInvCompletedEventHandler(object sender, deliverInvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deliverInvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deliverInvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void confirmPaymentCompletedEventHandler(object sender, confirmPaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class confirmPaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal confirmPaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void confirmPaymentDetailCompletedEventHandler(object sender, confirmPaymentDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class confirmPaymentDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal confirmPaymentDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void unConfirmPaymentCompletedEventHandler(object sender, unConfirmPaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class unConfirmPaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal unConfirmPaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void confirmPaymentFkeyCompletedEventHandler(object sender, confirmPaymentFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class confirmPaymentFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal confirmPaymentFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void confirmPaymentDetailFkeyCompletedEventHandler(object sender, confirmPaymentDetailFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class confirmPaymentDetailFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal confirmPaymentDetailFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void confirmPaymentFkeyVNPCompletedEventHandler(object sender, confirmPaymentFkeyVNPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class confirmPaymentFkeyVNPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal confirmPaymentFkeyVNPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void UnConfirmPaymentFkeyCompletedEventHandler(object sender, UnConfirmPaymentFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnConfirmPaymentFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnConfirmPaymentFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void UnConfirmPaymentFkeyVNPCompletedEventHandler(object sender, UnConfirmPaymentFkeyVNPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnConfirmPaymentFkeyVNPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnConfirmPaymentFkeyVNPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ResetTemCompletedEventHandler(object sender, ResetTemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResetTemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResetTemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetAllRolesbyAccCompletedEventHandler(object sender, GetAllRolesbyAccCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllRolesbyAccCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllRolesbyAccCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void CreateNewUserbyAccCompletedEventHandler(object sender, CreateNewUserbyAccCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewUserbyAccCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNewUserbyAccCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void UpdateSStaffAccountCompletedEventHandler(object sender, UpdateSStaffAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSStaffAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSStaffAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void CreateSStaffAccountCompletedEventHandler(object sender, CreateSStaffAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateSStaffAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateSStaffAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getSerialByPatternCompletedEventHandler(object sender, getSerialByPatternCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSerialByPatternCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSerialByPatternCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getPublishInvsCompletedEventHandler(object sender, getPublishInvsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPublishInvsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPublishInvsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ReplaceInvoiceNoPublishCompletedEventHandler(object sender, ReplaceInvoiceNoPublishCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReplaceInvoiceNoPublishCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReplaceInvoiceNoPublishCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AdjustInvoiceNoPublishCompletedEventHandler(object sender, AdjustInvoiceNoPublishCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustInvoiceNoPublishCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustInvoiceNoPublishCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ReplaceInvoiceNoPublishExtendCompletedEventHandler(object sender, ReplaceInvoiceNoPublishExtendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReplaceInvoiceNoPublishExtendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReplaceInvoiceNoPublishExtendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AdjustInvoiceNoPublishExtendCompletedEventHandler(object sender, AdjustInvoiceNoPublishExtendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustInvoiceNoPublishExtendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustInvoiceNoPublishExtendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AdjustInvoiceMultiCompletedEventHandler(object sender, AdjustInvoiceMultiCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustInvoiceMultiCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustInvoiceMultiCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ImportAttachmentByNoCompletedEventHandler(object sender, ImportAttachmentByNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportAttachmentByNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportAttachmentByNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetFileCompletedEventHandler(object sender, GetFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ReplaceAssignedNoNewPatternCompletedEventHandler(object sender, ReplaceAssignedNoNewPatternCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReplaceAssignedNoNewPatternCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReplaceAssignedNoNewPatternCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AdjustAssignedNoNewPatternCompletedEventHandler(object sender, AdjustAssignedNoNewPatternCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustAssignedNoNewPatternCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustAssignedNoNewPatternCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AdjustInvoiceNewPatternCompletedEventHandler(object sender, AdjustInvoiceNewPatternCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustInvoiceNewPatternCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustInvoiceNewPatternCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ReplaceInvoiceNewPatternCompletedEventHandler(object sender, ReplaceInvoiceNewPatternCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReplaceInvoiceNewPatternCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReplaceInvoiceNewPatternCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ImportAttachmentByFkeyCompletedEventHandler(object sender, ImportAttachmentByFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportAttachmentByFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportAttachmentByFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void MessageReceivedCompletedEventHandler(object sender, MessageReceivedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MessageReceivedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MessageReceivedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void RetrySendInvCompletedEventHandler(object sender, RetrySendInvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrySendInvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrySendInvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void confirmPaymentFkeyPatternCompletedEventHandler(object sender, confirmPaymentFkeyPatternCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class confirmPaymentFkeyPatternCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal confirmPaymentFkeyPatternCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void UnConfirmPaymentFkeyPatternCompletedEventHandler(object sender, UnConfirmPaymentFkeyPatternCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnConfirmPaymentFkeyPatternCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnConfirmPaymentFkeyPatternCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AdjustReplaceInvSmartCACompletedEventHandler(object sender, AdjustReplaceInvSmartCACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustReplaceInvSmartCACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustReplaceInvSmartCACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void cancelInvDetailFkeyCompletedEventHandler(object sender, cancelInvDetailFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cancelInvDetailFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cancelInvDetailFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void UnconfirmPaymentDetailFkeyCompletedEventHandler(object sender, UnconfirmPaymentDetailFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnconfirmPaymentDetailFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnconfirmPaymentDetailFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetHashWithOutInvTokenCompletedEventHandler(object sender, GetHashWithOutInvTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHashWithOutInvTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHashWithOutInvTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetHashWithOutInvSmartCACompletedEventHandler(object sender, GetHashWithOutInvSmartCACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHashWithOutInvSmartCACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHashWithOutInvSmartCACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AdjustReplaceWithOutInvTokenCompletedEventHandler(object sender, AdjustReplaceWithOutInvTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustReplaceWithOutInvTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustReplaceWithOutInvTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AdjustReplaceWithOutInvSmartCACompletedEventHandler(object sender, AdjustReplaceWithOutInvSmartCACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustReplaceWithOutInvSmartCACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustReplaceWithOutInvSmartCACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getCompanyConfigCompletedEventHandler(object sender, getCompanyConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCompanyConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCompanyConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ReplaceCTTActionCompletedEventHandler(object sender, ReplaceCTTActionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReplaceCTTActionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReplaceCTTActionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getHashCTTTokenReplaceCompletedEventHandler(object sender, getHashCTTTokenReplaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getHashCTTTokenReplaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getHashCTTTokenReplaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetHashCTTSmartCAReplaceCompletedEventHandler(object sender, GetHashCTTSmartCAReplaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHashCTTSmartCAReplaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHashCTTSmartCAReplaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AdjustReplaceCTTTokenCompletedEventHandler(object sender, AdjustReplaceCTTTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustReplaceCTTTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustReplaceCTTTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AdjustReplaceCTTSmartCACompletedEventHandler(object sender, AdjustReplaceCTTSmartCACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustReplaceCTTSmartCACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustReplaceCTTSmartCACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void cancelInvCTTCompletedEventHandler(object sender, cancelInvCTTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cancelInvCTTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cancelInvCTTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void SendInvMTTFkeyCompletedEventHandler(object sender, SendInvMTTFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendInvMTTFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendInvMTTFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetHashInvMTTFkeyByTokenCompletedEventHandler(object sender, GetHashInvMTTFkeyByTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHashInvMTTFkeyByTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHashInvMTTFkeyByTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void SendInvMTTFkeyByTokenCompletedEventHandler(object sender, SendInvMTTFkeyByTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendInvMTTFkeyByTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendInvMTTFkeyByTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetHashInvMTTFkeyBySmartCACompletedEventHandler(object sender, GetHashInvMTTFkeyBySmartCACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHashInvMTTFkeyBySmartCACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHashInvMTTFkeyBySmartCACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void SendInvMTTFkeyBySmartCACompletedEventHandler(object sender, SendInvMTTFkeyBySmartCACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendInvMTTFkeyBySmartCACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendInvMTTFkeyBySmartCACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void SendInvMTTNoRangeCompletedEventHandler(object sender, SendInvMTTNoRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendInvMTTNoRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendInvMTTNoRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetHashInvMTTNoRangeByTokenCompletedEventHandler(object sender, GetHashInvMTTNoRangeByTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHashInvMTTNoRangeByTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHashInvMTTNoRangeByTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void SendInvMTTNoRangeByTokenCompletedEventHandler(object sender, SendInvMTTNoRangeByTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendInvMTTNoRangeByTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendInvMTTNoRangeByTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetHashInvMTTNoRangeBySmartCACompletedEventHandler(object sender, GetHashInvMTTNoRangeBySmartCACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHashInvMTTNoRangeBySmartCACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHashInvMTTNoRangeBySmartCACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void SendInvMTTNoRangeBySmartCACompletedEventHandler(object sender, SendInvMTTNoRangeBySmartCACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendInvMTTNoRangeBySmartCACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendInvMTTNoRangeBySmartCACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void SendInvMTTInvTokenCompletedEventHandler(object sender, SendInvMTTInvTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendInvMTTInvTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendInvMTTInvTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetHashInvMTTInvTokenByTokenCompletedEventHandler(object sender, GetHashInvMTTInvTokenByTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHashInvMTTInvTokenByTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHashInvMTTInvTokenByTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void SendInvMTTInvTokenByTokenCompletedEventHandler(object sender, SendInvMTTInvTokenByTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendInvMTTInvTokenByTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendInvMTTInvTokenByTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetHashInvMTTInvTokenBySmartCACompletedEventHandler(object sender, GetHashInvMTTInvTokenBySmartCACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHashInvMTTInvTokenBySmartCACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHashInvMTTInvTokenBySmartCACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void SendInvMTTInvTokenBySmartCACompletedEventHandler(object sender, SendInvMTTInvTokenBySmartCACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendInvMTTInvTokenBySmartCACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendInvMTTInvTokenBySmartCACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ReplaceInvMTTCompletedEventHandler(object sender, ReplaceInvMTTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReplaceInvMTTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReplaceInvMTTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AdjustInvMTTCompletedEventHandler(object sender, AdjustInvMTTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustInvMTTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustInvMTTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AdjustWithoutInvMTTCompletedEventHandler(object sender, AdjustWithoutInvMTTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustWithoutInvMTTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustWithoutInvMTTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ReplaceWithoutInvMTTCompletedEventHandler(object sender, ReplaceWithoutInvMTTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReplaceWithoutInvMTTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReplaceWithoutInvMTTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ReplaceActionAssignedNoMTTCompletedEventHandler(object sender, ReplaceActionAssignedNoMTTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReplaceActionAssignedNoMTTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReplaceActionAssignedNoMTTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AdjustActionAssignedNoMTTCompletedEventHandler(object sender, AdjustActionAssignedNoMTTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustActionAssignedNoMTTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustActionAssignedNoMTTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AdjustReplaceInvWithTokenMTTCompletedEventHandler(object sender, AdjustReplaceInvWithTokenMTTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustReplaceInvWithTokenMTTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustReplaceInvWithTokenMTTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AdjustReplaceInvSmartCAMTTCompletedEventHandler(object sender, AdjustReplaceInvSmartCAMTTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustReplaceInvSmartCAMTTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustReplaceInvSmartCAMTTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591