//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace DAIHOI.pypharmtest.publish {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PublishServiceSoap", Namespace="http://tempuri.org/")]
    public partial class PublishService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ImportAndPublishInvOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportAndPublishInvMTT32OperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportAndPublishAssignedNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportAndPublishAssignedNoMTTOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportInvOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportInvByPatternOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteInvoiceByFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInvDataByFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteInvoiceByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback publishInvOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrintNoticeInvErrorOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrintNoticeInvErrorCQTOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishInvFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishInvByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCusOperationCompleted;
        
        private System.Threading.SendOrPostCallback setCusCertOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCertInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback syncInfomationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SignInOperationCompleted;
        
        private System.Threading.SendOrPostCallback resetPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback AppClientSyncInfoSystemOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCurrentNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback syncClientInvOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback syncDecisionOperationCompleted;
        
        private System.Threading.SendOrPostCallback syncPublishOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPublishInvOperationCompleted;
        
        private System.Threading.SendOrPostCallback syncInvCancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDateTimeServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback syncClientInvoiceCancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvertForVerifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback syncCertOperationCompleted;
        
        private System.Threading.SendOrPostCallback syncInvoicev2OperationCompleted;
        
        private System.Threading.SendOrPostCallback syncInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSingleInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentForVerifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendEmailAgainOperationCompleted;
        
        private System.Threading.SendOrPostCallback getHashInvWithTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback publishInvWithTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustReplaceInvWithTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelInvoiceWithTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback rolBackWithTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback importCertWithTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback getStatusInvOperationCompleted;
        
        private System.Threading.SendOrPostCallback getHashInvOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInvoiceByFkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInvoiceByFkeysOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInForPublishComOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendAgainEmailServOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataInvHsmOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportAndPublishInvSignServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMCCQThueByInvTokensOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMCCQThueByFkeysOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMCCQThueByInvTokensNoXMLSignOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMCCQThueByFkeysNoXMLSignOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMCCQThueFromNoToNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendInvToCQTByFkeysOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendInvToCQTByInvTokensOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendInvNoticeErrorsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendInvErrorMTTOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHashInvNoticeErrorsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHashInvErrorMTTWithTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHashInvNoticeErrorsWithSmartCAOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHashInvErrorMTTWithSmartCAOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendInvNoticeErrorsWithSmartCAOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendInvErrorMTTWithSmartCAOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendInvNoticeErrorsWidthTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendInvErrorMTTWithTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback HandleInvoiceErrorsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReceivedInvoiceErrorsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHashInvSmartCAOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishInvSmartCAOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCertificateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCertificateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCertificatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterPublishOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReceivedRegisterPublishOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterPublishInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelPublishInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemovePublishInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransactionItemsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransactionDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStepDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResultsTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportInvByPatternCTTOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportAndPublishCTTOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHashCTTSmartCAOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishCTTSmartCAOperationCompleted;
        
        private System.Threading.SendOrPostCallback getHashCTTWithTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback publishCTTWithTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterPublishCTTOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportAndPublishInvMTTOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportInvByPatternMTTOperationCompleted;
        
        private System.Threading.SendOrPostCallback getHashInvWithTokenMTTOperationCompleted;
        
        private System.Threading.SendOrPostCallback publishInvWithTokenMTTOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHashInvSmartCAMTTOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishInvSmartCAMTTOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PublishService() {
            this.Url = global::DAIHOI.Properties.Settings.Default.DAIHOI_pypharmtest_publish_PublishService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ImportAndPublishInvCompletedEventHandler ImportAndPublishInvCompleted;
        
        /// <remarks/>
        public event ImportAndPublishInvMTT32CompletedEventHandler ImportAndPublishInvMTT32Completed;
        
        /// <remarks/>
        public event ImportAndPublishAssignedNoCompletedEventHandler ImportAndPublishAssignedNoCompleted;
        
        /// <remarks/>
        public event ImportAndPublishAssignedNoMTTCompletedEventHandler ImportAndPublishAssignedNoMTTCompleted;
        
        /// <remarks/>
        public event ImportInvCompletedEventHandler ImportInvCompleted;
        
        /// <remarks/>
        public event ImportInvByPatternCompletedEventHandler ImportInvByPatternCompleted;
        
        /// <remarks/>
        public event deleteInvoiceByFkeyCompletedEventHandler deleteInvoiceByFkeyCompleted;
        
        /// <remarks/>
        public event GetInvDataByFkeyCompletedEventHandler GetInvDataByFkeyCompleted;
        
        /// <remarks/>
        public event deleteInvoiceByIDCompletedEventHandler deleteInvoiceByIDCompleted;
        
        /// <remarks/>
        public event publishInvCompletedEventHandler publishInvCompleted;
        
        /// <remarks/>
        public event PrintNoticeInvErrorCompletedEventHandler PrintNoticeInvErrorCompleted;
        
        /// <remarks/>
        public event PrintNoticeInvErrorCQTCompletedEventHandler PrintNoticeInvErrorCQTCompleted;
        
        /// <remarks/>
        public event PublishInvFkeyCompletedEventHandler PublishInvFkeyCompleted;
        
        /// <remarks/>
        public event PublishInvByDateCompletedEventHandler PublishInvByDateCompleted;
        
        /// <remarks/>
        public event UpdateCusCompletedEventHandler UpdateCusCompleted;
        
        /// <remarks/>
        public event setCusCertCompletedEventHandler setCusCertCompleted;
        
        /// <remarks/>
        public event GetCertInfoCompletedEventHandler GetCertInfoCompleted;
        
        /// <remarks/>
        public event syncInfomationCompletedEventHandler syncInfomationCompleted;
        
        /// <remarks/>
        public event SignInCompletedEventHandler SignInCompleted;
        
        /// <remarks/>
        public event resetPasswordCompletedEventHandler resetPasswordCompleted;
        
        /// <remarks/>
        public event AppClientSyncInfoSystemCompletedEventHandler AppClientSyncInfoSystemCompleted;
        
        /// <remarks/>
        public event getCurrentNoCompletedEventHandler getCurrentNoCompleted;
        
        /// <remarks/>
        public event syncClientInvCompletedEventHandler syncClientInvCompleted;
        
        /// <remarks/>
        public event updateInvoiceCompletedEventHandler updateInvoiceCompleted;
        
        /// <remarks/>
        public event syncDecisionCompletedEventHandler syncDecisionCompleted;
        
        /// <remarks/>
        public event syncPublishCompletedEventHandler syncPublishCompleted;
        
        /// <remarks/>
        public event GetPublishInvCompletedEventHandler GetPublishInvCompleted;
        
        /// <remarks/>
        public event syncInvCancelCompletedEventHandler syncInvCancelCompleted;
        
        /// <remarks/>
        public event getDateTimeServerCompletedEventHandler getDateTimeServerCompleted;
        
        /// <remarks/>
        public event syncClientInvoiceCancelCompletedEventHandler syncClientInvoiceCancelCompleted;
        
        /// <remarks/>
        public event ConvertForVerifyCompletedEventHandler ConvertForVerifyCompleted;
        
        /// <remarks/>
        public event sendEmailCompletedEventHandler sendEmailCompleted;
        
        /// <remarks/>
        public event syncCertCompletedEventHandler syncCertCompleted;
        
        /// <remarks/>
        public event syncInvoicev2CompletedEventHandler syncInvoicev2Completed;
        
        /// <remarks/>
        public event syncInvoiceCompletedEventHandler syncInvoiceCompleted;
        
        /// <remarks/>
        public event GetSingleInvoiceCompletedEventHandler GetSingleInvoiceCompleted;
        
        /// <remarks/>
        public event PaymentForVerifyCompletedEventHandler PaymentForVerifyCompleted;
        
        /// <remarks/>
        public event sendEmailAgainCompletedEventHandler sendEmailAgainCompleted;
        
        /// <remarks/>
        public event getHashInvWithTokenCompletedEventHandler getHashInvWithTokenCompleted;
        
        /// <remarks/>
        public event publishInvWithTokenCompletedEventHandler publishInvWithTokenCompleted;
        
        /// <remarks/>
        public event AdjustReplaceInvWithTokenCompletedEventHandler AdjustReplaceInvWithTokenCompleted;
        
        /// <remarks/>
        public event CancelInvoiceWithTokenCompletedEventHandler CancelInvoiceWithTokenCompleted;
        
        /// <remarks/>
        public event rolBackWithTokenCompletedEventHandler rolBackWithTokenCompleted;
        
        /// <remarks/>
        public event importCertWithTokenCompletedEventHandler importCertWithTokenCompleted;
        
        /// <remarks/>
        public event getStatusInvCompletedEventHandler getStatusInvCompleted;
        
        /// <remarks/>
        public event getHashInvCompletedEventHandler getHashInvCompleted;
        
        /// <remarks/>
        public event GetInvoiceByFkeyCompletedEventHandler GetInvoiceByFkeyCompleted;
        
        /// <remarks/>
        public event GetInvoiceByFkeysCompletedEventHandler GetInvoiceByFkeysCompleted;
        
        /// <remarks/>
        public event GetInForPublishComCompletedEventHandler GetInForPublishComCompleted;
        
        /// <remarks/>
        public event SendAgainEmailServCompletedEventHandler SendAgainEmailServCompleted;
        
        /// <remarks/>
        public event GetDataInvHsmCompletedEventHandler GetDataInvHsmCompleted;
        
        /// <remarks/>
        public event ImportAndPublishInvSignServiceCompletedEventHandler ImportAndPublishInvSignServiceCompleted;
        
        /// <remarks/>
        public event GetMCCQThueByInvTokensCompletedEventHandler GetMCCQThueByInvTokensCompleted;
        
        /// <remarks/>
        public event GetMCCQThueByFkeysCompletedEventHandler GetMCCQThueByFkeysCompleted;
        
        /// <remarks/>
        public event GetMCCQThueByInvTokensNoXMLSignCompletedEventHandler GetMCCQThueByInvTokensNoXMLSignCompleted;
        
        /// <remarks/>
        public event GetMCCQThueByFkeysNoXMLSignCompletedEventHandler GetMCCQThueByFkeysNoXMLSignCompleted;
        
        /// <remarks/>
        public event GetMCCQThueFromNoToNoCompletedEventHandler GetMCCQThueFromNoToNoCompleted;
        
        /// <remarks/>
        public event SendInvToCQTByFkeysCompletedEventHandler SendInvToCQTByFkeysCompleted;
        
        /// <remarks/>
        public event SendInvToCQTByInvTokensCompletedEventHandler SendInvToCQTByInvTokensCompleted;
        
        /// <remarks/>
        public event SendInvNoticeErrorsCompletedEventHandler SendInvNoticeErrorsCompleted;
        
        /// <remarks/>
        public event SendInvErrorMTTCompletedEventHandler SendInvErrorMTTCompleted;
        
        /// <remarks/>
        public event GetHashInvNoticeErrorsCompletedEventHandler GetHashInvNoticeErrorsCompleted;
        
        /// <remarks/>
        public event GetHashInvErrorMTTWithTokenCompletedEventHandler GetHashInvErrorMTTWithTokenCompleted;
        
        /// <remarks/>
        public event GetHashInvNoticeErrorsWithSmartCACompletedEventHandler GetHashInvNoticeErrorsWithSmartCACompleted;
        
        /// <remarks/>
        public event GetHashInvErrorMTTWithSmartCACompletedEventHandler GetHashInvErrorMTTWithSmartCACompleted;
        
        /// <remarks/>
        public event SendInvNoticeErrorsWithSmartCACompletedEventHandler SendInvNoticeErrorsWithSmartCACompleted;
        
        /// <remarks/>
        public event SendInvErrorMTTWithSmartCACompletedEventHandler SendInvErrorMTTWithSmartCACompleted;
        
        /// <remarks/>
        public event SendInvNoticeErrorsWidthTokenCompletedEventHandler SendInvNoticeErrorsWidthTokenCompleted;
        
        /// <remarks/>
        public event SendInvErrorMTTWithTokenCompletedEventHandler SendInvErrorMTTWithTokenCompleted;
        
        /// <remarks/>
        public event HandleInvoiceErrorsCompletedEventHandler HandleInvoiceErrorsCompleted;
        
        /// <remarks/>
        public event ReceivedInvoiceErrorsCompletedEventHandler ReceivedInvoiceErrorsCompleted;
        
        /// <remarks/>
        public event GetHashInvSmartCACompletedEventHandler GetHashInvSmartCACompleted;
        
        /// <remarks/>
        public event PublishInvSmartCACompletedEventHandler PublishInvSmartCACompleted;
        
        /// <remarks/>
        public event UpdateCertificateCompletedEventHandler UpdateCertificateCompleted;
        
        /// <remarks/>
        public event DeleteCertificateCompletedEventHandler DeleteCertificateCompleted;
        
        /// <remarks/>
        public event GetCertificatesCompletedEventHandler GetCertificatesCompleted;
        
        /// <remarks/>
        public event RegisterPublishCompletedEventHandler RegisterPublishCompleted;
        
        /// <remarks/>
        public event ReceivedRegisterPublishCompletedEventHandler ReceivedRegisterPublishCompleted;
        
        /// <remarks/>
        public event RegisterPublishInvoiceCompletedEventHandler RegisterPublishInvoiceCompleted;
        
        /// <remarks/>
        public event CancelPublishInvoiceCompletedEventHandler CancelPublishInvoiceCompleted;
        
        /// <remarks/>
        public event RemovePublishInvoiceCompletedEventHandler RemovePublishInvoiceCompleted;
        
        /// <remarks/>
        public event GetTransactionItemsCompletedEventHandler GetTransactionItemsCompleted;
        
        /// <remarks/>
        public event GetTransactionDetailCompletedEventHandler GetTransactionDetailCompleted;
        
        /// <remarks/>
        public event GetStepDetailCompletedEventHandler GetStepDetailCompleted;
        
        /// <remarks/>
        public event GetResultsTransactionCompletedEventHandler GetResultsTransactionCompleted;
        
        /// <remarks/>
        public event ImportInvByPatternCTTCompletedEventHandler ImportInvByPatternCTTCompleted;
        
        /// <remarks/>
        public event ImportAndPublishCTTCompletedEventHandler ImportAndPublishCTTCompleted;
        
        /// <remarks/>
        public event GetHashCTTSmartCACompletedEventHandler GetHashCTTSmartCACompleted;
        
        /// <remarks/>
        public event PublishCTTSmartCACompletedEventHandler PublishCTTSmartCACompleted;
        
        /// <remarks/>
        public event getHashCTTWithTokenCompletedEventHandler getHashCTTWithTokenCompleted;
        
        /// <remarks/>
        public event publishCTTWithTokenCompletedEventHandler publishCTTWithTokenCompleted;
        
        /// <remarks/>
        public event RegisterPublishCTTCompletedEventHandler RegisterPublishCTTCompleted;
        
        /// <remarks/>
        public event ImportAndPublishInvMTTCompletedEventHandler ImportAndPublishInvMTTCompleted;
        
        /// <remarks/>
        public event ImportInvByPatternMTTCompletedEventHandler ImportInvByPatternMTTCompleted;
        
        /// <remarks/>
        public event getHashInvWithTokenMTTCompletedEventHandler getHashInvWithTokenMTTCompleted;
        
        /// <remarks/>
        public event publishInvWithTokenMTTCompletedEventHandler publishInvWithTokenMTTCompleted;
        
        /// <remarks/>
        public event GetHashInvSmartCAMTTCompletedEventHandler GetHashInvSmartCAMTTCompleted;
        
        /// <remarks/>
        public event PublishInvSmartCAMTTCompletedEventHandler PublishInvSmartCAMTTCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportAndPublishInv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportAndPublishInv(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert) {
            object[] results = this.Invoke("ImportAndPublishInv", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportAndPublishInvAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert) {
            this.ImportAndPublishInvAsync(Account, ACpass, xmlInvData, username, password, pattern, serial, convert, null);
        }
        
        /// <remarks/>
        public void ImportAndPublishInvAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert, object userState) {
            if ((this.ImportAndPublishInvOperationCompleted == null)) {
                this.ImportAndPublishInvOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportAndPublishInvOperationCompleted);
            }
            this.InvokeAsync("ImportAndPublishInv", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial,
                        convert}, this.ImportAndPublishInvOperationCompleted, userState);
        }
        
        private void OnImportAndPublishInvOperationCompleted(object arg) {
            if ((this.ImportAndPublishInvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportAndPublishInvCompleted(this, new ImportAndPublishInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportAndPublishInvMTT32", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportAndPublishInvMTT32(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert) {
            object[] results = this.Invoke("ImportAndPublishInvMTT32", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportAndPublishInvMTT32Async(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert) {
            this.ImportAndPublishInvMTT32Async(Account, ACpass, xmlInvData, username, password, pattern, serial, convert, null);
        }
        
        /// <remarks/>
        public void ImportAndPublishInvMTT32Async(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert, object userState) {
            if ((this.ImportAndPublishInvMTT32OperationCompleted == null)) {
                this.ImportAndPublishInvMTT32OperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportAndPublishInvMTT32OperationCompleted);
            }
            this.InvokeAsync("ImportAndPublishInvMTT32", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial,
                        convert}, this.ImportAndPublishInvMTT32OperationCompleted, userState);
        }
        
        private void OnImportAndPublishInvMTT32OperationCompleted(object arg) {
            if ((this.ImportAndPublishInvMTT32Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportAndPublishInvMTT32Completed(this, new ImportAndPublishInvMTT32CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportAndPublishAssignedNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportAndPublishAssignedNo(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert) {
            object[] results = this.Invoke("ImportAndPublishAssignedNo", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportAndPublishAssignedNoAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert) {
            this.ImportAndPublishAssignedNoAsync(Account, ACpass, xmlInvData, username, password, pattern, serial, convert, null);
        }
        
        /// <remarks/>
        public void ImportAndPublishAssignedNoAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert, object userState) {
            if ((this.ImportAndPublishAssignedNoOperationCompleted == null)) {
                this.ImportAndPublishAssignedNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportAndPublishAssignedNoOperationCompleted);
            }
            this.InvokeAsync("ImportAndPublishAssignedNo", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial,
                        convert}, this.ImportAndPublishAssignedNoOperationCompleted, userState);
        }
        
        private void OnImportAndPublishAssignedNoOperationCompleted(object arg) {
            if ((this.ImportAndPublishAssignedNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportAndPublishAssignedNoCompleted(this, new ImportAndPublishAssignedNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportAndPublishAssignedNoMTT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportAndPublishAssignedNoMTT(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert) {
            object[] results = this.Invoke("ImportAndPublishAssignedNoMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportAndPublishAssignedNoMTTAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert) {
            this.ImportAndPublishAssignedNoMTTAsync(Account, ACpass, xmlInvData, username, password, pattern, serial, convert, null);
        }
        
        /// <remarks/>
        public void ImportAndPublishAssignedNoMTTAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert, object userState) {
            if ((this.ImportAndPublishAssignedNoMTTOperationCompleted == null)) {
                this.ImportAndPublishAssignedNoMTTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportAndPublishAssignedNoMTTOperationCompleted);
            }
            this.InvokeAsync("ImportAndPublishAssignedNoMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial,
                        convert}, this.ImportAndPublishAssignedNoMTTOperationCompleted, userState);
        }
        
        private void OnImportAndPublishAssignedNoMTTOperationCompleted(object arg) {
            if ((this.ImportAndPublishAssignedNoMTTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportAndPublishAssignedNoMTTCompleted(this, new ImportAndPublishAssignedNoMTTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportInv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportInv(string xmlInvData, string username, string password, int convert) {
            object[] results = this.Invoke("ImportInv", new object[] {
                        xmlInvData,
                        username,
                        password,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportInvAsync(string xmlInvData, string username, string password, int convert) {
            this.ImportInvAsync(xmlInvData, username, password, convert, null);
        }
        
        /// <remarks/>
        public void ImportInvAsync(string xmlInvData, string username, string password, int convert, object userState) {
            if ((this.ImportInvOperationCompleted == null)) {
                this.ImportInvOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportInvOperationCompleted);
            }
            this.InvokeAsync("ImportInv", new object[] {
                        xmlInvData,
                        username,
                        password,
                        convert}, this.ImportInvOperationCompleted, userState);
        }
        
        private void OnImportInvOperationCompleted(object arg) {
            if ((this.ImportInvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportInvCompleted(this, new ImportInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportInvByPattern", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportInvByPattern(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert) {
            object[] results = this.Invoke("ImportInvByPattern", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportInvByPatternAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert) {
            this.ImportInvByPatternAsync(Account, ACpass, xmlInvData, username, password, pattern, serial, convert, null);
        }
        
        /// <remarks/>
        public void ImportInvByPatternAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert, object userState) {
            if ((this.ImportInvByPatternOperationCompleted == null)) {
                this.ImportInvByPatternOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportInvByPatternOperationCompleted);
            }
            this.InvokeAsync("ImportInvByPattern", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial,
                        convert}, this.ImportInvByPatternOperationCompleted, userState);
        }
        
        private void OnImportInvByPatternOperationCompleted(object arg) {
            if ((this.ImportInvByPatternCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportInvByPatternCompleted(this, new ImportInvByPatternCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deleteInvoiceByFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string deleteInvoiceByFkey(string lstFkey, string username, string password, string Account, string ACpass) {
            object[] results = this.Invoke("deleteInvoiceByFkey", new object[] {
                        lstFkey,
                        username,
                        password,
                        Account,
                        ACpass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deleteInvoiceByFkeyAsync(string lstFkey, string username, string password, string Account, string ACpass) {
            this.deleteInvoiceByFkeyAsync(lstFkey, username, password, Account, ACpass, null);
        }
        
        /// <remarks/>
        public void deleteInvoiceByFkeyAsync(string lstFkey, string username, string password, string Account, string ACpass, object userState) {
            if ((this.deleteInvoiceByFkeyOperationCompleted == null)) {
                this.deleteInvoiceByFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteInvoiceByFkeyOperationCompleted);
            }
            this.InvokeAsync("deleteInvoiceByFkey", new object[] {
                        lstFkey,
                        username,
                        password,
                        Account,
                        ACpass}, this.deleteInvoiceByFkeyOperationCompleted, userState);
        }
        
        private void OndeleteInvoiceByFkeyOperationCompleted(object arg) {
            if ((this.deleteInvoiceByFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteInvoiceByFkeyCompleted(this, new deleteInvoiceByFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInvDataByFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetInvDataByFkey(string fkey, string userName, string userPass, string account, string accPass, string pattern) {
            object[] results = this.Invoke("GetInvDataByFkey", new object[] {
                        fkey,
                        userName,
                        userPass,
                        account,
                        accPass,
                        pattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetInvDataByFkeyAsync(string fkey, string userName, string userPass, string account, string accPass, string pattern) {
            this.GetInvDataByFkeyAsync(fkey, userName, userPass, account, accPass, pattern, null);
        }
        
        /// <remarks/>
        public void GetInvDataByFkeyAsync(string fkey, string userName, string userPass, string account, string accPass, string pattern, object userState) {
            if ((this.GetInvDataByFkeyOperationCompleted == null)) {
                this.GetInvDataByFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvDataByFkeyOperationCompleted);
            }
            this.InvokeAsync("GetInvDataByFkey", new object[] {
                        fkey,
                        userName,
                        userPass,
                        account,
                        accPass,
                        pattern}, this.GetInvDataByFkeyOperationCompleted, userState);
        }
        
        private void OnGetInvDataByFkeyOperationCompleted(object arg) {
            if ((this.GetInvDataByFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvDataByFkeyCompleted(this, new GetInvDataByFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deleteInvoiceByID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string deleteInvoiceByID(string lstID, string username, string password, string Account, string ACpass) {
            object[] results = this.Invoke("deleteInvoiceByID", new object[] {
                        lstID,
                        username,
                        password,
                        Account,
                        ACpass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void deleteInvoiceByIDAsync(string lstID, string username, string password, string Account, string ACpass) {
            this.deleteInvoiceByIDAsync(lstID, username, password, Account, ACpass, null);
        }
        
        /// <remarks/>
        public void deleteInvoiceByIDAsync(string lstID, string username, string password, string Account, string ACpass, object userState) {
            if ((this.deleteInvoiceByIDOperationCompleted == null)) {
                this.deleteInvoiceByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteInvoiceByIDOperationCompleted);
            }
            this.InvokeAsync("deleteInvoiceByID", new object[] {
                        lstID,
                        username,
                        password,
                        Account,
                        ACpass}, this.deleteInvoiceByIDOperationCompleted, userState);
        }
        
        private void OndeleteInvoiceByIDOperationCompleted(object arg) {
            if ((this.deleteInvoiceByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteInvoiceByIDCompleted(this, new deleteInvoiceByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/publishInv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string publishInv(int[] invIDs, string username, string password, string pattern, string serial) {
            object[] results = this.Invoke("publishInv", new object[] {
                        invIDs,
                        username,
                        password,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void publishInvAsync(int[] invIDs, string username, string password, string pattern, string serial) {
            this.publishInvAsync(invIDs, username, password, pattern, serial, null);
        }
        
        /// <remarks/>
        public void publishInvAsync(int[] invIDs, string username, string password, string pattern, string serial, object userState) {
            if ((this.publishInvOperationCompleted == null)) {
                this.publishInvOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpublishInvOperationCompleted);
            }
            this.InvokeAsync("publishInv", new object[] {
                        invIDs,
                        username,
                        password,
                        pattern,
                        serial}, this.publishInvOperationCompleted, userState);
        }
        
        private void OnpublishInvOperationCompleted(object arg) {
            if ((this.publishInvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.publishInvCompleted(this, new publishInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PrintNoticeInvError", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PrintNoticeInvError(string mtdiep, string username, string password) {
            object[] results = this.Invoke("PrintNoticeInvError", new object[] {
                        mtdiep,
                        username,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PrintNoticeInvErrorAsync(string mtdiep, string username, string password) {
            this.PrintNoticeInvErrorAsync(mtdiep, username, password, null);
        }
        
        /// <remarks/>
        public void PrintNoticeInvErrorAsync(string mtdiep, string username, string password, object userState) {
            if ((this.PrintNoticeInvErrorOperationCompleted == null)) {
                this.PrintNoticeInvErrorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrintNoticeInvErrorOperationCompleted);
            }
            this.InvokeAsync("PrintNoticeInvError", new object[] {
                        mtdiep,
                        username,
                        password}, this.PrintNoticeInvErrorOperationCompleted, userState);
        }
        
        private void OnPrintNoticeInvErrorOperationCompleted(object arg) {
            if ((this.PrintNoticeInvErrorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrintNoticeInvErrorCompleted(this, new PrintNoticeInvErrorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PrintNoticeInvErrorCQT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PrintNoticeInvErrorCQT(string mtdiep, string username, string password) {
            object[] results = this.Invoke("PrintNoticeInvErrorCQT", new object[] {
                        mtdiep,
                        username,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PrintNoticeInvErrorCQTAsync(string mtdiep, string username, string password) {
            this.PrintNoticeInvErrorCQTAsync(mtdiep, username, password, null);
        }
        
        /// <remarks/>
        public void PrintNoticeInvErrorCQTAsync(string mtdiep, string username, string password, object userState) {
            if ((this.PrintNoticeInvErrorCQTOperationCompleted == null)) {
                this.PrintNoticeInvErrorCQTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrintNoticeInvErrorCQTOperationCompleted);
            }
            this.InvokeAsync("PrintNoticeInvErrorCQT", new object[] {
                        mtdiep,
                        username,
                        password}, this.PrintNoticeInvErrorCQTOperationCompleted, userState);
        }
        
        private void OnPrintNoticeInvErrorCQTOperationCompleted(object arg) {
            if ((this.PrintNoticeInvErrorCQTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrintNoticeInvErrorCQTCompleted(this, new PrintNoticeInvErrorCQTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PublishInvFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PublishInvFkey(string Account, string ACpass, string lsFkey, string username, string password, string pattern, string serial) {
            object[] results = this.Invoke("PublishInvFkey", new object[] {
                        Account,
                        ACpass,
                        lsFkey,
                        username,
                        password,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PublishInvFkeyAsync(string Account, string ACpass, string lsFkey, string username, string password, string pattern, string serial) {
            this.PublishInvFkeyAsync(Account, ACpass, lsFkey, username, password, pattern, serial, null);
        }
        
        /// <remarks/>
        public void PublishInvFkeyAsync(string Account, string ACpass, string lsFkey, string username, string password, string pattern, string serial, object userState) {
            if ((this.PublishInvFkeyOperationCompleted == null)) {
                this.PublishInvFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishInvFkeyOperationCompleted);
            }
            this.InvokeAsync("PublishInvFkey", new object[] {
                        Account,
                        ACpass,
                        lsFkey,
                        username,
                        password,
                        pattern,
                        serial}, this.PublishInvFkeyOperationCompleted, userState);
        }
        
        private void OnPublishInvFkeyOperationCompleted(object arg) {
            if ((this.PublishInvFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishInvFkeyCompleted(this, new PublishInvFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PublishInvByDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PublishInvByDate(string Account, string ACpass, string username, string password, string FromDate, string ToDate) {
            object[] results = this.Invoke("PublishInvByDate", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        FromDate,
                        ToDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PublishInvByDateAsync(string Account, string ACpass, string username, string password, string FromDate, string ToDate) {
            this.PublishInvByDateAsync(Account, ACpass, username, password, FromDate, ToDate, null);
        }
        
        /// <remarks/>
        public void PublishInvByDateAsync(string Account, string ACpass, string username, string password, string FromDate, string ToDate, object userState) {
            if ((this.PublishInvByDateOperationCompleted == null)) {
                this.PublishInvByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishInvByDateOperationCompleted);
            }
            this.InvokeAsync("PublishInvByDate", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        FromDate,
                        ToDate}, this.PublishInvByDateOperationCompleted, userState);
        }
        
        private void OnPublishInvByDateOperationCompleted(object arg) {
            if ((this.PublishInvByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishInvByDateCompleted(this, new PublishInvByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateCus(string XMLCusData, string username, string pass, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> convert) {
            object[] results = this.Invoke("UpdateCus", new object[] {
                        XMLCusData,
                        username,
                        pass,
                        convert});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateCusAsync(string XMLCusData, string username, string pass, System.Nullable<int> convert) {
            this.UpdateCusAsync(XMLCusData, username, pass, convert, null);
        }
        
        /// <remarks/>
        public void UpdateCusAsync(string XMLCusData, string username, string pass, System.Nullable<int> convert, object userState) {
            if ((this.UpdateCusOperationCompleted == null)) {
                this.UpdateCusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCusOperationCompleted);
            }
            this.InvokeAsync("UpdateCus", new object[] {
                        XMLCusData,
                        username,
                        pass,
                        convert}, this.UpdateCusOperationCompleted, userState);
        }
        
        private void OnUpdateCusOperationCompleted(object arg) {
            if ((this.UpdateCusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCusCompleted(this, new UpdateCusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setCusCert", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int setCusCert(string certSerial, string certString, string cusCode, string username, string pass) {
            object[] results = this.Invoke("setCusCert", new object[] {
                        certSerial,
                        certString,
                        cusCode,
                        username,
                        pass});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void setCusCertAsync(string certSerial, string certString, string cusCode, string username, string pass) {
            this.setCusCertAsync(certSerial, certString, cusCode, username, pass, null);
        }
        
        /// <remarks/>
        public void setCusCertAsync(string certSerial, string certString, string cusCode, string username, string pass, object userState) {
            if ((this.setCusCertOperationCompleted == null)) {
                this.setCusCertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetCusCertOperationCompleted);
            }
            this.InvokeAsync("setCusCert", new object[] {
                        certSerial,
                        certString,
                        cusCode,
                        username,
                        pass}, this.setCusCertOperationCompleted, userState);
        }
        
        private void OnsetCusCertOperationCompleted(object arg) {
            if ((this.setCusCertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setCusCertCompleted(this, new setCusCertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCertInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCertInfo(string userName, string password) {
            object[] results = this.Invoke("GetCertInfo", new object[] {
                        userName,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCertInfoAsync(string userName, string password) {
            this.GetCertInfoAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void GetCertInfoAsync(string userName, string password, object userState) {
            if ((this.GetCertInfoOperationCompleted == null)) {
                this.GetCertInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCertInfoOperationCompleted);
            }
            this.InvokeAsync("GetCertInfo", new object[] {
                        userName,
                        password}, this.GetCertInfoOperationCompleted, userState);
        }
        
        private void OnGetCertInfoOperationCompleted(object arg) {
            if ((this.GetCertInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCertInfoCompleted(this, new GetCertInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncInfomation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string syncInfomation(string Account, string ACpass, string req) {
            object[] results = this.Invoke("syncInfomation", new object[] {
                        Account,
                        ACpass,
                        req});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void syncInfomationAsync(string Account, string ACpass, string req) {
            this.syncInfomationAsync(Account, ACpass, req, null);
        }
        
        /// <remarks/>
        public void syncInfomationAsync(string Account, string ACpass, string req, object userState) {
            if ((this.syncInfomationOperationCompleted == null)) {
                this.syncInfomationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsyncInfomationOperationCompleted);
            }
            this.InvokeAsync("syncInfomation", new object[] {
                        Account,
                        ACpass,
                        req}, this.syncInfomationOperationCompleted, userState);
        }
        
        private void OnsyncInfomationOperationCompleted(object arg) {
            if ((this.syncInfomationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.syncInfomationCompleted(this, new syncInfomationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SignIn", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SignIn(string userName, string pass) {
            object[] results = this.Invoke("SignIn", new object[] {
                        userName,
                        pass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SignInAsync(string userName, string pass) {
            this.SignInAsync(userName, pass, null);
        }
        
        /// <remarks/>
        public void SignInAsync(string userName, string pass, object userState) {
            if ((this.SignInOperationCompleted == null)) {
                this.SignInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSignInOperationCompleted);
            }
            this.InvokeAsync("SignIn", new object[] {
                        userName,
                        pass}, this.SignInOperationCompleted, userState);
        }
        
        private void OnSignInOperationCompleted(object arg) {
            if ((this.SignInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SignInCompleted(this, new SignInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/resetPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string resetPassword(string Account, string oldPass, string newPass) {
            object[] results = this.Invoke("resetPassword", new object[] {
                        Account,
                        oldPass,
                        newPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void resetPasswordAsync(string Account, string oldPass, string newPass) {
            this.resetPasswordAsync(Account, oldPass, newPass, null);
        }
        
        /// <remarks/>
        public void resetPasswordAsync(string Account, string oldPass, string newPass, object userState) {
            if ((this.resetPasswordOperationCompleted == null)) {
                this.resetPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnresetPasswordOperationCompleted);
            }
            this.InvokeAsync("resetPassword", new object[] {
                        Account,
                        oldPass,
                        newPass}, this.resetPasswordOperationCompleted, userState);
        }
        
        private void OnresetPasswordOperationCompleted(object arg) {
            if ((this.resetPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.resetPasswordCompleted(this, new resetPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AppClientSyncInfoSystem", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AppClientSyncInfoSystem(string Account, string ACpass, string req) {
            object[] results = this.Invoke("AppClientSyncInfoSystem", new object[] {
                        Account,
                        ACpass,
                        req});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AppClientSyncInfoSystemAsync(string Account, string ACpass, string req) {
            this.AppClientSyncInfoSystemAsync(Account, ACpass, req, null);
        }
        
        /// <remarks/>
        public void AppClientSyncInfoSystemAsync(string Account, string ACpass, string req, object userState) {
            if ((this.AppClientSyncInfoSystemOperationCompleted == null)) {
                this.AppClientSyncInfoSystemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAppClientSyncInfoSystemOperationCompleted);
            }
            this.InvokeAsync("AppClientSyncInfoSystem", new object[] {
                        Account,
                        ACpass,
                        req}, this.AppClientSyncInfoSystemOperationCompleted, userState);
        }
        
        private void OnAppClientSyncInfoSystemOperationCompleted(object arg) {
            if ((this.AppClientSyncInfoSystemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AppClientSyncInfoSystemCompleted(this, new AppClientSyncInfoSystemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCurrentNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getCurrentNo(string account, string pass, string pattern, string serial) {
            object[] results = this.Invoke("getCurrentNo", new object[] {
                        account,
                        pass,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getCurrentNoAsync(string account, string pass, string pattern, string serial) {
            this.getCurrentNoAsync(account, pass, pattern, serial, null);
        }
        
        /// <remarks/>
        public void getCurrentNoAsync(string account, string pass, string pattern, string serial, object userState) {
            if ((this.getCurrentNoOperationCompleted == null)) {
                this.getCurrentNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCurrentNoOperationCompleted);
            }
            this.InvokeAsync("getCurrentNo", new object[] {
                        account,
                        pass,
                        pattern,
                        serial}, this.getCurrentNoOperationCompleted, userState);
        }
        
        private void OngetCurrentNoOperationCompleted(object arg) {
            if ((this.getCurrentNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCurrentNoCompleted(this, new getCurrentNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncClientInv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string syncClientInv(string username, string password, string xmlInvData, int convert) {
            object[] results = this.Invoke("syncClientInv", new object[] {
                        username,
                        password,
                        xmlInvData,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void syncClientInvAsync(string username, string password, string xmlInvData, int convert) {
            this.syncClientInvAsync(username, password, xmlInvData, convert, null);
        }
        
        /// <remarks/>
        public void syncClientInvAsync(string username, string password, string xmlInvData, int convert, object userState) {
            if ((this.syncClientInvOperationCompleted == null)) {
                this.syncClientInvOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsyncClientInvOperationCompleted);
            }
            this.InvokeAsync("syncClientInv", new object[] {
                        username,
                        password,
                        xmlInvData,
                        convert}, this.syncClientInvOperationCompleted, userState);
        }
        
        private void OnsyncClientInvOperationCompleted(object arg) {
            if ((this.syncClientInvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.syncClientInvCompleted(this, new syncClientInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string updateInvoice(string username, string password, string xmlInvData) {
            object[] results = this.Invoke("updateInvoice", new object[] {
                        username,
                        password,
                        xmlInvData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updateInvoiceAsync(string username, string password, string xmlInvData) {
            this.updateInvoiceAsync(username, password, xmlInvData, null);
        }
        
        /// <remarks/>
        public void updateInvoiceAsync(string username, string password, string xmlInvData, object userState) {
            if ((this.updateInvoiceOperationCompleted == null)) {
                this.updateInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateInvoiceOperationCompleted);
            }
            this.InvokeAsync("updateInvoice", new object[] {
                        username,
                        password,
                        xmlInvData}, this.updateInvoiceOperationCompleted, userState);
        }
        
        private void OnupdateInvoiceOperationCompleted(object arg) {
            if ((this.updateInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateInvoiceCompleted(this, new updateInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncDecision", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string syncDecision(string Account, string Pass, string xmlDecision) {
            object[] results = this.Invoke("syncDecision", new object[] {
                        Account,
                        Pass,
                        xmlDecision});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void syncDecisionAsync(string Account, string Pass, string xmlDecision) {
            this.syncDecisionAsync(Account, Pass, xmlDecision, null);
        }
        
        /// <remarks/>
        public void syncDecisionAsync(string Account, string Pass, string xmlDecision, object userState) {
            if ((this.syncDecisionOperationCompleted == null)) {
                this.syncDecisionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsyncDecisionOperationCompleted);
            }
            this.InvokeAsync("syncDecision", new object[] {
                        Account,
                        Pass,
                        xmlDecision}, this.syncDecisionOperationCompleted, userState);
        }
        
        private void OnsyncDecisionOperationCompleted(object arg) {
            if ((this.syncDecisionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.syncDecisionCompleted(this, new syncDecisionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncPublish", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string syncPublish(string Account, string Pass, string xmlPublish) {
            object[] results = this.Invoke("syncPublish", new object[] {
                        Account,
                        Pass,
                        xmlPublish});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void syncPublishAsync(string Account, string Pass, string xmlPublish) {
            this.syncPublishAsync(Account, Pass, xmlPublish, null);
        }
        
        /// <remarks/>
        public void syncPublishAsync(string Account, string Pass, string xmlPublish, object userState) {
            if ((this.syncPublishOperationCompleted == null)) {
                this.syncPublishOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsyncPublishOperationCompleted);
            }
            this.InvokeAsync("syncPublish", new object[] {
                        Account,
                        Pass,
                        xmlPublish}, this.syncPublishOperationCompleted, userState);
        }
        
        private void OnsyncPublishOperationCompleted(object arg) {
            if ((this.syncPublishCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.syncPublishCompleted(this, new syncPublishCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPublishInv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPublishInv(string account, string pass, string comtaxCode) {
            object[] results = this.Invoke("GetPublishInv", new object[] {
                        account,
                        pass,
                        comtaxCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPublishInvAsync(string account, string pass, string comtaxCode) {
            this.GetPublishInvAsync(account, pass, comtaxCode, null);
        }
        
        /// <remarks/>
        public void GetPublishInvAsync(string account, string pass, string comtaxCode, object userState) {
            if ((this.GetPublishInvOperationCompleted == null)) {
                this.GetPublishInvOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPublishInvOperationCompleted);
            }
            this.InvokeAsync("GetPublishInv", new object[] {
                        account,
                        pass,
                        comtaxCode}, this.GetPublishInvOperationCompleted, userState);
        }
        
        private void OnGetPublishInvOperationCompleted(object arg) {
            if ((this.GetPublishInvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPublishInvCompleted(this, new GetPublishInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncInvCancel", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string syncInvCancel(string Account, string Pass, string xmlInvCancel) {
            object[] results = this.Invoke("syncInvCancel", new object[] {
                        Account,
                        Pass,
                        xmlInvCancel});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void syncInvCancelAsync(string Account, string Pass, string xmlInvCancel) {
            this.syncInvCancelAsync(Account, Pass, xmlInvCancel, null);
        }
        
        /// <remarks/>
        public void syncInvCancelAsync(string Account, string Pass, string xmlInvCancel, object userState) {
            if ((this.syncInvCancelOperationCompleted == null)) {
                this.syncInvCancelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsyncInvCancelOperationCompleted);
            }
            this.InvokeAsync("syncInvCancel", new object[] {
                        Account,
                        Pass,
                        xmlInvCancel}, this.syncInvCancelOperationCompleted, userState);
        }
        
        private void OnsyncInvCancelOperationCompleted(object arg) {
            if ((this.syncInvCancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.syncInvCancelCompleted(this, new syncInvCancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getDateTimeServer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getDateTimeServer(string Account, string Pass) {
            object[] results = this.Invoke("getDateTimeServer", new object[] {
                        Account,
                        Pass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDateTimeServerAsync(string Account, string Pass) {
            this.getDateTimeServerAsync(Account, Pass, null);
        }
        
        /// <remarks/>
        public void getDateTimeServerAsync(string Account, string Pass, object userState) {
            if ((this.getDateTimeServerOperationCompleted == null)) {
                this.getDateTimeServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDateTimeServerOperationCompleted);
            }
            this.InvokeAsync("getDateTimeServer", new object[] {
                        Account,
                        Pass}, this.getDateTimeServerOperationCompleted, userState);
        }
        
        private void OngetDateTimeServerOperationCompleted(object arg) {
            if ((this.getDateTimeServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDateTimeServerCompleted(this, new getDateTimeServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncClientInvoiceCancel", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string syncClientInvoiceCancel(string Account, string Pass, string xmlInvoiceCancel) {
            object[] results = this.Invoke("syncClientInvoiceCancel", new object[] {
                        Account,
                        Pass,
                        xmlInvoiceCancel});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void syncClientInvoiceCancelAsync(string Account, string Pass, string xmlInvoiceCancel) {
            this.syncClientInvoiceCancelAsync(Account, Pass, xmlInvoiceCancel, null);
        }
        
        /// <remarks/>
        public void syncClientInvoiceCancelAsync(string Account, string Pass, string xmlInvoiceCancel, object userState) {
            if ((this.syncClientInvoiceCancelOperationCompleted == null)) {
                this.syncClientInvoiceCancelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsyncClientInvoiceCancelOperationCompleted);
            }
            this.InvokeAsync("syncClientInvoiceCancel", new object[] {
                        Account,
                        Pass,
                        xmlInvoiceCancel}, this.syncClientInvoiceCancelOperationCompleted, userState);
        }
        
        private void OnsyncClientInvoiceCancelOperationCompleted(object arg) {
            if ((this.syncClientInvoiceCancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.syncClientInvoiceCancelCompleted(this, new syncClientInvoiceCancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConvertForVerify", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ConvertForVerify(string Account, string Pass, int Id) {
            object[] results = this.Invoke("ConvertForVerify", new object[] {
                        Account,
                        Pass,
                        Id});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ConvertForVerifyAsync(string Account, string Pass, int Id) {
            this.ConvertForVerifyAsync(Account, Pass, Id, null);
        }
        
        /// <remarks/>
        public void ConvertForVerifyAsync(string Account, string Pass, int Id, object userState) {
            if ((this.ConvertForVerifyOperationCompleted == null)) {
                this.ConvertForVerifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertForVerifyOperationCompleted);
            }
            this.InvokeAsync("ConvertForVerify", new object[] {
                        Account,
                        Pass,
                        Id}, this.ConvertForVerifyOperationCompleted, userState);
        }
        
        private void OnConvertForVerifyOperationCompleted(object arg) {
            if ((this.ConvertForVerifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertForVerifyCompleted(this, new ConvertForVerifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/sendEmail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string sendEmail(string username) {
            object[] results = this.Invoke("sendEmail", new object[] {
                        username});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendEmailAsync(string username) {
            this.sendEmailAsync(username, null);
        }
        
        /// <remarks/>
        public void sendEmailAsync(string username, object userState) {
            if ((this.sendEmailOperationCompleted == null)) {
                this.sendEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendEmailOperationCompleted);
            }
            this.InvokeAsync("sendEmail", new object[] {
                        username}, this.sendEmailOperationCompleted, userState);
        }
        
        private void OnsendEmailOperationCompleted(object arg) {
            if ((this.sendEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendEmailCompleted(this, new sendEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncCert", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string syncCert(string Account, string Pass, string xmlCert) {
            object[] results = this.Invoke("syncCert", new object[] {
                        Account,
                        Pass,
                        xmlCert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void syncCertAsync(string Account, string Pass, string xmlCert) {
            this.syncCertAsync(Account, Pass, xmlCert, null);
        }
        
        /// <remarks/>
        public void syncCertAsync(string Account, string Pass, string xmlCert, object userState) {
            if ((this.syncCertOperationCompleted == null)) {
                this.syncCertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsyncCertOperationCompleted);
            }
            this.InvokeAsync("syncCert", new object[] {
                        Account,
                        Pass,
                        xmlCert}, this.syncCertOperationCompleted, userState);
        }
        
        private void OnsyncCertOperationCompleted(object arg) {
            if ((this.syncCertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.syncCertCompleted(this, new syncCertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncInvoicev2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string syncInvoicev2(string username, string password, string comtaxCode, string currentYear, string lastSync) {
            object[] results = this.Invoke("syncInvoicev2", new object[] {
                        username,
                        password,
                        comtaxCode,
                        currentYear,
                        lastSync});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void syncInvoicev2Async(string username, string password, string comtaxCode, string currentYear, string lastSync) {
            this.syncInvoicev2Async(username, password, comtaxCode, currentYear, lastSync, null);
        }
        
        /// <remarks/>
        public void syncInvoicev2Async(string username, string password, string comtaxCode, string currentYear, string lastSync, object userState) {
            if ((this.syncInvoicev2OperationCompleted == null)) {
                this.syncInvoicev2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnsyncInvoicev2OperationCompleted);
            }
            this.InvokeAsync("syncInvoicev2", new object[] {
                        username,
                        password,
                        comtaxCode,
                        currentYear,
                        lastSync}, this.syncInvoicev2OperationCompleted, userState);
        }
        
        private void OnsyncInvoicev2OperationCompleted(object arg) {
            if ((this.syncInvoicev2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.syncInvoicev2Completed(this, new syncInvoicev2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string syncInvoice(string username, string password, string comtaxCode, string lastSync) {
            object[] results = this.Invoke("syncInvoice", new object[] {
                        username,
                        password,
                        comtaxCode,
                        lastSync});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void syncInvoiceAsync(string username, string password, string comtaxCode, string lastSync) {
            this.syncInvoiceAsync(username, password, comtaxCode, lastSync, null);
        }
        
        /// <remarks/>
        public void syncInvoiceAsync(string username, string password, string comtaxCode, string lastSync, object userState) {
            if ((this.syncInvoiceOperationCompleted == null)) {
                this.syncInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsyncInvoiceOperationCompleted);
            }
            this.InvokeAsync("syncInvoice", new object[] {
                        username,
                        password,
                        comtaxCode,
                        lastSync}, this.syncInvoiceOperationCompleted, userState);
        }
        
        private void OnsyncInvoiceOperationCompleted(object arg) {
            if ((this.syncInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.syncInvoiceCompleted(this, new syncInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSingleInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSingleInvoice(string username, string password, string comtaxcode, string pattern, string serial, string notax, int isReSync) {
            object[] results = this.Invoke("GetSingleInvoice", new object[] {
                        username,
                        password,
                        comtaxcode,
                        pattern,
                        serial,
                        notax,
                        isReSync});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSingleInvoiceAsync(string username, string password, string comtaxcode, string pattern, string serial, string notax, int isReSync) {
            this.GetSingleInvoiceAsync(username, password, comtaxcode, pattern, serial, notax, isReSync, null);
        }
        
        /// <remarks/>
        public void GetSingleInvoiceAsync(string username, string password, string comtaxcode, string pattern, string serial, string notax, int isReSync, object userState) {
            if ((this.GetSingleInvoiceOperationCompleted == null)) {
                this.GetSingleInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSingleInvoiceOperationCompleted);
            }
            this.InvokeAsync("GetSingleInvoice", new object[] {
                        username,
                        password,
                        comtaxcode,
                        pattern,
                        serial,
                        notax,
                        isReSync}, this.GetSingleInvoiceOperationCompleted, userState);
        }
        
        private void OnGetSingleInvoiceOperationCompleted(object arg) {
            if ((this.GetSingleInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSingleInvoiceCompleted(this, new GetSingleInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PaymentForVerify", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PaymentForVerify(string Account, string Pass, int Id, int payment, string note) {
            object[] results = this.Invoke("PaymentForVerify", new object[] {
                        Account,
                        Pass,
                        Id,
                        payment,
                        note});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentForVerifyAsync(string Account, string Pass, int Id, int payment, string note) {
            this.PaymentForVerifyAsync(Account, Pass, Id, payment, note, null);
        }
        
        /// <remarks/>
        public void PaymentForVerifyAsync(string Account, string Pass, int Id, int payment, string note, object userState) {
            if ((this.PaymentForVerifyOperationCompleted == null)) {
                this.PaymentForVerifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentForVerifyOperationCompleted);
            }
            this.InvokeAsync("PaymentForVerify", new object[] {
                        Account,
                        Pass,
                        Id,
                        payment,
                        note}, this.PaymentForVerifyOperationCompleted, userState);
        }
        
        private void OnPaymentForVerifyOperationCompleted(object arg) {
            if ((this.PaymentForVerifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentForVerifyCompleted(this, new PaymentForVerifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/sendEmailAgain", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string sendEmailAgain(string username, string pattern, string xmlInvData) {
            object[] results = this.Invoke("sendEmailAgain", new object[] {
                        username,
                        pattern,
                        xmlInvData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendEmailAgainAsync(string username, string pattern, string xmlInvData) {
            this.sendEmailAgainAsync(username, pattern, xmlInvData, null);
        }
        
        /// <remarks/>
        public void sendEmailAgainAsync(string username, string pattern, string xmlInvData, object userState) {
            if ((this.sendEmailAgainOperationCompleted == null)) {
                this.sendEmailAgainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendEmailAgainOperationCompleted);
            }
            this.InvokeAsync("sendEmailAgain", new object[] {
                        username,
                        pattern,
                        xmlInvData}, this.sendEmailAgainOperationCompleted, userState);
        }
        
        private void OnsendEmailAgainOperationCompleted(object arg) {
            if ((this.sendEmailAgainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendEmailAgainCompleted(this, new sendEmailAgainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getHashInvWithToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getHashInvWithToken(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert) {
            object[] results = this.Invoke("getHashInvWithToken", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        serialCert,
                        type,
                        invToken,
                        pattern,
                        serial,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getHashInvWithTokenAsync(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert) {
            this.getHashInvWithTokenAsync(Account, ACpass, xmlInvData, username, password, serialCert, type, invToken, pattern, serial, convert, null);
        }
        
        /// <remarks/>
        public void getHashInvWithTokenAsync(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert, object userState) {
            if ((this.getHashInvWithTokenOperationCompleted == null)) {
                this.getHashInvWithTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHashInvWithTokenOperationCompleted);
            }
            this.InvokeAsync("getHashInvWithToken", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        serialCert,
                        type,
                        invToken,
                        pattern,
                        serial,
                        convert}, this.getHashInvWithTokenOperationCompleted, userState);
        }
        
        private void OngetHashInvWithTokenOperationCompleted(object arg) {
            if ((this.getHashInvWithTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getHashInvWithTokenCompleted(this, new getHashInvWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/publishInvWithToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string publishInvWithToken(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial) {
            object[] results = this.Invoke("publishInvWithToken", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void publishInvWithTokenAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial) {
            this.publishInvWithTokenAsync(Account, ACpass, xmlInvData, username, password, pattern, serial, null);
        }
        
        /// <remarks/>
        public void publishInvWithTokenAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, object userState) {
            if ((this.publishInvWithTokenOperationCompleted == null)) {
                this.publishInvWithTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpublishInvWithTokenOperationCompleted);
            }
            this.InvokeAsync("publishInvWithToken", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial}, this.publishInvWithTokenOperationCompleted, userState);
        }
        
        private void OnpublishInvWithTokenOperationCompleted(object arg) {
            if ((this.publishInvWithTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.publishInvWithTokenCompleted(this, new publishInvWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdjustReplaceInvWithToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdjustReplaceInvWithToken(string Account, string ACpass, string xmlInvData, string username, string password, int type, string pattern, string serial) {
            object[] results = this.Invoke("AdjustReplaceInvWithToken", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        type,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustReplaceInvWithTokenAsync(string Account, string ACpass, string xmlInvData, string username, string password, int type, string pattern, string serial) {
            this.AdjustReplaceInvWithTokenAsync(Account, ACpass, xmlInvData, username, password, type, pattern, serial, null);
        }
        
        /// <remarks/>
        public void AdjustReplaceInvWithTokenAsync(string Account, string ACpass, string xmlInvData, string username, string password, int type, string pattern, string serial, object userState) {
            if ((this.AdjustReplaceInvWithTokenOperationCompleted == null)) {
                this.AdjustReplaceInvWithTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustReplaceInvWithTokenOperationCompleted);
            }
            this.InvokeAsync("AdjustReplaceInvWithToken", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        type,
                        pattern,
                        serial}, this.AdjustReplaceInvWithTokenOperationCompleted, userState);
        }
        
        private void OnAdjustReplaceInvWithTokenOperationCompleted(object arg) {
            if ((this.AdjustReplaceInvWithTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustReplaceInvWithTokenCompleted(this, new AdjustReplaceInvWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelInvoiceWithToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CancelInvoiceWithToken(string Account, string ACpass, string xmlData, string username, string password, string pattern) {
            object[] results = this.Invoke("CancelInvoiceWithToken", new object[] {
                        Account,
                        ACpass,
                        xmlData,
                        username,
                        password,
                        pattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CancelInvoiceWithTokenAsync(string Account, string ACpass, string xmlData, string username, string password, string pattern) {
            this.CancelInvoiceWithTokenAsync(Account, ACpass, xmlData, username, password, pattern, null);
        }
        
        /// <remarks/>
        public void CancelInvoiceWithTokenAsync(string Account, string ACpass, string xmlData, string username, string password, string pattern, object userState) {
            if ((this.CancelInvoiceWithTokenOperationCompleted == null)) {
                this.CancelInvoiceWithTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelInvoiceWithTokenOperationCompleted);
            }
            this.InvokeAsync("CancelInvoiceWithToken", new object[] {
                        Account,
                        ACpass,
                        xmlData,
                        username,
                        password,
                        pattern}, this.CancelInvoiceWithTokenOperationCompleted, userState);
        }
        
        private void OnCancelInvoiceWithTokenOperationCompleted(object arg) {
            if ((this.CancelInvoiceWithTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelInvoiceWithTokenCompleted(this, new CancelInvoiceWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/rolBackWithToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string rolBackWithToken(string Account, string ACpass, string id, string username, string password, string pattern) {
            object[] results = this.Invoke("rolBackWithToken", new object[] {
                        Account,
                        ACpass,
                        id,
                        username,
                        password,
                        pattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void rolBackWithTokenAsync(string Account, string ACpass, string id, string username, string password, string pattern) {
            this.rolBackWithTokenAsync(Account, ACpass, id, username, password, pattern, null);
        }
        
        /// <remarks/>
        public void rolBackWithTokenAsync(string Account, string ACpass, string id, string username, string password, string pattern, object userState) {
            if ((this.rolBackWithTokenOperationCompleted == null)) {
                this.rolBackWithTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrolBackWithTokenOperationCompleted);
            }
            this.InvokeAsync("rolBackWithToken", new object[] {
                        Account,
                        ACpass,
                        id,
                        username,
                        password,
                        pattern}, this.rolBackWithTokenOperationCompleted, userState);
        }
        
        private void OnrolBackWithTokenOperationCompleted(object arg) {
            if ((this.rolBackWithTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.rolBackWithTokenCompleted(this, new rolBackWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/importCertWithToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string importCertWithToken(string Account, string ACpass, string username, string password, string certStr) {
            object[] results = this.Invoke("importCertWithToken", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        certStr});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void importCertWithTokenAsync(string Account, string ACpass, string username, string password, string certStr) {
            this.importCertWithTokenAsync(Account, ACpass, username, password, certStr, null);
        }
        
        /// <remarks/>
        public void importCertWithTokenAsync(string Account, string ACpass, string username, string password, string certStr, object userState) {
            if ((this.importCertWithTokenOperationCompleted == null)) {
                this.importCertWithTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnimportCertWithTokenOperationCompleted);
            }
            this.InvokeAsync("importCertWithToken", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        certStr}, this.importCertWithTokenOperationCompleted, userState);
        }
        
        private void OnimportCertWithTokenOperationCompleted(object arg) {
            if ((this.importCertWithTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.importCertWithTokenCompleted(this, new importCertWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getStatusInv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getStatusInv(string Account, string ACpass, string username, string password, string xmlFkeyInv, string pattern) {
            object[] results = this.Invoke("getStatusInv", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        xmlFkeyInv,
                        pattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getStatusInvAsync(string Account, string ACpass, string username, string password, string xmlFkeyInv, string pattern) {
            this.getStatusInvAsync(Account, ACpass, username, password, xmlFkeyInv, pattern, null);
        }
        
        /// <remarks/>
        public void getStatusInvAsync(string Account, string ACpass, string username, string password, string xmlFkeyInv, string pattern, object userState) {
            if ((this.getStatusInvOperationCompleted == null)) {
                this.getStatusInvOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetStatusInvOperationCompleted);
            }
            this.InvokeAsync("getStatusInv", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        xmlFkeyInv,
                        pattern}, this.getStatusInvOperationCompleted, userState);
        }
        
        private void OngetStatusInvOperationCompleted(object arg) {
            if ((this.getStatusInvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getStatusInvCompleted(this, new getStatusInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getHashInv", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getHashInv(string Account, string ACpass, string username, string password, string serialCert, string xmlFkeyInv, string pattern) {
            object[] results = this.Invoke("getHashInv", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        serialCert,
                        xmlFkeyInv,
                        pattern});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getHashInvAsync(string Account, string ACpass, string username, string password, string serialCert, string xmlFkeyInv, string pattern) {
            this.getHashInvAsync(Account, ACpass, username, password, serialCert, xmlFkeyInv, pattern, null);
        }
        
        /// <remarks/>
        public void getHashInvAsync(string Account, string ACpass, string username, string password, string serialCert, string xmlFkeyInv, string pattern, object userState) {
            if ((this.getHashInvOperationCompleted == null)) {
                this.getHashInvOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHashInvOperationCompleted);
            }
            this.InvokeAsync("getHashInv", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        serialCert,
                        xmlFkeyInv,
                        pattern}, this.getHashInvOperationCompleted, userState);
        }
        
        private void OngetHashInvOperationCompleted(object arg) {
            if ((this.getHashInvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getHashInvCompleted(this, new getHashInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInvoiceByFkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetInvoiceByFkey(string username, string password, string comtaxcode, string pattern, string serial, string notax, string fkey) {
            object[] results = this.Invoke("GetInvoiceByFkey", new object[] {
                        username,
                        password,
                        comtaxcode,
                        pattern,
                        serial,
                        notax,
                        fkey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetInvoiceByFkeyAsync(string username, string password, string comtaxcode, string pattern, string serial, string notax, string fkey) {
            this.GetInvoiceByFkeyAsync(username, password, comtaxcode, pattern, serial, notax, fkey, null);
        }
        
        /// <remarks/>
        public void GetInvoiceByFkeyAsync(string username, string password, string comtaxcode, string pattern, string serial, string notax, string fkey, object userState) {
            if ((this.GetInvoiceByFkeyOperationCompleted == null)) {
                this.GetInvoiceByFkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvoiceByFkeyOperationCompleted);
            }
            this.InvokeAsync("GetInvoiceByFkey", new object[] {
                        username,
                        password,
                        comtaxcode,
                        pattern,
                        serial,
                        notax,
                        fkey}, this.GetInvoiceByFkeyOperationCompleted, userState);
        }
        
        private void OnGetInvoiceByFkeyOperationCompleted(object arg) {
            if ((this.GetInvoiceByFkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvoiceByFkeyCompleted(this, new GetInvoiceByFkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInvoiceByFkeys", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetInvoiceByFkeys(string username, string password, string comtaxcode, string[] fkeys) {
            object[] results = this.Invoke("GetInvoiceByFkeys", new object[] {
                        username,
                        password,
                        comtaxcode,
                        fkeys});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetInvoiceByFkeysAsync(string username, string password, string comtaxcode, string[] fkeys) {
            this.GetInvoiceByFkeysAsync(username, password, comtaxcode, fkeys, null);
        }
        
        /// <remarks/>
        public void GetInvoiceByFkeysAsync(string username, string password, string comtaxcode, string[] fkeys, object userState) {
            if ((this.GetInvoiceByFkeysOperationCompleted == null)) {
                this.GetInvoiceByFkeysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInvoiceByFkeysOperationCompleted);
            }
            this.InvokeAsync("GetInvoiceByFkeys", new object[] {
                        username,
                        password,
                        comtaxcode,
                        fkeys}, this.GetInvoiceByFkeysOperationCompleted, userState);
        }
        
        private void OnGetInvoiceByFkeysOperationCompleted(object arg) {
            if ((this.GetInvoiceByFkeysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInvoiceByFkeysCompleted(this, new GetInvoiceByFkeysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInForPublishCom", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetInForPublishCom(string usernameService, string passwordService, string Pattern, string Serial, string DateFrom, string DateTo) {
            object[] results = this.Invoke("GetInForPublishCom", new object[] {
                        usernameService,
                        passwordService,
                        Pattern,
                        Serial,
                        DateFrom,
                        DateTo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetInForPublishComAsync(string usernameService, string passwordService, string Pattern, string Serial, string DateFrom, string DateTo) {
            this.GetInForPublishComAsync(usernameService, passwordService, Pattern, Serial, DateFrom, DateTo, null);
        }
        
        /// <remarks/>
        public void GetInForPublishComAsync(string usernameService, string passwordService, string Pattern, string Serial, string DateFrom, string DateTo, object userState) {
            if ((this.GetInForPublishComOperationCompleted == null)) {
                this.GetInForPublishComOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInForPublishComOperationCompleted);
            }
            this.InvokeAsync("GetInForPublishCom", new object[] {
                        usernameService,
                        passwordService,
                        Pattern,
                        Serial,
                        DateFrom,
                        DateTo}, this.GetInForPublishComOperationCompleted, userState);
        }
        
        private void OnGetInForPublishComOperationCompleted(object arg) {
            if ((this.GetInForPublishComCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInForPublishComCompleted(this, new GetInForPublishComCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendAgainEmailServ", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendAgainEmailServ(string Account, string ACpass, string username, string password, string xmlDataInvoiceEmail, string hdPattern, string Serial) {
            object[] results = this.Invoke("SendAgainEmailServ", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        xmlDataInvoiceEmail,
                        hdPattern,
                        Serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendAgainEmailServAsync(string Account, string ACpass, string username, string password, string xmlDataInvoiceEmail, string hdPattern, string Serial) {
            this.SendAgainEmailServAsync(Account, ACpass, username, password, xmlDataInvoiceEmail, hdPattern, Serial, null);
        }
        
        /// <remarks/>
        public void SendAgainEmailServAsync(string Account, string ACpass, string username, string password, string xmlDataInvoiceEmail, string hdPattern, string Serial, object userState) {
            if ((this.SendAgainEmailServOperationCompleted == null)) {
                this.SendAgainEmailServOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendAgainEmailServOperationCompleted);
            }
            this.InvokeAsync("SendAgainEmailServ", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        xmlDataInvoiceEmail,
                        hdPattern,
                        Serial}, this.SendAgainEmailServOperationCompleted, userState);
        }
        
        private void OnSendAgainEmailServOperationCompleted(object arg) {
            if ((this.SendAgainEmailServCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendAgainEmailServCompleted(this, new SendAgainEmailServCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDataInvHsm", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDataInvHsm(string Account, string ACpass, string pattern, string serial, decimal no, decimal noNew, string publishDate, string arisingDate, string serialO, int noO, int type, string key, int isUpdate) {
            object[] results = this.Invoke("GetDataInvHsm", new object[] {
                        Account,
                        ACpass,
                        pattern,
                        serial,
                        no,
                        noNew,
                        publishDate,
                        arisingDate,
                        serialO,
                        noO,
                        type,
                        key,
                        isUpdate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataInvHsmAsync(string Account, string ACpass, string pattern, string serial, decimal no, decimal noNew, string publishDate, string arisingDate, string serialO, int noO, int type, string key, int isUpdate) {
            this.GetDataInvHsmAsync(Account, ACpass, pattern, serial, no, noNew, publishDate, arisingDate, serialO, noO, type, key, isUpdate, null);
        }
        
        /// <remarks/>
        public void GetDataInvHsmAsync(string Account, string ACpass, string pattern, string serial, decimal no, decimal noNew, string publishDate, string arisingDate, string serialO, int noO, int type, string key, int isUpdate, object userState) {
            if ((this.GetDataInvHsmOperationCompleted == null)) {
                this.GetDataInvHsmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataInvHsmOperationCompleted);
            }
            this.InvokeAsync("GetDataInvHsm", new object[] {
                        Account,
                        ACpass,
                        pattern,
                        serial,
                        no,
                        noNew,
                        publishDate,
                        arisingDate,
                        serialO,
                        noO,
                        type,
                        key,
                        isUpdate}, this.GetDataInvHsmOperationCompleted, userState);
        }
        
        private void OnGetDataInvHsmOperationCompleted(object arg) {
            if ((this.GetDataInvHsmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataInvHsmCompleted(this, new GetDataInvHsmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportAndPublishInvSignService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportAndPublishInvSignService(string Account, string ACpass, string xmlInvData, string username, string password, int type, string invToken, string pattern, string serial, int convert) {
            object[] results = this.Invoke("ImportAndPublishInvSignService", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        type,
                        invToken,
                        pattern,
                        serial,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportAndPublishInvSignServiceAsync(string Account, string ACpass, string xmlInvData, string username, string password, int type, string invToken, string pattern, string serial, int convert) {
            this.ImportAndPublishInvSignServiceAsync(Account, ACpass, xmlInvData, username, password, type, invToken, pattern, serial, convert, null);
        }
        
        /// <remarks/>
        public void ImportAndPublishInvSignServiceAsync(string Account, string ACpass, string xmlInvData, string username, string password, int type, string invToken, string pattern, string serial, int convert, object userState) {
            if ((this.ImportAndPublishInvSignServiceOperationCompleted == null)) {
                this.ImportAndPublishInvSignServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportAndPublishInvSignServiceOperationCompleted);
            }
            this.InvokeAsync("ImportAndPublishInvSignService", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        type,
                        invToken,
                        pattern,
                        serial,
                        convert}, this.ImportAndPublishInvSignServiceOperationCompleted, userState);
        }
        
        private void OnImportAndPublishInvSignServiceOperationCompleted(object arg) {
            if ((this.ImportAndPublishInvSignServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportAndPublishInvSignServiceCompleted(this, new ImportAndPublishInvSignServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMCCQThueByInvTokens", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMCCQThueByInvTokens(string Account, string ACpass, string username, string password, string invTokens) {
            object[] results = this.Invoke("GetMCCQThueByInvTokens", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        invTokens});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMCCQThueByInvTokensAsync(string Account, string ACpass, string username, string password, string invTokens) {
            this.GetMCCQThueByInvTokensAsync(Account, ACpass, username, password, invTokens, null);
        }
        
        /// <remarks/>
        public void GetMCCQThueByInvTokensAsync(string Account, string ACpass, string username, string password, string invTokens, object userState) {
            if ((this.GetMCCQThueByInvTokensOperationCompleted == null)) {
                this.GetMCCQThueByInvTokensOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMCCQThueByInvTokensOperationCompleted);
            }
            this.InvokeAsync("GetMCCQThueByInvTokens", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        invTokens}, this.GetMCCQThueByInvTokensOperationCompleted, userState);
        }
        
        private void OnGetMCCQThueByInvTokensOperationCompleted(object arg) {
            if ((this.GetMCCQThueByInvTokensCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMCCQThueByInvTokensCompleted(this, new GetMCCQThueByInvTokensCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMCCQThueByFkeys", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMCCQThueByFkeys(string Account, string ACpass, string username, string password, string pattern, string fkeys) {
            object[] results = this.Invoke("GetMCCQThueByFkeys", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        pattern,
                        fkeys});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMCCQThueByFkeysAsync(string Account, string ACpass, string username, string password, string pattern, string fkeys) {
            this.GetMCCQThueByFkeysAsync(Account, ACpass, username, password, pattern, fkeys, null);
        }
        
        /// <remarks/>
        public void GetMCCQThueByFkeysAsync(string Account, string ACpass, string username, string password, string pattern, string fkeys, object userState) {
            if ((this.GetMCCQThueByFkeysOperationCompleted == null)) {
                this.GetMCCQThueByFkeysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMCCQThueByFkeysOperationCompleted);
            }
            this.InvokeAsync("GetMCCQThueByFkeys", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        pattern,
                        fkeys}, this.GetMCCQThueByFkeysOperationCompleted, userState);
        }
        
        private void OnGetMCCQThueByFkeysOperationCompleted(object arg) {
            if ((this.GetMCCQThueByFkeysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMCCQThueByFkeysCompleted(this, new GetMCCQThueByFkeysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMCCQThueByInvTokensNoXMLSign", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMCCQThueByInvTokensNoXMLSign(string Account, string ACpass, string username, string password, string invTokens) {
            object[] results = this.Invoke("GetMCCQThueByInvTokensNoXMLSign", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        invTokens});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMCCQThueByInvTokensNoXMLSignAsync(string Account, string ACpass, string username, string password, string invTokens) {
            this.GetMCCQThueByInvTokensNoXMLSignAsync(Account, ACpass, username, password, invTokens, null);
        }
        
        /// <remarks/>
        public void GetMCCQThueByInvTokensNoXMLSignAsync(string Account, string ACpass, string username, string password, string invTokens, object userState) {
            if ((this.GetMCCQThueByInvTokensNoXMLSignOperationCompleted == null)) {
                this.GetMCCQThueByInvTokensNoXMLSignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMCCQThueByInvTokensNoXMLSignOperationCompleted);
            }
            this.InvokeAsync("GetMCCQThueByInvTokensNoXMLSign", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        invTokens}, this.GetMCCQThueByInvTokensNoXMLSignOperationCompleted, userState);
        }
        
        private void OnGetMCCQThueByInvTokensNoXMLSignOperationCompleted(object arg) {
            if ((this.GetMCCQThueByInvTokensNoXMLSignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMCCQThueByInvTokensNoXMLSignCompleted(this, new GetMCCQThueByInvTokensNoXMLSignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMCCQThueByFkeysNoXMLSign", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMCCQThueByFkeysNoXMLSign(string Account, string ACpass, string username, string password, string pattern, string fkeys) {
            object[] results = this.Invoke("GetMCCQThueByFkeysNoXMLSign", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        pattern,
                        fkeys});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMCCQThueByFkeysNoXMLSignAsync(string Account, string ACpass, string username, string password, string pattern, string fkeys) {
            this.GetMCCQThueByFkeysNoXMLSignAsync(Account, ACpass, username, password, pattern, fkeys, null);
        }
        
        /// <remarks/>
        public void GetMCCQThueByFkeysNoXMLSignAsync(string Account, string ACpass, string username, string password, string pattern, string fkeys, object userState) {
            if ((this.GetMCCQThueByFkeysNoXMLSignOperationCompleted == null)) {
                this.GetMCCQThueByFkeysNoXMLSignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMCCQThueByFkeysNoXMLSignOperationCompleted);
            }
            this.InvokeAsync("GetMCCQThueByFkeysNoXMLSign", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        pattern,
                        fkeys}, this.GetMCCQThueByFkeysNoXMLSignOperationCompleted, userState);
        }
        
        private void OnGetMCCQThueByFkeysNoXMLSignOperationCompleted(object arg) {
            if ((this.GetMCCQThueByFkeysNoXMLSignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMCCQThueByFkeysNoXMLSignCompleted(this, new GetMCCQThueByFkeysNoXMLSignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMCCQThueFromNoToNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMCCQThueFromNoToNo(string invFromNo, string invToNo, string invPattern, string invSerial, bool isXMLData, string Account, string ACpass, string userName, string userPass) {
            object[] results = this.Invoke("GetMCCQThueFromNoToNo", new object[] {
                        invFromNo,
                        invToNo,
                        invPattern,
                        invSerial,
                        isXMLData,
                        Account,
                        ACpass,
                        userName,
                        userPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMCCQThueFromNoToNoAsync(string invFromNo, string invToNo, string invPattern, string invSerial, bool isXMLData, string Account, string ACpass, string userName, string userPass) {
            this.GetMCCQThueFromNoToNoAsync(invFromNo, invToNo, invPattern, invSerial, isXMLData, Account, ACpass, userName, userPass, null);
        }
        
        /// <remarks/>
        public void GetMCCQThueFromNoToNoAsync(string invFromNo, string invToNo, string invPattern, string invSerial, bool isXMLData, string Account, string ACpass, string userName, string userPass, object userState) {
            if ((this.GetMCCQThueFromNoToNoOperationCompleted == null)) {
                this.GetMCCQThueFromNoToNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMCCQThueFromNoToNoOperationCompleted);
            }
            this.InvokeAsync("GetMCCQThueFromNoToNo", new object[] {
                        invFromNo,
                        invToNo,
                        invPattern,
                        invSerial,
                        isXMLData,
                        Account,
                        ACpass,
                        userName,
                        userPass}, this.GetMCCQThueFromNoToNoOperationCompleted, userState);
        }
        
        private void OnGetMCCQThueFromNoToNoOperationCompleted(object arg) {
            if ((this.GetMCCQThueFromNoToNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMCCQThueFromNoToNoCompleted(this, new GetMCCQThueFromNoToNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendInvToCQTByFkeys", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendInvToCQTByFkeys(string Account, string ACpass, string username, string password, string pattern, string fkeys) {
            object[] results = this.Invoke("SendInvToCQTByFkeys", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        pattern,
                        fkeys});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendInvToCQTByFkeysAsync(string Account, string ACpass, string username, string password, string pattern, string fkeys) {
            this.SendInvToCQTByFkeysAsync(Account, ACpass, username, password, pattern, fkeys, null);
        }
        
        /// <remarks/>
        public void SendInvToCQTByFkeysAsync(string Account, string ACpass, string username, string password, string pattern, string fkeys, object userState) {
            if ((this.SendInvToCQTByFkeysOperationCompleted == null)) {
                this.SendInvToCQTByFkeysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendInvToCQTByFkeysOperationCompleted);
            }
            this.InvokeAsync("SendInvToCQTByFkeys", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        pattern,
                        fkeys}, this.SendInvToCQTByFkeysOperationCompleted, userState);
        }
        
        private void OnSendInvToCQTByFkeysOperationCompleted(object arg) {
            if ((this.SendInvToCQTByFkeysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendInvToCQTByFkeysCompleted(this, new SendInvToCQTByFkeysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendInvToCQTByInvTokens", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendInvToCQTByInvTokens(string Account, string ACpass, string username, string password, string invTokens) {
            object[] results = this.Invoke("SendInvToCQTByInvTokens", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        invTokens});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendInvToCQTByInvTokensAsync(string Account, string ACpass, string username, string password, string invTokens) {
            this.SendInvToCQTByInvTokensAsync(Account, ACpass, username, password, invTokens, null);
        }
        
        /// <remarks/>
        public void SendInvToCQTByInvTokensAsync(string Account, string ACpass, string username, string password, string invTokens, object userState) {
            if ((this.SendInvToCQTByInvTokensOperationCompleted == null)) {
                this.SendInvToCQTByInvTokensOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendInvToCQTByInvTokensOperationCompleted);
            }
            this.InvokeAsync("SendInvToCQTByInvTokens", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        invTokens}, this.SendInvToCQTByInvTokensOperationCompleted, userState);
        }
        
        private void OnSendInvToCQTByInvTokensOperationCompleted(object arg) {
            if ((this.SendInvToCQTByInvTokensCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendInvToCQTByInvTokensCompleted(this, new SendInvToCQTByInvTokensCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendInvNoticeErrors", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendInvNoticeErrors(string Account, string ACpass, string xml, string username, string password, string pattern, int convert) {
            object[] results = this.Invoke("SendInvNoticeErrors", new object[] {
                        Account,
                        ACpass,
                        xml,
                        username,
                        password,
                        pattern,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendInvNoticeErrorsAsync(string Account, string ACpass, string xml, string username, string password, string pattern, int convert) {
            this.SendInvNoticeErrorsAsync(Account, ACpass, xml, username, password, pattern, convert, null);
        }
        
        /// <remarks/>
        public void SendInvNoticeErrorsAsync(string Account, string ACpass, string xml, string username, string password, string pattern, int convert, object userState) {
            if ((this.SendInvNoticeErrorsOperationCompleted == null)) {
                this.SendInvNoticeErrorsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendInvNoticeErrorsOperationCompleted);
            }
            this.InvokeAsync("SendInvNoticeErrors", new object[] {
                        Account,
                        ACpass,
                        xml,
                        username,
                        password,
                        pattern,
                        convert}, this.SendInvNoticeErrorsOperationCompleted, userState);
        }
        
        private void OnSendInvNoticeErrorsOperationCompleted(object arg) {
            if ((this.SendInvNoticeErrorsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendInvNoticeErrorsCompleted(this, new SendInvNoticeErrorsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendInvErrorMTT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendInvErrorMTT(string Account, string ACpass, string xml, string username, string password, string serialCert, int convert) {
            object[] results = this.Invoke("SendInvErrorMTT", new object[] {
                        Account,
                        ACpass,
                        xml,
                        username,
                        password,
                        serialCert,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendInvErrorMTTAsync(string Account, string ACpass, string xml, string username, string password, string serialCert, int convert) {
            this.SendInvErrorMTTAsync(Account, ACpass, xml, username, password, serialCert, convert, null);
        }
        
        /// <remarks/>
        public void SendInvErrorMTTAsync(string Account, string ACpass, string xml, string username, string password, string serialCert, int convert, object userState) {
            if ((this.SendInvErrorMTTOperationCompleted == null)) {
                this.SendInvErrorMTTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendInvErrorMTTOperationCompleted);
            }
            this.InvokeAsync("SendInvErrorMTT", new object[] {
                        Account,
                        ACpass,
                        xml,
                        username,
                        password,
                        serialCert,
                        convert}, this.SendInvErrorMTTOperationCompleted, userState);
        }
        
        private void OnSendInvErrorMTTOperationCompleted(object arg) {
            if ((this.SendInvErrorMTTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendInvErrorMTTCompleted(this, new SendInvErrorMTTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHashInvNoticeErrors", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetHashInvNoticeErrors(string Account, string ACpass, string xml, string username, string password, string pattern, int convert, string serialCert) {
            object[] results = this.Invoke("GetHashInvNoticeErrors", new object[] {
                        Account,
                        ACpass,
                        xml,
                        username,
                        password,
                        pattern,
                        convert,
                        serialCert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHashInvNoticeErrorsAsync(string Account, string ACpass, string xml, string username, string password, string pattern, int convert, string serialCert) {
            this.GetHashInvNoticeErrorsAsync(Account, ACpass, xml, username, password, pattern, convert, serialCert, null);
        }
        
        /// <remarks/>
        public void GetHashInvNoticeErrorsAsync(string Account, string ACpass, string xml, string username, string password, string pattern, int convert, string serialCert, object userState) {
            if ((this.GetHashInvNoticeErrorsOperationCompleted == null)) {
                this.GetHashInvNoticeErrorsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHashInvNoticeErrorsOperationCompleted);
            }
            this.InvokeAsync("GetHashInvNoticeErrors", new object[] {
                        Account,
                        ACpass,
                        xml,
                        username,
                        password,
                        pattern,
                        convert,
                        serialCert}, this.GetHashInvNoticeErrorsOperationCompleted, userState);
        }
        
        private void OnGetHashInvNoticeErrorsOperationCompleted(object arg) {
            if ((this.GetHashInvNoticeErrorsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHashInvNoticeErrorsCompleted(this, new GetHashInvNoticeErrorsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHashInvErrorMTTWithToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetHashInvErrorMTTWithToken(string Account, string ACpass, string xml, string username, string password, string serialCert, int convert) {
            object[] results = this.Invoke("GetHashInvErrorMTTWithToken", new object[] {
                        Account,
                        ACpass,
                        xml,
                        username,
                        password,
                        serialCert,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHashInvErrorMTTWithTokenAsync(string Account, string ACpass, string xml, string username, string password, string serialCert, int convert) {
            this.GetHashInvErrorMTTWithTokenAsync(Account, ACpass, xml, username, password, serialCert, convert, null);
        }
        
        /// <remarks/>
        public void GetHashInvErrorMTTWithTokenAsync(string Account, string ACpass, string xml, string username, string password, string serialCert, int convert, object userState) {
            if ((this.GetHashInvErrorMTTWithTokenOperationCompleted == null)) {
                this.GetHashInvErrorMTTWithTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHashInvErrorMTTWithTokenOperationCompleted);
            }
            this.InvokeAsync("GetHashInvErrorMTTWithToken", new object[] {
                        Account,
                        ACpass,
                        xml,
                        username,
                        password,
                        serialCert,
                        convert}, this.GetHashInvErrorMTTWithTokenOperationCompleted, userState);
        }
        
        private void OnGetHashInvErrorMTTWithTokenOperationCompleted(object arg) {
            if ((this.GetHashInvErrorMTTWithTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHashInvErrorMTTWithTokenCompleted(this, new GetHashInvErrorMTTWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHashInvNoticeErrorsWithSmartCA", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetHashInvNoticeErrorsWithSmartCA(string Account, string ACpass, string xml, string username, string password, string serial, string pattern, int convert) {
            object[] results = this.Invoke("GetHashInvNoticeErrorsWithSmartCA", new object[] {
                        Account,
                        ACpass,
                        xml,
                        username,
                        password,
                        serial,
                        pattern,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHashInvNoticeErrorsWithSmartCAAsync(string Account, string ACpass, string xml, string username, string password, string serial, string pattern, int convert) {
            this.GetHashInvNoticeErrorsWithSmartCAAsync(Account, ACpass, xml, username, password, serial, pattern, convert, null);
        }
        
        /// <remarks/>
        public void GetHashInvNoticeErrorsWithSmartCAAsync(string Account, string ACpass, string xml, string username, string password, string serial, string pattern, int convert, object userState) {
            if ((this.GetHashInvNoticeErrorsWithSmartCAOperationCompleted == null)) {
                this.GetHashInvNoticeErrorsWithSmartCAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHashInvNoticeErrorsWithSmartCAOperationCompleted);
            }
            this.InvokeAsync("GetHashInvNoticeErrorsWithSmartCA", new object[] {
                        Account,
                        ACpass,
                        xml,
                        username,
                        password,
                        serial,
                        pattern,
                        convert}, this.GetHashInvNoticeErrorsWithSmartCAOperationCompleted, userState);
        }
        
        private void OnGetHashInvNoticeErrorsWithSmartCAOperationCompleted(object arg) {
            if ((this.GetHashInvNoticeErrorsWithSmartCACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHashInvNoticeErrorsWithSmartCACompleted(this, new GetHashInvNoticeErrorsWithSmartCACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHashInvErrorMTTWithSmartCA", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetHashInvErrorMTTWithSmartCA(string Account, string ACpass, string xml, string username, string password, string serialCert, int convert) {
            object[] results = this.Invoke("GetHashInvErrorMTTWithSmartCA", new object[] {
                        Account,
                        ACpass,
                        xml,
                        username,
                        password,
                        serialCert,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHashInvErrorMTTWithSmartCAAsync(string Account, string ACpass, string xml, string username, string password, string serialCert, int convert) {
            this.GetHashInvErrorMTTWithSmartCAAsync(Account, ACpass, xml, username, password, serialCert, convert, null);
        }
        
        /// <remarks/>
        public void GetHashInvErrorMTTWithSmartCAAsync(string Account, string ACpass, string xml, string username, string password, string serialCert, int convert, object userState) {
            if ((this.GetHashInvErrorMTTWithSmartCAOperationCompleted == null)) {
                this.GetHashInvErrorMTTWithSmartCAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHashInvErrorMTTWithSmartCAOperationCompleted);
            }
            this.InvokeAsync("GetHashInvErrorMTTWithSmartCA", new object[] {
                        Account,
                        ACpass,
                        xml,
                        username,
                        password,
                        serialCert,
                        convert}, this.GetHashInvErrorMTTWithSmartCAOperationCompleted, userState);
        }
        
        private void OnGetHashInvErrorMTTWithSmartCAOperationCompleted(object arg) {
            if ((this.GetHashInvErrorMTTWithSmartCACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHashInvErrorMTTWithSmartCACompleted(this, new GetHashInvErrorMTTWithSmartCACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendInvNoticeErrorsWithSmartCA", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendInvNoticeErrorsWithSmartCA(string Account, string ACpass, string username, string password, string xml) {
            object[] results = this.Invoke("SendInvNoticeErrorsWithSmartCA", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        xml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendInvNoticeErrorsWithSmartCAAsync(string Account, string ACpass, string username, string password, string xml) {
            this.SendInvNoticeErrorsWithSmartCAAsync(Account, ACpass, username, password, xml, null);
        }
        
        /// <remarks/>
        public void SendInvNoticeErrorsWithSmartCAAsync(string Account, string ACpass, string username, string password, string xml, object userState) {
            if ((this.SendInvNoticeErrorsWithSmartCAOperationCompleted == null)) {
                this.SendInvNoticeErrorsWithSmartCAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendInvNoticeErrorsWithSmartCAOperationCompleted);
            }
            this.InvokeAsync("SendInvNoticeErrorsWithSmartCA", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        xml}, this.SendInvNoticeErrorsWithSmartCAOperationCompleted, userState);
        }
        
        private void OnSendInvNoticeErrorsWithSmartCAOperationCompleted(object arg) {
            if ((this.SendInvNoticeErrorsWithSmartCACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendInvNoticeErrorsWithSmartCACompleted(this, new SendInvNoticeErrorsWithSmartCACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendInvErrorMTTWithSmartCA", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendInvErrorMTTWithSmartCA(string Account, string ACpass, string username, string password, string xml) {
            object[] results = this.Invoke("SendInvErrorMTTWithSmartCA", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        xml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendInvErrorMTTWithSmartCAAsync(string Account, string ACpass, string username, string password, string xml) {
            this.SendInvErrorMTTWithSmartCAAsync(Account, ACpass, username, password, xml, null);
        }
        
        /// <remarks/>
        public void SendInvErrorMTTWithSmartCAAsync(string Account, string ACpass, string username, string password, string xml, object userState) {
            if ((this.SendInvErrorMTTWithSmartCAOperationCompleted == null)) {
                this.SendInvErrorMTTWithSmartCAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendInvErrorMTTWithSmartCAOperationCompleted);
            }
            this.InvokeAsync("SendInvErrorMTTWithSmartCA", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        xml}, this.SendInvErrorMTTWithSmartCAOperationCompleted, userState);
        }
        
        private void OnSendInvErrorMTTWithSmartCAOperationCompleted(object arg) {
            if ((this.SendInvErrorMTTWithSmartCACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendInvErrorMTTWithSmartCACompleted(this, new SendInvErrorMTTWithSmartCACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendInvNoticeErrorsWidthToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendInvNoticeErrorsWidthToken(string Account, string ACpass, string username, string password, string xml) {
            object[] results = this.Invoke("SendInvNoticeErrorsWidthToken", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        xml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendInvNoticeErrorsWidthTokenAsync(string Account, string ACpass, string username, string password, string xml) {
            this.SendInvNoticeErrorsWidthTokenAsync(Account, ACpass, username, password, xml, null);
        }
        
        /// <remarks/>
        public void SendInvNoticeErrorsWidthTokenAsync(string Account, string ACpass, string username, string password, string xml, object userState) {
            if ((this.SendInvNoticeErrorsWidthTokenOperationCompleted == null)) {
                this.SendInvNoticeErrorsWidthTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendInvNoticeErrorsWidthTokenOperationCompleted);
            }
            this.InvokeAsync("SendInvNoticeErrorsWidthToken", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        xml}, this.SendInvNoticeErrorsWidthTokenOperationCompleted, userState);
        }
        
        private void OnSendInvNoticeErrorsWidthTokenOperationCompleted(object arg) {
            if ((this.SendInvNoticeErrorsWidthTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendInvNoticeErrorsWidthTokenCompleted(this, new SendInvNoticeErrorsWidthTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendInvErrorMTTWithToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendInvErrorMTTWithToken(string Account, string ACpass, string username, string password, string xml) {
            object[] results = this.Invoke("SendInvErrorMTTWithToken", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        xml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendInvErrorMTTWithTokenAsync(string Account, string ACpass, string username, string password, string xml) {
            this.SendInvErrorMTTWithTokenAsync(Account, ACpass, username, password, xml, null);
        }
        
        /// <remarks/>
        public void SendInvErrorMTTWithTokenAsync(string Account, string ACpass, string username, string password, string xml, object userState) {
            if ((this.SendInvErrorMTTWithTokenOperationCompleted == null)) {
                this.SendInvErrorMTTWithTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendInvErrorMTTWithTokenOperationCompleted);
            }
            this.InvokeAsync("SendInvErrorMTTWithToken", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        xml}, this.SendInvErrorMTTWithTokenOperationCompleted, userState);
        }
        
        private void OnSendInvErrorMTTWithTokenOperationCompleted(object arg) {
            if ((this.SendInvErrorMTTWithTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendInvErrorMTTWithTokenCompleted(this, new SendInvErrorMTTWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HandleInvoiceErrors", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HandleInvoiceErrors(string Account, string ACpass, string username, string password, string mtd) {
            object[] results = this.Invoke("HandleInvoiceErrors", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        mtd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HandleInvoiceErrorsAsync(string Account, string ACpass, string username, string password, string mtd) {
            this.HandleInvoiceErrorsAsync(Account, ACpass, username, password, mtd, null);
        }
        
        /// <remarks/>
        public void HandleInvoiceErrorsAsync(string Account, string ACpass, string username, string password, string mtd, object userState) {
            if ((this.HandleInvoiceErrorsOperationCompleted == null)) {
                this.HandleInvoiceErrorsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHandleInvoiceErrorsOperationCompleted);
            }
            this.InvokeAsync("HandleInvoiceErrors", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        mtd}, this.HandleInvoiceErrorsOperationCompleted, userState);
        }
        
        private void OnHandleInvoiceErrorsOperationCompleted(object arg) {
            if ((this.HandleInvoiceErrorsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HandleInvoiceErrorsCompleted(this, new HandleInvoiceErrorsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReceivedInvoiceErrors", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReceivedInvoiceErrors(string Account, string ACpass, string username, string password, string mtd) {
            object[] results = this.Invoke("ReceivedInvoiceErrors", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        mtd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReceivedInvoiceErrorsAsync(string Account, string ACpass, string username, string password, string mtd) {
            this.ReceivedInvoiceErrorsAsync(Account, ACpass, username, password, mtd, null);
        }
        
        /// <remarks/>
        public void ReceivedInvoiceErrorsAsync(string Account, string ACpass, string username, string password, string mtd, object userState) {
            if ((this.ReceivedInvoiceErrorsOperationCompleted == null)) {
                this.ReceivedInvoiceErrorsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReceivedInvoiceErrorsOperationCompleted);
            }
            this.InvokeAsync("ReceivedInvoiceErrors", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        mtd}, this.ReceivedInvoiceErrorsOperationCompleted, userState);
        }
        
        private void OnReceivedInvoiceErrorsOperationCompleted(object arg) {
            if ((this.ReceivedInvoiceErrorsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReceivedInvoiceErrorsCompleted(this, new ReceivedInvoiceErrorsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHashInvSmartCA", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetHashInvSmartCA(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert) {
            object[] results = this.Invoke("GetHashInvSmartCA", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        serialCert,
                        type,
                        invToken,
                        pattern,
                        serial,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHashInvSmartCAAsync(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert) {
            this.GetHashInvSmartCAAsync(Account, ACpass, xmlInvData, username, password, serialCert, type, invToken, pattern, serial, convert, null);
        }
        
        /// <remarks/>
        public void GetHashInvSmartCAAsync(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert, object userState) {
            if ((this.GetHashInvSmartCAOperationCompleted == null)) {
                this.GetHashInvSmartCAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHashInvSmartCAOperationCompleted);
            }
            this.InvokeAsync("GetHashInvSmartCA", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        serialCert,
                        type,
                        invToken,
                        pattern,
                        serial,
                        convert}, this.GetHashInvSmartCAOperationCompleted, userState);
        }
        
        private void OnGetHashInvSmartCAOperationCompleted(object arg) {
            if ((this.GetHashInvSmartCACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHashInvSmartCACompleted(this, new GetHashInvSmartCACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PublishInvSmartCA", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PublishInvSmartCA(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial) {
            object[] results = this.Invoke("PublishInvSmartCA", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PublishInvSmartCAAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial) {
            this.PublishInvSmartCAAsync(Account, ACpass, xmlInvData, username, password, pattern, serial, null);
        }
        
        /// <remarks/>
        public void PublishInvSmartCAAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, object userState) {
            if ((this.PublishInvSmartCAOperationCompleted == null)) {
                this.PublishInvSmartCAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishInvSmartCAOperationCompleted);
            }
            this.InvokeAsync("PublishInvSmartCA", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial}, this.PublishInvSmartCAOperationCompleted, userState);
        }
        
        private void OnPublishInvSmartCAOperationCompleted(object arg) {
            if ((this.PublishInvSmartCACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishInvSmartCACompleted(this, new PublishInvSmartCACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCertificate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateCertificate(string Account, string ACpass, string certinfo, string serialCert, int certType, int id) {
            object[] results = this.Invoke("UpdateCertificate", new object[] {
                        Account,
                        ACpass,
                        certinfo,
                        serialCert,
                        certType,
                        id});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateCertificateAsync(string Account, string ACpass, string certinfo, string serialCert, int certType, int id) {
            this.UpdateCertificateAsync(Account, ACpass, certinfo, serialCert, certType, id, null);
        }
        
        /// <remarks/>
        public void UpdateCertificateAsync(string Account, string ACpass, string certinfo, string serialCert, int certType, int id, object userState) {
            if ((this.UpdateCertificateOperationCompleted == null)) {
                this.UpdateCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCertificateOperationCompleted);
            }
            this.InvokeAsync("UpdateCertificate", new object[] {
                        Account,
                        ACpass,
                        certinfo,
                        serialCert,
                        certType,
                        id}, this.UpdateCertificateOperationCompleted, userState);
        }
        
        private void OnUpdateCertificateOperationCompleted(object arg) {
            if ((this.UpdateCertificateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCertificateCompleted(this, new UpdateCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteCertificate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteCertificate(string Account, string ACpass, int id) {
            object[] results = this.Invoke("DeleteCertificate", new object[] {
                        Account,
                        ACpass,
                        id});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteCertificateAsync(string Account, string ACpass, int id) {
            this.DeleteCertificateAsync(Account, ACpass, id, null);
        }
        
        /// <remarks/>
        public void DeleteCertificateAsync(string Account, string ACpass, int id, object userState) {
            if ((this.DeleteCertificateOperationCompleted == null)) {
                this.DeleteCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCertificateOperationCompleted);
            }
            this.InvokeAsync("DeleteCertificate", new object[] {
                        Account,
                        ACpass,
                        id}, this.DeleteCertificateOperationCompleted, userState);
        }
        
        private void OnDeleteCertificateOperationCompleted(object arg) {
            if ((this.DeleteCertificateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCertificateCompleted(this, new DeleteCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCertificates", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCertificates(string userName, string password) {
            object[] results = this.Invoke("GetCertificates", new object[] {
                        userName,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCertificatesAsync(string userName, string password) {
            this.GetCertificatesAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void GetCertificatesAsync(string userName, string password, object userState) {
            if ((this.GetCertificatesOperationCompleted == null)) {
                this.GetCertificatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCertificatesOperationCompleted);
            }
            this.InvokeAsync("GetCertificates", new object[] {
                        userName,
                        password}, this.GetCertificatesOperationCompleted, userState);
        }
        
        private void OnGetCertificatesOperationCompleted(object arg) {
            if ((this.GetCertificatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCertificatesCompleted(this, new GetCertificatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterPublish", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RegisterPublish(string Account, string ACpass, string xmlInvData, string username, string password, int type) {
            object[] results = this.Invoke("RegisterPublish", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        type});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterPublishAsync(string Account, string ACpass, string xmlInvData, string username, string password, int type) {
            this.RegisterPublishAsync(Account, ACpass, xmlInvData, username, password, type, null);
        }
        
        /// <remarks/>
        public void RegisterPublishAsync(string Account, string ACpass, string xmlInvData, string username, string password, int type, object userState) {
            if ((this.RegisterPublishOperationCompleted == null)) {
                this.RegisterPublishOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterPublishOperationCompleted);
            }
            this.InvokeAsync("RegisterPublish", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        type}, this.RegisterPublishOperationCompleted, userState);
        }
        
        private void OnRegisterPublishOperationCompleted(object arg) {
            if ((this.RegisterPublishCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterPublishCompleted(this, new RegisterPublishCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReceivedRegisterPublish", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReceivedRegisterPublish(string Account, string ACpass, string username, string password, string mtd) {
            object[] results = this.Invoke("ReceivedRegisterPublish", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        mtd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReceivedRegisterPublishAsync(string Account, string ACpass, string username, string password, string mtd) {
            this.ReceivedRegisterPublishAsync(Account, ACpass, username, password, mtd, null);
        }
        
        /// <remarks/>
        public void ReceivedRegisterPublishAsync(string Account, string ACpass, string username, string password, string mtd, object userState) {
            if ((this.ReceivedRegisterPublishOperationCompleted == null)) {
                this.ReceivedRegisterPublishOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReceivedRegisterPublishOperationCompleted);
            }
            this.InvokeAsync("ReceivedRegisterPublish", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        mtd}, this.ReceivedRegisterPublishOperationCompleted, userState);
        }
        
        private void OnReceivedRegisterPublishOperationCompleted(object arg) {
            if ((this.ReceivedRegisterPublishCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReceivedRegisterPublishCompleted(this, new ReceivedRegisterPublishCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterPublishInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RegisterPublishInvoice(string Account, string ACpass, string username, string password, string Pattern, string Type, string Serial, int Quantity) {
            object[] results = this.Invoke("RegisterPublishInvoice", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        Pattern,
                        Type,
                        Serial,
                        Quantity});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterPublishInvoiceAsync(string Account, string ACpass, string username, string password, string Pattern, string Type, string Serial, int Quantity) {
            this.RegisterPublishInvoiceAsync(Account, ACpass, username, password, Pattern, Type, Serial, Quantity, null);
        }
        
        /// <remarks/>
        public void RegisterPublishInvoiceAsync(string Account, string ACpass, string username, string password, string Pattern, string Type, string Serial, int Quantity, object userState) {
            if ((this.RegisterPublishInvoiceOperationCompleted == null)) {
                this.RegisterPublishInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterPublishInvoiceOperationCompleted);
            }
            this.InvokeAsync("RegisterPublishInvoice", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        Pattern,
                        Type,
                        Serial,
                        Quantity}, this.RegisterPublishInvoiceOperationCompleted, userState);
        }
        
        private void OnRegisterPublishInvoiceOperationCompleted(object arg) {
            if ((this.RegisterPublishInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterPublishInvoiceCompleted(this, new RegisterPublishInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelPublishInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CancelPublishInvoice(string Account, string ACpass, string username, string password, string Pattern, string Serial) {
            object[] results = this.Invoke("CancelPublishInvoice", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        Pattern,
                        Serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CancelPublishInvoiceAsync(string Account, string ACpass, string username, string password, string Pattern, string Serial) {
            this.CancelPublishInvoiceAsync(Account, ACpass, username, password, Pattern, Serial, null);
        }
        
        /// <remarks/>
        public void CancelPublishInvoiceAsync(string Account, string ACpass, string username, string password, string Pattern, string Serial, object userState) {
            if ((this.CancelPublishInvoiceOperationCompleted == null)) {
                this.CancelPublishInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelPublishInvoiceOperationCompleted);
            }
            this.InvokeAsync("CancelPublishInvoice", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        Pattern,
                        Serial}, this.CancelPublishInvoiceOperationCompleted, userState);
        }
        
        private void OnCancelPublishInvoiceOperationCompleted(object arg) {
            if ((this.CancelPublishInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelPublishInvoiceCompleted(this, new CancelPublishInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemovePublishInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RemovePublishInvoice(string Account, string ACpass, string username, string password, string Pattern, string Serial) {
            object[] results = this.Invoke("RemovePublishInvoice", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        Pattern,
                        Serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemovePublishInvoiceAsync(string Account, string ACpass, string username, string password, string Pattern, string Serial) {
            this.RemovePublishInvoiceAsync(Account, ACpass, username, password, Pattern, Serial, null);
        }
        
        /// <remarks/>
        public void RemovePublishInvoiceAsync(string Account, string ACpass, string username, string password, string Pattern, string Serial, object userState) {
            if ((this.RemovePublishInvoiceOperationCompleted == null)) {
                this.RemovePublishInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemovePublishInvoiceOperationCompleted);
            }
            this.InvokeAsync("RemovePublishInvoice", new object[] {
                        Account,
                        ACpass,
                        username,
                        password,
                        Pattern,
                        Serial}, this.RemovePublishInvoiceOperationCompleted, userState);
        }
        
        private void OnRemovePublishInvoiceOperationCompleted(object arg) {
            if ((this.RemovePublishInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemovePublishInvoiceCompleted(this, new RemovePublishInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTransactionItems", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTransactionItems(string username, string password, int status, string mtdiep, string message, string fromDate, string toDate, string mltdiep, string pattern, string serial, decimal invNo, int step, int pageIndex, int pageSize) {
            object[] results = this.Invoke("GetTransactionItems", new object[] {
                        username,
                        password,
                        status,
                        mtdiep,
                        message,
                        fromDate,
                        toDate,
                        mltdiep,
                        pattern,
                        serial,
                        invNo,
                        step,
                        pageIndex,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransactionItemsAsync(string username, string password, int status, string mtdiep, string message, string fromDate, string toDate, string mltdiep, string pattern, string serial, decimal invNo, int step, int pageIndex, int pageSize) {
            this.GetTransactionItemsAsync(username, password, status, mtdiep, message, fromDate, toDate, mltdiep, pattern, serial, invNo, step, pageIndex, pageSize, null);
        }
        
        /// <remarks/>
        public void GetTransactionItemsAsync(string username, string password, int status, string mtdiep, string message, string fromDate, string toDate, string mltdiep, string pattern, string serial, decimal invNo, int step, int pageIndex, int pageSize, object userState) {
            if ((this.GetTransactionItemsOperationCompleted == null)) {
                this.GetTransactionItemsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionItemsOperationCompleted);
            }
            this.InvokeAsync("GetTransactionItems", new object[] {
                        username,
                        password,
                        status,
                        mtdiep,
                        message,
                        fromDate,
                        toDate,
                        mltdiep,
                        pattern,
                        serial,
                        invNo,
                        step,
                        pageIndex,
                        pageSize}, this.GetTransactionItemsOperationCompleted, userState);
        }
        
        private void OnGetTransactionItemsOperationCompleted(object arg) {
            if ((this.GetTransactionItemsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransactionItemsCompleted(this, new GetTransactionItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTransactionDetail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTransactionDetail(string username, string password, string mtd) {
            object[] results = this.Invoke("GetTransactionDetail", new object[] {
                        username,
                        password,
                        mtd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransactionDetailAsync(string username, string password, string mtd) {
            this.GetTransactionDetailAsync(username, password, mtd, null);
        }
        
        /// <remarks/>
        public void GetTransactionDetailAsync(string username, string password, string mtd, object userState) {
            if ((this.GetTransactionDetailOperationCompleted == null)) {
                this.GetTransactionDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionDetailOperationCompleted);
            }
            this.InvokeAsync("GetTransactionDetail", new object[] {
                        username,
                        password,
                        mtd}, this.GetTransactionDetailOperationCompleted, userState);
        }
        
        private void OnGetTransactionDetailOperationCompleted(object arg) {
            if ((this.GetTransactionDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransactionDetailCompleted(this, new GetTransactionDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStepDetail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStepDetail(string username, string password, string stepId, string mtd) {
            object[] results = this.Invoke("GetStepDetail", new object[] {
                        username,
                        password,
                        stepId,
                        mtd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetStepDetailAsync(string username, string password, string stepId, string mtd) {
            this.GetStepDetailAsync(username, password, stepId, mtd, null);
        }
        
        /// <remarks/>
        public void GetStepDetailAsync(string username, string password, string stepId, string mtd, object userState) {
            if ((this.GetStepDetailOperationCompleted == null)) {
                this.GetStepDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStepDetailOperationCompleted);
            }
            this.InvokeAsync("GetStepDetail", new object[] {
                        username,
                        password,
                        stepId,
                        mtd}, this.GetStepDetailOperationCompleted, userState);
        }
        
        private void OnGetStepDetailOperationCompleted(object arg) {
            if ((this.GetStepDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStepDetailCompleted(this, new GetStepDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetResultsTransaction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetResultsTransaction(string username, string password, int Id, bool tranErr) {
            object[] results = this.Invoke("GetResultsTransaction", new object[] {
                        username,
                        password,
                        Id,
                        tranErr});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetResultsTransactionAsync(string username, string password, int Id, bool tranErr) {
            this.GetResultsTransactionAsync(username, password, Id, tranErr, null);
        }
        
        /// <remarks/>
        public void GetResultsTransactionAsync(string username, string password, int Id, bool tranErr, object userState) {
            if ((this.GetResultsTransactionOperationCompleted == null)) {
                this.GetResultsTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultsTransactionOperationCompleted);
            }
            this.InvokeAsync("GetResultsTransaction", new object[] {
                        username,
                        password,
                        Id,
                        tranErr}, this.GetResultsTransactionOperationCompleted, userState);
        }
        
        private void OnGetResultsTransactionOperationCompleted(object arg) {
            if ((this.GetResultsTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResultsTransactionCompleted(this, new GetResultsTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportInvByPatternCTT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportInvByPatternCTT(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert) {
            object[] results = this.Invoke("ImportInvByPatternCTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportInvByPatternCTTAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert) {
            this.ImportInvByPatternCTTAsync(Account, ACpass, xmlInvData, username, password, pattern, serial, convert, null);
        }
        
        /// <remarks/>
        public void ImportInvByPatternCTTAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert, object userState) {
            if ((this.ImportInvByPatternCTTOperationCompleted == null)) {
                this.ImportInvByPatternCTTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportInvByPatternCTTOperationCompleted);
            }
            this.InvokeAsync("ImportInvByPatternCTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial,
                        convert}, this.ImportInvByPatternCTTOperationCompleted, userState);
        }
        
        private void OnImportInvByPatternCTTOperationCompleted(object arg) {
            if ((this.ImportInvByPatternCTTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportInvByPatternCTTCompleted(this, new ImportInvByPatternCTTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportAndPublishCTT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportAndPublishCTT(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert) {
            object[] results = this.Invoke("ImportAndPublishCTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportAndPublishCTTAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert) {
            this.ImportAndPublishCTTAsync(Account, ACpass, xmlInvData, username, password, pattern, serial, convert, null);
        }
        
        /// <remarks/>
        public void ImportAndPublishCTTAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert, object userState) {
            if ((this.ImportAndPublishCTTOperationCompleted == null)) {
                this.ImportAndPublishCTTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportAndPublishCTTOperationCompleted);
            }
            this.InvokeAsync("ImportAndPublishCTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial,
                        convert}, this.ImportAndPublishCTTOperationCompleted, userState);
        }
        
        private void OnImportAndPublishCTTOperationCompleted(object arg) {
            if ((this.ImportAndPublishCTTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportAndPublishCTTCompleted(this, new ImportAndPublishCTTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHashCTTSmartCA", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetHashCTTSmartCA(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert) {
            object[] results = this.Invoke("GetHashCTTSmartCA", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        serialCert,
                        type,
                        invToken,
                        pattern,
                        serial,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHashCTTSmartCAAsync(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert) {
            this.GetHashCTTSmartCAAsync(Account, ACpass, xmlInvData, username, password, serialCert, type, invToken, pattern, serial, convert, null);
        }
        
        /// <remarks/>
        public void GetHashCTTSmartCAAsync(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert, object userState) {
            if ((this.GetHashCTTSmartCAOperationCompleted == null)) {
                this.GetHashCTTSmartCAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHashCTTSmartCAOperationCompleted);
            }
            this.InvokeAsync("GetHashCTTSmartCA", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        serialCert,
                        type,
                        invToken,
                        pattern,
                        serial,
                        convert}, this.GetHashCTTSmartCAOperationCompleted, userState);
        }
        
        private void OnGetHashCTTSmartCAOperationCompleted(object arg) {
            if ((this.GetHashCTTSmartCACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHashCTTSmartCACompleted(this, new GetHashCTTSmartCACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PublishCTTSmartCA", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PublishCTTSmartCA(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial) {
            object[] results = this.Invoke("PublishCTTSmartCA", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PublishCTTSmartCAAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial) {
            this.PublishCTTSmartCAAsync(Account, ACpass, xmlInvData, username, password, pattern, serial, null);
        }
        
        /// <remarks/>
        public void PublishCTTSmartCAAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, object userState) {
            if ((this.PublishCTTSmartCAOperationCompleted == null)) {
                this.PublishCTTSmartCAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishCTTSmartCAOperationCompleted);
            }
            this.InvokeAsync("PublishCTTSmartCA", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial}, this.PublishCTTSmartCAOperationCompleted, userState);
        }
        
        private void OnPublishCTTSmartCAOperationCompleted(object arg) {
            if ((this.PublishCTTSmartCACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishCTTSmartCACompleted(this, new PublishCTTSmartCACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getHashCTTWithToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getHashCTTWithToken(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert) {
            object[] results = this.Invoke("getHashCTTWithToken", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        serialCert,
                        type,
                        invToken,
                        pattern,
                        serial,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getHashCTTWithTokenAsync(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert) {
            this.getHashCTTWithTokenAsync(Account, ACpass, xmlInvData, username, password, serialCert, type, invToken, pattern, serial, convert, null);
        }
        
        /// <remarks/>
        public void getHashCTTWithTokenAsync(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert, object userState) {
            if ((this.getHashCTTWithTokenOperationCompleted == null)) {
                this.getHashCTTWithTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHashCTTWithTokenOperationCompleted);
            }
            this.InvokeAsync("getHashCTTWithToken", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        serialCert,
                        type,
                        invToken,
                        pattern,
                        serial,
                        convert}, this.getHashCTTWithTokenOperationCompleted, userState);
        }
        
        private void OngetHashCTTWithTokenOperationCompleted(object arg) {
            if ((this.getHashCTTWithTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getHashCTTWithTokenCompleted(this, new getHashCTTWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/publishCTTWithToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string publishCTTWithToken(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial) {
            object[] results = this.Invoke("publishCTTWithToken", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void publishCTTWithTokenAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial) {
            this.publishCTTWithTokenAsync(Account, ACpass, xmlInvData, username, password, pattern, serial, null);
        }
        
        /// <remarks/>
        public void publishCTTWithTokenAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, object userState) {
            if ((this.publishCTTWithTokenOperationCompleted == null)) {
                this.publishCTTWithTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpublishCTTWithTokenOperationCompleted);
            }
            this.InvokeAsync("publishCTTWithToken", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial}, this.publishCTTWithTokenOperationCompleted, userState);
        }
        
        private void OnpublishCTTWithTokenOperationCompleted(object arg) {
            if ((this.publishCTTWithTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.publishCTTWithTokenCompleted(this, new publishCTTWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterPublishCTT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RegisterPublishCTT(string Account, string ACpass, string xmlInvData, string username, string password, int type, int version) {
            object[] results = this.Invoke("RegisterPublishCTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        type,
                        version});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterPublishCTTAsync(string Account, string ACpass, string xmlInvData, string username, string password, int type, int version) {
            this.RegisterPublishCTTAsync(Account, ACpass, xmlInvData, username, password, type, version, null);
        }
        
        /// <remarks/>
        public void RegisterPublishCTTAsync(string Account, string ACpass, string xmlInvData, string username, string password, int type, int version, object userState) {
            if ((this.RegisterPublishCTTOperationCompleted == null)) {
                this.RegisterPublishCTTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterPublishCTTOperationCompleted);
            }
            this.InvokeAsync("RegisterPublishCTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        type,
                        version}, this.RegisterPublishCTTOperationCompleted, userState);
        }
        
        private void OnRegisterPublishCTTOperationCompleted(object arg) {
            if ((this.RegisterPublishCTTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterPublishCTTCompleted(this, new RegisterPublishCTTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportAndPublishInvMTT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportAndPublishInvMTT(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert) {
            object[] results = this.Invoke("ImportAndPublishInvMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportAndPublishInvMTTAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert) {
            this.ImportAndPublishInvMTTAsync(Account, ACpass, xmlInvData, username, password, pattern, serial, convert, null);
        }
        
        /// <remarks/>
        public void ImportAndPublishInvMTTAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert, object userState) {
            if ((this.ImportAndPublishInvMTTOperationCompleted == null)) {
                this.ImportAndPublishInvMTTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportAndPublishInvMTTOperationCompleted);
            }
            this.InvokeAsync("ImportAndPublishInvMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial,
                        convert}, this.ImportAndPublishInvMTTOperationCompleted, userState);
        }
        
        private void OnImportAndPublishInvMTTOperationCompleted(object arg) {
            if ((this.ImportAndPublishInvMTTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportAndPublishInvMTTCompleted(this, new ImportAndPublishInvMTTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportInvByPatternMTT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportInvByPatternMTT(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert) {
            object[] results = this.Invoke("ImportInvByPatternMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportInvByPatternMTTAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert) {
            this.ImportInvByPatternMTTAsync(Account, ACpass, xmlInvData, username, password, pattern, serial, convert, null);
        }
        
        /// <remarks/>
        public void ImportInvByPatternMTTAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, int convert, object userState) {
            if ((this.ImportInvByPatternMTTOperationCompleted == null)) {
                this.ImportInvByPatternMTTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportInvByPatternMTTOperationCompleted);
            }
            this.InvokeAsync("ImportInvByPatternMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial,
                        convert}, this.ImportInvByPatternMTTOperationCompleted, userState);
        }
        
        private void OnImportInvByPatternMTTOperationCompleted(object arg) {
            if ((this.ImportInvByPatternMTTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportInvByPatternMTTCompleted(this, new ImportInvByPatternMTTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getHashInvWithTokenMTT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getHashInvWithTokenMTT(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert) {
            object[] results = this.Invoke("getHashInvWithTokenMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        serialCert,
                        type,
                        invToken,
                        pattern,
                        serial,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getHashInvWithTokenMTTAsync(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert) {
            this.getHashInvWithTokenMTTAsync(Account, ACpass, xmlInvData, username, password, serialCert, type, invToken, pattern, serial, convert, null);
        }
        
        /// <remarks/>
        public void getHashInvWithTokenMTTAsync(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert, object userState) {
            if ((this.getHashInvWithTokenMTTOperationCompleted == null)) {
                this.getHashInvWithTokenMTTOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHashInvWithTokenMTTOperationCompleted);
            }
            this.InvokeAsync("getHashInvWithTokenMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        serialCert,
                        type,
                        invToken,
                        pattern,
                        serial,
                        convert}, this.getHashInvWithTokenMTTOperationCompleted, userState);
        }
        
        private void OngetHashInvWithTokenMTTOperationCompleted(object arg) {
            if ((this.getHashInvWithTokenMTTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getHashInvWithTokenMTTCompleted(this, new getHashInvWithTokenMTTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/publishInvWithTokenMTT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string publishInvWithTokenMTT(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial) {
            object[] results = this.Invoke("publishInvWithTokenMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void publishInvWithTokenMTTAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial) {
            this.publishInvWithTokenMTTAsync(Account, ACpass, xmlInvData, username, password, pattern, serial, null);
        }
        
        /// <remarks/>
        public void publishInvWithTokenMTTAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, object userState) {
            if ((this.publishInvWithTokenMTTOperationCompleted == null)) {
                this.publishInvWithTokenMTTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpublishInvWithTokenMTTOperationCompleted);
            }
            this.InvokeAsync("publishInvWithTokenMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial}, this.publishInvWithTokenMTTOperationCompleted, userState);
        }
        
        private void OnpublishInvWithTokenMTTOperationCompleted(object arg) {
            if ((this.publishInvWithTokenMTTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.publishInvWithTokenMTTCompleted(this, new publishInvWithTokenMTTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHashInvSmartCAMTT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetHashInvSmartCAMTT(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert) {
            object[] results = this.Invoke("GetHashInvSmartCAMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        serialCert,
                        type,
                        invToken,
                        pattern,
                        serial,
                        convert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHashInvSmartCAMTTAsync(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert) {
            this.GetHashInvSmartCAMTTAsync(Account, ACpass, xmlInvData, username, password, serialCert, type, invToken, pattern, serial, convert, null);
        }
        
        /// <remarks/>
        public void GetHashInvSmartCAMTTAsync(string Account, string ACpass, string xmlInvData, string username, string password, string serialCert, int type, string invToken, string pattern, string serial, int convert, object userState) {
            if ((this.GetHashInvSmartCAMTTOperationCompleted == null)) {
                this.GetHashInvSmartCAMTTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHashInvSmartCAMTTOperationCompleted);
            }
            this.InvokeAsync("GetHashInvSmartCAMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        serialCert,
                        type,
                        invToken,
                        pattern,
                        serial,
                        convert}, this.GetHashInvSmartCAMTTOperationCompleted, userState);
        }
        
        private void OnGetHashInvSmartCAMTTOperationCompleted(object arg) {
            if ((this.GetHashInvSmartCAMTTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHashInvSmartCAMTTCompleted(this, new GetHashInvSmartCAMTTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PublishInvSmartCAMTT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PublishInvSmartCAMTT(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial) {
            object[] results = this.Invoke("PublishInvSmartCAMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PublishInvSmartCAMTTAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial) {
            this.PublishInvSmartCAMTTAsync(Account, ACpass, xmlInvData, username, password, pattern, serial, null);
        }
        
        /// <remarks/>
        public void PublishInvSmartCAMTTAsync(string Account, string ACpass, string xmlInvData, string username, string password, string pattern, string serial, object userState) {
            if ((this.PublishInvSmartCAMTTOperationCompleted == null)) {
                this.PublishInvSmartCAMTTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishInvSmartCAMTTOperationCompleted);
            }
            this.InvokeAsync("PublishInvSmartCAMTT", new object[] {
                        Account,
                        ACpass,
                        xmlInvData,
                        username,
                        password,
                        pattern,
                        serial}, this.PublishInvSmartCAMTTOperationCompleted, userState);
        }
        
        private void OnPublishInvSmartCAMTTOperationCompleted(object arg) {
            if ((this.PublishInvSmartCAMTTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishInvSmartCAMTTCompleted(this, new PublishInvSmartCAMTTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ImportAndPublishInvCompletedEventHandler(object sender, ImportAndPublishInvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportAndPublishInvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportAndPublishInvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ImportAndPublishInvMTT32CompletedEventHandler(object sender, ImportAndPublishInvMTT32CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportAndPublishInvMTT32CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportAndPublishInvMTT32CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ImportAndPublishAssignedNoCompletedEventHandler(object sender, ImportAndPublishAssignedNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportAndPublishAssignedNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportAndPublishAssignedNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ImportAndPublishAssignedNoMTTCompletedEventHandler(object sender, ImportAndPublishAssignedNoMTTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportAndPublishAssignedNoMTTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportAndPublishAssignedNoMTTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ImportInvCompletedEventHandler(object sender, ImportInvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportInvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportInvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ImportInvByPatternCompletedEventHandler(object sender, ImportInvByPatternCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportInvByPatternCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportInvByPatternCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void deleteInvoiceByFkeyCompletedEventHandler(object sender, deleteInvoiceByFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteInvoiceByFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteInvoiceByFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetInvDataByFkeyCompletedEventHandler(object sender, GetInvDataByFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvDataByFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInvDataByFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void deleteInvoiceByIDCompletedEventHandler(object sender, deleteInvoiceByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteInvoiceByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteInvoiceByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void publishInvCompletedEventHandler(object sender, publishInvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class publishInvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal publishInvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void PrintNoticeInvErrorCompletedEventHandler(object sender, PrintNoticeInvErrorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrintNoticeInvErrorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrintNoticeInvErrorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void PrintNoticeInvErrorCQTCompletedEventHandler(object sender, PrintNoticeInvErrorCQTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrintNoticeInvErrorCQTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrintNoticeInvErrorCQTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void PublishInvFkeyCompletedEventHandler(object sender, PublishInvFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublishInvFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PublishInvFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void PublishInvByDateCompletedEventHandler(object sender, PublishInvByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublishInvByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PublishInvByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void UpdateCusCompletedEventHandler(object sender, UpdateCusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateCusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateCusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void setCusCertCompletedEventHandler(object sender, setCusCertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setCusCertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setCusCertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetCertInfoCompletedEventHandler(object sender, GetCertInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCertInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCertInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void syncInfomationCompletedEventHandler(object sender, syncInfomationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class syncInfomationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal syncInfomationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void SignInCompletedEventHandler(object sender, SignInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SignInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SignInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void resetPasswordCompletedEventHandler(object sender, resetPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class resetPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal resetPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AppClientSyncInfoSystemCompletedEventHandler(object sender, AppClientSyncInfoSystemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AppClientSyncInfoSystemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AppClientSyncInfoSystemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getCurrentNoCompletedEventHandler(object sender, getCurrentNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCurrentNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCurrentNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void syncClientInvCompletedEventHandler(object sender, syncClientInvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class syncClientInvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal syncClientInvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void updateInvoiceCompletedEventHandler(object sender, updateInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void syncDecisionCompletedEventHandler(object sender, syncDecisionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class syncDecisionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal syncDecisionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void syncPublishCompletedEventHandler(object sender, syncPublishCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class syncPublishCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal syncPublishCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetPublishInvCompletedEventHandler(object sender, GetPublishInvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPublishInvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPublishInvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void syncInvCancelCompletedEventHandler(object sender, syncInvCancelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class syncInvCancelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal syncInvCancelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getDateTimeServerCompletedEventHandler(object sender, getDateTimeServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDateTimeServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDateTimeServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void syncClientInvoiceCancelCompletedEventHandler(object sender, syncClientInvoiceCancelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class syncClientInvoiceCancelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal syncClientInvoiceCancelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ConvertForVerifyCompletedEventHandler(object sender, ConvertForVerifyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvertForVerifyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConvertForVerifyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void sendEmailCompletedEventHandler(object sender, sendEmailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void syncCertCompletedEventHandler(object sender, syncCertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class syncCertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal syncCertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void syncInvoicev2CompletedEventHandler(object sender, syncInvoicev2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class syncInvoicev2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal syncInvoicev2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void syncInvoiceCompletedEventHandler(object sender, syncInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class syncInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal syncInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetSingleInvoiceCompletedEventHandler(object sender, GetSingleInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSingleInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSingleInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void PaymentForVerifyCompletedEventHandler(object sender, PaymentForVerifyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentForVerifyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentForVerifyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void sendEmailAgainCompletedEventHandler(object sender, sendEmailAgainCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendEmailAgainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendEmailAgainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getHashInvWithTokenCompletedEventHandler(object sender, getHashInvWithTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getHashInvWithTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getHashInvWithTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void publishInvWithTokenCompletedEventHandler(object sender, publishInvWithTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class publishInvWithTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal publishInvWithTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AdjustReplaceInvWithTokenCompletedEventHandler(object sender, AdjustReplaceInvWithTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustReplaceInvWithTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustReplaceInvWithTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void CancelInvoiceWithTokenCompletedEventHandler(object sender, CancelInvoiceWithTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelInvoiceWithTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelInvoiceWithTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void rolBackWithTokenCompletedEventHandler(object sender, rolBackWithTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class rolBackWithTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal rolBackWithTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void importCertWithTokenCompletedEventHandler(object sender, importCertWithTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class importCertWithTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal importCertWithTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getStatusInvCompletedEventHandler(object sender, getStatusInvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getStatusInvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getStatusInvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getHashInvCompletedEventHandler(object sender, getHashInvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getHashInvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getHashInvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetInvoiceByFkeyCompletedEventHandler(object sender, GetInvoiceByFkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvoiceByFkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInvoiceByFkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetInvoiceByFkeysCompletedEventHandler(object sender, GetInvoiceByFkeysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvoiceByFkeysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInvoiceByFkeysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetInForPublishComCompletedEventHandler(object sender, GetInForPublishComCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInForPublishComCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInForPublishComCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void SendAgainEmailServCompletedEventHandler(object sender, SendAgainEmailServCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendAgainEmailServCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendAgainEmailServCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetDataInvHsmCompletedEventHandler(object sender, GetDataInvHsmCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataInvHsmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataInvHsmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ImportAndPublishInvSignServiceCompletedEventHandler(object sender, ImportAndPublishInvSignServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportAndPublishInvSignServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportAndPublishInvSignServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetMCCQThueByInvTokensCompletedEventHandler(object sender, GetMCCQThueByInvTokensCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMCCQThueByInvTokensCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMCCQThueByInvTokensCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetMCCQThueByFkeysCompletedEventHandler(object sender, GetMCCQThueByFkeysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMCCQThueByFkeysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMCCQThueByFkeysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetMCCQThueByInvTokensNoXMLSignCompletedEventHandler(object sender, GetMCCQThueByInvTokensNoXMLSignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMCCQThueByInvTokensNoXMLSignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMCCQThueByInvTokensNoXMLSignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetMCCQThueByFkeysNoXMLSignCompletedEventHandler(object sender, GetMCCQThueByFkeysNoXMLSignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMCCQThueByFkeysNoXMLSignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMCCQThueByFkeysNoXMLSignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetMCCQThueFromNoToNoCompletedEventHandler(object sender, GetMCCQThueFromNoToNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMCCQThueFromNoToNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMCCQThueFromNoToNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void SendInvToCQTByFkeysCompletedEventHandler(object sender, SendInvToCQTByFkeysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendInvToCQTByFkeysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendInvToCQTByFkeysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void SendInvToCQTByInvTokensCompletedEventHandler(object sender, SendInvToCQTByInvTokensCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendInvToCQTByInvTokensCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendInvToCQTByInvTokensCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void SendInvNoticeErrorsCompletedEventHandler(object sender, SendInvNoticeErrorsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendInvNoticeErrorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendInvNoticeErrorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void SendInvErrorMTTCompletedEventHandler(object sender, SendInvErrorMTTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendInvErrorMTTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendInvErrorMTTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetHashInvNoticeErrorsCompletedEventHandler(object sender, GetHashInvNoticeErrorsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHashInvNoticeErrorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHashInvNoticeErrorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetHashInvErrorMTTWithTokenCompletedEventHandler(object sender, GetHashInvErrorMTTWithTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHashInvErrorMTTWithTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHashInvErrorMTTWithTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetHashInvNoticeErrorsWithSmartCACompletedEventHandler(object sender, GetHashInvNoticeErrorsWithSmartCACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHashInvNoticeErrorsWithSmartCACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHashInvNoticeErrorsWithSmartCACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetHashInvErrorMTTWithSmartCACompletedEventHandler(object sender, GetHashInvErrorMTTWithSmartCACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHashInvErrorMTTWithSmartCACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHashInvErrorMTTWithSmartCACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void SendInvNoticeErrorsWithSmartCACompletedEventHandler(object sender, SendInvNoticeErrorsWithSmartCACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendInvNoticeErrorsWithSmartCACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendInvNoticeErrorsWithSmartCACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void SendInvErrorMTTWithSmartCACompletedEventHandler(object sender, SendInvErrorMTTWithSmartCACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendInvErrorMTTWithSmartCACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendInvErrorMTTWithSmartCACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void SendInvNoticeErrorsWidthTokenCompletedEventHandler(object sender, SendInvNoticeErrorsWidthTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendInvNoticeErrorsWidthTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendInvNoticeErrorsWidthTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void SendInvErrorMTTWithTokenCompletedEventHandler(object sender, SendInvErrorMTTWithTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendInvErrorMTTWithTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendInvErrorMTTWithTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void HandleInvoiceErrorsCompletedEventHandler(object sender, HandleInvoiceErrorsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HandleInvoiceErrorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HandleInvoiceErrorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ReceivedInvoiceErrorsCompletedEventHandler(object sender, ReceivedInvoiceErrorsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReceivedInvoiceErrorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReceivedInvoiceErrorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetHashInvSmartCACompletedEventHandler(object sender, GetHashInvSmartCACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHashInvSmartCACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHashInvSmartCACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void PublishInvSmartCACompletedEventHandler(object sender, PublishInvSmartCACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublishInvSmartCACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PublishInvSmartCACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void UpdateCertificateCompletedEventHandler(object sender, UpdateCertificateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void DeleteCertificateCompletedEventHandler(object sender, DeleteCertificateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetCertificatesCompletedEventHandler(object sender, GetCertificatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCertificatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCertificatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void RegisterPublishCompletedEventHandler(object sender, RegisterPublishCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterPublishCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterPublishCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ReceivedRegisterPublishCompletedEventHandler(object sender, ReceivedRegisterPublishCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReceivedRegisterPublishCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReceivedRegisterPublishCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void RegisterPublishInvoiceCompletedEventHandler(object sender, RegisterPublishInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterPublishInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterPublishInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void CancelPublishInvoiceCompletedEventHandler(object sender, CancelPublishInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelPublishInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelPublishInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void RemovePublishInvoiceCompletedEventHandler(object sender, RemovePublishInvoiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemovePublishInvoiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemovePublishInvoiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetTransactionItemsCompletedEventHandler(object sender, GetTransactionItemsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransactionItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransactionItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetTransactionDetailCompletedEventHandler(object sender, GetTransactionDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransactionDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransactionDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetStepDetailCompletedEventHandler(object sender, GetStepDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStepDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStepDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetResultsTransactionCompletedEventHandler(object sender, GetResultsTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResultsTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResultsTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ImportInvByPatternCTTCompletedEventHandler(object sender, ImportInvByPatternCTTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportInvByPatternCTTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportInvByPatternCTTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ImportAndPublishCTTCompletedEventHandler(object sender, ImportAndPublishCTTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportAndPublishCTTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportAndPublishCTTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetHashCTTSmartCACompletedEventHandler(object sender, GetHashCTTSmartCACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHashCTTSmartCACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHashCTTSmartCACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void PublishCTTSmartCACompletedEventHandler(object sender, PublishCTTSmartCACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublishCTTSmartCACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PublishCTTSmartCACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getHashCTTWithTokenCompletedEventHandler(object sender, getHashCTTWithTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getHashCTTWithTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getHashCTTWithTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void publishCTTWithTokenCompletedEventHandler(object sender, publishCTTWithTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class publishCTTWithTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal publishCTTWithTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void RegisterPublishCTTCompletedEventHandler(object sender, RegisterPublishCTTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterPublishCTTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterPublishCTTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ImportAndPublishInvMTTCompletedEventHandler(object sender, ImportAndPublishInvMTTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportAndPublishInvMTTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportAndPublishInvMTTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ImportInvByPatternMTTCompletedEventHandler(object sender, ImportInvByPatternMTTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportInvByPatternMTTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportInvByPatternMTTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void getHashInvWithTokenMTTCompletedEventHandler(object sender, getHashInvWithTokenMTTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getHashInvWithTokenMTTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getHashInvWithTokenMTTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void publishInvWithTokenMTTCompletedEventHandler(object sender, publishInvWithTokenMTTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class publishInvWithTokenMTTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal publishInvWithTokenMTTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetHashInvSmartCAMTTCompletedEventHandler(object sender, GetHashInvSmartCAMTTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHashInvSmartCAMTTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHashInvSmartCAMTTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void PublishInvSmartCAMTTCompletedEventHandler(object sender, PublishInvSmartCAMTTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublishInvSmartCAMTTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PublishInvSmartCAMTTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591